Abort()procedure\nEscapes from the current execution path without reporting an error.\nAbort raises a special "silent exception" which operates like any\nother exception, but does not display an error message to the end\nuser.
ActiveLanguage()function -> String\nReturns the name of the active language.
AddBackslash(const S: String)function -> String\nReturns the specified string with a trailing backslash added, unless\nthe string is empty or already ends in a slash or backslash.
AddPeriod(const S: String)function -> String\nReturns the specified string with a trailing period added, unless the\nstring is empty or already ends in a period or other punctuation mark.
AddQuotes(const S: String)function -> String\nAdds a quote (") character to the left and right sides of the string\nif the string contains a space and it didn't have quotes already. This\nis primarily used when spawning another process with a long filename\nas one of the parameters.
AnsiLowercase(S: String)function -> String\nReturns a string that is a copy of the given string converted to\nlowercase. The conversion uses the current Windows locale. This\nfunction supports multi-byte character sets (MBCS).
AnsiUppercase(S: String)function -> String\nReturns a string that is a copy of the given string converted to\nuppercase. The conversion uses the current Windows locale. This\nfunction supports multi-byte character sets (MBCS).
Beep()procedure\nBeeps.
BringToFrontAndRestore()procedure\nMakes sure that Setup or Uninstall is visible and the foreground\nwindow.
BrowseForFolder(const Prompt: String; var Directory: String; const NewFolderButton: Boolean)function -> Boolean\nDisplays a dialog box that enables the user to select a directory. The\ncurrent value of Directory is used as the initially selected\ndirectory. If NewFolderButton is True, a New Folder button will be\nshown, allowing the user to create new folders. Returns True if the\nuser selected a directory and clicked OK, False otherwise. The [...]
CallDLLProc(const DLLHandle: Longint; const ProcName: String; const Param1, Param2: Longint; var Result: Longint)function -> Boolean\nCalls the specified function in a DLL specified using the DLL handle\nreturned by LoadDLL. Returns True is the procedure was called\nsuccessfully, False otherwise.
CastIntegerToString(const L: Longint)function -> String\nCasts an integer to a string so that a string can be received from a\nDLL using CallDllProc.
CastStringToInteger(var S: String)function -> Longint\nCasts a string to an integer so that a string can be passed to a DLL\nusing CallDllProc.
ChangeFileExt(const FileName, Extension: string)function -> String\nTakes the file name passed in FileName and changes the extension of\nthe file name to the extension passed in Extension.
CharLength(const S: String; const Index: Integer)function -> Integer\nReturns the length in bytes (1 or 2) of the character in the specified\nstring at the specified index.
CharToOemBuff(var S: AnsiString)procedure\nTranslates an ANSI string to a string with characters from the OEM-\ndefined character set.
CheckForMutexes(Mutexes: String)function -> Boolean\nReturns True if any of the mutexes in the comma-separated Mutexes\nstring exist.
Chr(B: Byte)function -> Char\nReturns the character with the specified ordinal value.
CoFreeUnusedLibraries()procedure\nSee the Using COM Automation objects topic.
ComparePackedVersion(const Version1, Version2: Int64)function -> Integer\nCompares Version1 to Version2. The return value is less than 0 if\nVersion1 is less than Version2, 0 if Version1 equals Version2, or\ngreater than 0 if Version1 is greater than Version2.
CompareStr(const S1, S2: string)function -> Integer\nCompares S1 to S2, with case-sensitivity. The return value is less\nthan 0 if S1 is less than S2, 0 if S1 equals S2, or greater than 0 if\nS1 is greater than S2.
CompareText(const S1, S2: string)function -> Integer\nCompares the strings S1 and S2 and returns 0 if they are equal. If S1\nis greater than S2, CompareText returns an integer greater than 0. If\nS1 is less than S2, CompareText returns an integer less than 0. The\nCompareText function is not case-sensitive.
ConvertPercentStr(var S: String)function -> Boolean\nExpands all %-encoded characters in the string (see RFC 2396). Returns\nTrue if all were successfully expanded.
Copy(S: String; Index, Count: Integer)function -> String\nReturns a string containing Count characters starting at S[Index].
CreateCallback(Method: AnyMethod)function -> Longword\nAllows you to perform direct callbacks from DLL functions (like\nWindows API functions) to functions in your script.
CreateComObject(const ClassID: TGUID)function -> IUnknown\nSee the Using COM Automation objects topic.
CreateCustomForm()function -> TSetupForm\nCreates a form. The form is empty by default; you have to create your\nown controls afterward and place them on the form (by setting their\nParent properties to the TSetupForm instance returned by this\nfunction).
CreateCustomPage(const AfterID: Integer; const ACaption, ADescription: String)function -> TWizardPage\nCreates a custom wizard page. The page is empty by default; you have\nto create your own controls afterward and place them on the page (by\nsetting their Parent properties to the Surface property of the\nTWizardPage instance returned by this function).
CreateDir(const Dir: string)function -> Boolean\nCreates a new directory. The return value is True if a new directory\nwas successfully created, or False if an error occurred.
CreateDownloadPage(const ACaption, ADescription: String; const OnDownloadProgress: TOnDownloadProgress)function -> TDownloadWizardPage\nCreates a wizard page to download files and show progress. Set\nOnDownloadProgress to a function to be informed of progress, or nil\notherwise.     Unlike the other types of wizard pages, progress pages\nare not displayed as part of the normal page sequence (note that there\nis no AfterID parameter). A progress page can only be displayed [...]
CreateInputDirPage(const AfterID: Integer; const ACaption, ADescription, ASubCaption: String; AAppendDir: Boolean; ANewFolderName: String)function -> TInputDirWizardPage\nCreates a wizard page that contains edit boxes and Browse buttons for\nselecting directories. If AAppendDir is True, the value of\nANewFolderName will be appended onto any folder name the user clicks.\nIf AAppendDir is False and ANewFolderName is not empty, a Make New\nFolder button will be shown that creates a new folder with the [...]
CreateInputFilePage(const AfterID: Integer; const ACaption, ADescription, ASubCaption: String)function -> TInputFileWizardPage\nCreates a wizard page that contains edit boxes and Browse buttons for\nselecting files.
CreateInputOptionPage(const AfterID: Integer; const ACaption, ADescription, ASubCaption: String; Exclusive, ListBox: Boolean)function -> TInputOptionWizardPage\nCreates a wizard page containing check boxes or radio buttons. If\nExclusive is True, radio buttons are displayed instead of check boxes,\nand only one item in the list may be selected at a time. If ListBox is\nTrue, the check boxes or radio buttons are placed inside a scrollable\nlist box.
CreateInputQueryPage(const AfterID: Integer; const ACaption, ADescription, ASubCaption: String)function -> TInputQueryWizardPage\nCreates a wizard page containing edit boxes.
CreateMutex(const Name: String)procedure\nCreates a mutex with the specified name.
CreateOleObject(const ClassName: string)function -> Variant\nSee the Using COM Automation objects topic.
CreateOutputMarqueeProgressPage(const ACaption, ADescription: String)function -> TOutputMarqueeProgressWizardPage\nCreates a wizard page containing static text as well as a marquee\nprogress bar. See CreateOutputProgressPage for information on how to\nwork with progress pages.
CreateOutputMsgMemoPage(const AfterID: Integer; const ACaption, ADescription, ASubCaption: String; const AMsg: AnsiString)function -> TOutputMsgMemoWizardPage\nCreates a wizard page containing static text as well as a read-only,\nmulti-line edit control, capable of displaying RTF text. The\nASubCaption parameter specifies the static text to display. AMsg\nspecifies the text to assign to the edit control.
CreateOutputMsgPage(const AfterID: Integer; const ACaption, ADescription, AMsg: String)function -> TOutputMsgWizardPage\nCreates a wizard page containing only static text. The AMsg parameter\nspecifies the text to display.
CreateOutputProgressPage(const ACaption, ADescription: String)function -> TOutputProgressWizardPage\nCreates a wizard page containing static text as well as a progress bar\n(which is hidden by default). Unlike the other types of wizard pages,\nprogress pages are not displayed as part of the normal page sequence\n(note that there is no AfterID parameter). A progress page can only be\ndisplayed programmatically by calling its Show method.
CreateShellLink(const Filename, Description, ShortcutTo, Parameters, WorkingDir, IconFilename: String; const IconIndex, ShowCmd: Integer)function -> String\nCreates a shortcut to a file or folder. Returns the resulting filename\nof the link, which may differ from Filename if it ended up creating a\n.pif file instead of a .lnk file. On failure, an exception will be\nraised. Parameters:
CurrentFilename()function -> String\nReturns the destination file name of the [Files] entry that is\ncurrently being processed. The returned name may include constants. Do\nnot attempt to call this function from outside a Check, BeforeInstall\nor AfterInstall event function belonging to a [Files] entry.
CurrentSourceFilename()function -> String\nReturns the source file name of the [Files] entry that is currently\nbeing processed. The returned name may include constants. Do not\nattempt to call this function from outside a Check, BeforeInstall or\nAfterInstall event function belonging to a [Files] entry with the\n"external" flag.
CustomMessage(const MsgName: String)function -> String\nReturns the value of the [CustomMessages] entry with the specified\nname. If an entry with the specified name does not exist, an exception\nwill be raised.
DLLGetLastError()function -> Longint\nReturns value the last error code had right after the most recent DLL\nfunction call you made. Useful after calling Windows API functions (if\nthe function sets the last error code).
DecrementSharedCount(const Is64Bit: Boolean; const Filename: String)function -> Boolean\nDecrements the reference count for the specified file in the following\nregistry key: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVer\nsion\SharedDLLs 64-bit versions of Windows have two separate\nSharedDLLs keys, one for 64-bit files and one for 32-bit files. If\nIs64Bit is True, the 64-bit SharedDLLs key will be updated, [...]
DelTree(const Path: String; const IsDir, DeleteFiles, DeleteSubdirsAlso: Boolean)function -> Boolean\nDeletes the specified directory if IsDir is set to True, or\nfiles/directories matching a wildcard if IsDir is set to False.\nReturns True if it was able to successfully remove everything. If\nDeleteFiles is set to True, files inside the specified directory will\nbe deleted if IsDir is True, or files matching the specified [...]
DelayDeleteFile(const Filename: String; const Tries: Integer)procedure\nAttempts to delete Filename, retrying up to Tries times if the file is\nin use. It delays 250 msec between tries.
Delete(var S: String; Index, Count: Integer)procedure\nRemoves a substring of Count characters from string S starting at\nS[Index].
DeleteFile(const FileName: string)function -> Boolean\nErases the file named by FileName from the disk.
DeleteIniEntry(const Section, Key, Filename: String)procedure\nDeletes the specified key from an INI file.
DeleteIniSection(const Section, Filename: String)procedure\nDeletes the specified section from an INI file.
DirExists(const Name: String)function -> Boolean\nReturns True if the specified directory name exists. The specified\nname may include a trailing backslash.
DownloadTemporaryFile(const Url, FileName, RequiredSHA256OfFile: String; const OnDownloadProgress: TOnDownloadProgress)function -> Int64\nDownloads the file from the specified URL to a temporary directory\nusing the specified name. To find the location of the temporary\ndirectory, use ExpandConstant('{tmp}'). If RequiredSHA256OfFile is set\nit will compare this to the SHA-256 of the downloaded file and raise\nan exception if the hashes don't match. An exception will be [...]
DownloadTemporaryFileSize(const Url)function -> Int64\nReturns the size of the file from the specified URL, without\ndownloading the file. If the server does not provide the file size, -1\nwill be returned. An exception will be raised if there was an error.\nSee DownloadTemporaryFile for other considerations.
EnableFsRedirection(const Enable: Boolean)function -> Boolean\nControls whether built-in support functions that access files disable\nWOW64 file system redirection (with some exceptions). Specify True in\nthe Enable parameter to leave redirection enabled when those functions\nare called; specify False to disable it. Returns the previous\nredirection state (True if redirection was enabled). If False is [...]
Exec(const Filename, Params, WorkingDir: String; const ShowCmd: Integer; const Wait: TExecWait; var ResultCode: Integer)function -> Boolean\nExecutes the specified executable or batch file, using the same\ncredentials as Setup/Uninstall. The Wait parameter specifies whether\nthe function should return immediately or wait until the launched\nprocess has terminated or is idle. Returns True if the specified file\nwas executed successfully, False otherwise. If True is returned [...]
ExecAsOriginalUser(const Filename, Params, WorkingDir: String; const ShowCmd: Integer; const Wait: TExecWait; var ResultCode: Integer)function -> Boolean\nExecutes the specified executable or batch file, using the (normally\nnon-elevated) credentials of the user that started Setup initially.\nSee Exec and the [Run] section flag runasoriginaluser for more\ninformation.
ExitSetupMsgBox()function -> Boolean\nDisplays the "Exit Setup?" message box, and returns True if the user\nselects Yes. Does not terminate Setup or Uninstall.
ExpandConstant(const S: String)function -> String\nChanges all constants in S to their values. For example,\nExpandConstant('{srcexe}') is changed to the filename of Setup. An\nexception will be raised if there was an error expanding the\nconstants.
ExpandConstantEx(const S: String; const CustomConst, CustomValue: String)function -> String\nChanges all constants in S to their values. Additionally, any constant\nequal to CustomConst will be changed to CustomValue. An exception will\nbe raised if there was an error expanding the constants.
ExpandFileName(const FileName: string)function -> String\nReturns a string containing a fully qualified path name for the file\npassed in the FileName. A fully qualified path name includes the drive\nletter and any directory and subdirectories in addition to the file\nname and extension.
ExpandUNCFileName(const FileName: string)function -> String\nReturns a string containing a fully qualified path name for the file\npassed in the FileName. A fully qualified path name includes the drive\nportion of the filename in the UNC format '\\<servername>\<sharename>'\nif the drive letter is mapped to a network resource instead of a local\ndrive and any directory and subdirectories in addition to the [...]
ExtractFileDir(const FileName: string)function -> String\nExtracts the drive and directory parts of the given file name. The\nresulting string is empty if FileName contains no drive and directory\nparts.
ExtractFileDrive(const FileName: string)function -> String\nReturns a string containing the 'drive' portion of a fully qualified\npath name for the file passed in the FileName. For file names with\ndrive letters, the resulting string is in the form '<drive>:'. For\nfile names with a UNC path the resulting string is in the form\n'\\<servername>\<sharename>'. If the given path contains neither [...]
ExtractFileExt(const FileName: string)function -> String\nExtracts the extension part of the given file name. The resulting\nstring includes the period character that separates the name and\nextension parts. The resulting string is empty if the given filename\nhas no extension.
ExtractFileName(const FileName: string)function -> String\nExtracts the name and extension parts of the given file name. The\nresulting string is the rightmost characters of FileName, starting\nwith the first character after the colon or backslash that separates\nthe path information from the name and extension. The resulting string\nis equal to FileName if FileName contains no drive and directory [...]
ExtractFilePath(const FileName: string)function -> String\nExtracts the drive and directory parts of the given file name. The\nresulting string is the leftmost characters of FileName, up to and\nincluding the colon or backslash that separates the path information\nfrom the name and extension. The resulting string is empty if FileName\ncontains no drive and directory parts.
ExtractRelativePath(const BaseName, DestName: String)function -> String\nConverts a fully qualified path name into a relative path name. The\nDestName parameter specifies the file name (including path) to be\nconverted. BaseName is the fully qualified name of the base directory\nto which the returned path name should be relative. BaseName may or\nmay not include a file name, but it must include the final path [...]
ExtractTemporaryFile(const FileName: String)procedure\nExtracts the specified file from the [Files] section to a temporary\ndirectory. To find the location of the temporary directory, use\nExpandConstant('{tmp}'). The extracted files are automatically deleted\nwhen Setup exits. An exception will be raised if the file wasn't\nextracted successfully, if the file wasn't found, or if the file [...]
ExtractTemporaryFiles(const Pattern: String)function -> Integer\nExtracts the files matching the wildcard specified by Pattern from the\n[Files] section to a temporary directory. Returns the number of\nextracted files. To find the location of the temporary directory, use\nExpandConstant('{tmp}'). The extracted files are automatically deleted\nwhen Setup exits. An exception will be raised if no files were [...]
FileCopy(const ExistingFile, NewFile: String; const FailIfExists: Boolean)function -> Boolean\nCopies ExistingFile to NewFile, preserving time stamp and file\nattributes.
FileExists(const Name: String)function -> Boolean\nReturns True if the specified file exists.
FileOrDirExists(const Name: String)function -> Boolean\nReturns True if the specified directory or file name exists. The\nspecified name may include a trailing backslash.
FileSearch(const Name, DirList: string)function -> String\nSearches through the directories passed in DirList for a file named\nName. DirList should be directory names separated by semicolons. If\nFileSearch locates a file matching Name, it returns a string\ncontaining a fully-qualified path name for that file. If no matching\nfile exists, FileSearch returns an empty string.
FileSize(const Name: String; var Size: Integer)function -> Boolean\nSets Size to the size of the specified file in bytes. Returns True if\nthe file size was set successfully and False otherwise. Only supports\nfile sizes smaller than 2 GB. To get all 64 bits of the file size, use\nFileSize64 instead.
FileSize64(const Name: String; var Size: Int64)function -> Boolean\nSets Size to the size of the specified file in bytes. Returns True if\nthe file size was set successfully and False otherwise.
FindClose(var FindRec: TFindRec)procedure\nEnds a find sequence, and frees the resources associated with it. You\nshould always call this when FindFirst returns True.
FindFirst(const FileName: String; var FindRec: TFindRec)function -> Boolean\nRetrieves information about the first file matching the wildcard\nspecified by FileName. Returns True if successful. TFindRec is defined\nas:
FindNext(var FindRec: TFindRec)function -> Boolean\nRetrieves information about the next matching file after a call to\nFindFirst. Returns True if successful.
FindWindowByClassName(const ClassName: String)function -> HWND\nRetrieves a handle to the top-level window whose class name matches\nthe specified string. This function does not search child windows, and\ndoes not perform a case-sensitive search. Returns 0 if no window is\nfound.
FindWindowByWindowName(const WindowName: String)function -> HWND\nRetrieves a handle to the top-level window whose window name matches\nthe specified string. This function does not search child windows, and\ndoes not perform a case-sensitive search. Returns 0 if no window is\nfound.
FloatToStr(e: extended)function -> String\nThe FloatToStr function converts a floating point number into a\nstring.The character used for the decimal point will always be a dot.
FmtMessage(const S: String; const Args: array of String)function -> String\nFormats the string S using the specified string arguments. A %1 in the\nformat string will be replaced with the first value in the Args array;\na %2 will be replaced with the second value; and so on. %% will be\nreplaced with %.
FontExists(const FaceName: String)function -> Boolean\nReturns True if a font with the specified face name is installed on\nthe system.
ForceDirectories(Dir: string)function -> Boolean\nCreates all the directories along the specified directory path all at\nonce. If the first directories in the path do exist, but the latter\nones don't, ForceDirectories creates just the ones that don't exist.\nReturns True if successful, False otherwise.
Format(const Format: string; const Args: array of const)function -> string\nFormats the series of arguments in the open array Args. Formatting is\ncontrolled by the format string Format; the results are returned as a\nstring. An exception will be raised if an invalid format string is\nspecified, too few arguments are passed, or if any arguments are of\nthe wrong type.
FreeDLL(const DLLHandle: Longint)function -> Boolean\nUnloads a DLL specified using the DLL handle returned by LoadDLL.
GenerateUniqueName(Path: String; const Extension: String)function -> String\nGenerates a unique filename for a file in the specified path with the\nspecified extension.
Get8087CW()function -> Word\nReturns the current value of the FPU control word.
GetActiveOleObject(const ClassName: string)function -> Variant\nSee the Using COM Automation objects topic.
GetArrayLength(var Arr: Array)function -> Longint\nGets the length of an array.
GetCmdTail()function -> String\nReturns all command line parameters passed to Setup or Uninstall as a\nsingle string, including undocumented internal parameters used by\nSetup and Uninstall.
GetComputerNameString()function -> String\nRetrieves the name of the computer the Setup or Uninstall program is\nrunning on (as returned by the Windows GetComputerName function).
GetCurrentDir()function -> String\nReturns a string containing the name of the current directory.
GetDateTimeString(const DateTimeFormat: String; const DateSeparator, TimeSeparator: Char)function -> String\nReturns the current date and time as a string using the specified\nformatting. The following format specifiers are supported:
GetEnv(const EnvVar: String)function -> String\nGets the value of the specified environment variable.
GetExceptionMessage()function -> String\nReturns the message associated with the current exception. This\nfunction should only be called from within an except section, or a\nfunction called from an except section.
GetIniInt(const Section, Key: String; const Default, Min, Max: Longint; const Filename: String)function -> Longint\nReads a Longint from an INI file. If the Longint read is not between\nMin/Max then it returns Default. If Min=Max then Min/Max are ignored.
GetIniString(const Section, Key, Default, Filename: String)function -> String\nReads a String from an INI file.
GetMD5OfFile(const Filename: String)function -> String\nGets the MD5 sum of the specified file, as a string. An exception will\nbe raised upon failure.
GetMD5OfString(const S: AnsiString)function -> String\nGets the MD5 sum of the specified string, as a string.
GetMD5OfUnicodeString(const S: String)function -> String\nGets the MD5 sum of the specified string, as a string.
GetMainForm()function -> TMainForm\nReturns the MainForm support object, or raises an internal error if\nthe object has not yet been created.
GetOpenFileName(const Prompt: String; var FileName: String; const InitialDirectory, Filter, DefaultExtension: String)function -> Boolean\nDisplays a dialog box that enables the user to select an existing\nfile. Returns True if the user selected a file, False otherwise. The\nname of the selected file is returned in the FileName string.
GetOpenFileNameMulti(const Prompt: String; var FileNameList: TStrings; const InitialDirectory, Filter, DefaultExtension: String)function -> Boolean\nDisplays a dialog box that enables the user to select one or more\nexisting file(s). Returns True if the user selected a file, False\notherwise. The name of the selected file(s) is returned in the\nFileNameList list.
GetPackedVersion(const Filename: String; var Version: Int64)function -> Boolean\nGets the packed version of the specified file. Returns True if\nsuccessful, False otherwise. Always use ComparePackedVersion or\nSamePackedVersion to compare packed versions.
GetPreviousData(const ValueName, DefaultValueData: String)function -> String\nGets a value that was previously stored using SetPreviousData.
GetSHA1OfFile(const Filename: String)function -> String\nGets the SHA-1 hash of the specified file, as a string. An exception\nwill be raised upon failure.
GetSHA1OfString(const S: AnsiString)function -> String\nGets the SHA-1 hash of the specified string, as a string.
GetSHA1OfUnicodeString(const S: String)function -> String\nGets the SHA-1 hash of the specified string, as a string.
GetSHA256OfFile(const Filename: String)function -> String\nGets the SHA-256 hash of the specified file, as a string. An exception\nwill be raised upon failure.
GetSHA256OfString(const S: AnsiString)function -> String\nGets the SHA-256 hash of the specified string, as a string.
GetSHA256OfUnicodeString(const S: String)function -> String\nGets the SHA-256 hash of the specified string, as a string.
GetSaveFileName(const Prompt: String; var FileName: String; const InitialDirectory, Filter, DefaultExtension: String)function -> Boolean\nDisplays a dialog box that enables the user to select a new file.\nReturns True if the user selected a file, False otherwise. The name of\nthe selected file is returned in the FileName string.
GetShellFolderByCSIDL(const Folder: Integer; const Create: Boolean)function -> String\nGets the path of the specified shell folder. Folder specifies the\nvalue of a CSIDL constant (a complete list of which can be found in\nShlObj.h). If Create is True, the folder will be created if it does\nnot exist. On failure, an empty string is returned.
GetShortName(const LongName: String)function -> String\nReturns the short version of the specified long filename. If the short\nversion of the long filename is not found, the long filename is\nreturned.
GetSpaceOnDisk(const Path: String; const InMegabytes: Boolean; var Free, Total: Cardinal)function -> Boolean\nReturns the number of free and total bytes or megabytes on a drive.\nPath specifies a directory on the drive or UNC share to check; it can\nbe either the root (e.g. C:\) or an existing subdirectory. The setting\nof the InMegabytes parameter determines whether it returns figures in\nbytes or in megabytes (2^20), rounded down. Returns True if [...]
GetSpaceOnDisk64(const Path: String; var Free, Total: Int64)function -> Boolean\nReturns the number of free and total bytes on a drive. Path specifies\na directory on the drive or UNC share to check; it can be either the\nroot (e.g. C:\) or an existing subdirectory. Returns True if\nsuccessful, False otherwise.
GetSysWow64Dir()function -> String\n64-bit Windows only: returns fully qualified path of the SysWOW64\ndirectory. This is the actual directory in which 32-bit system files\nreside. An empty string is returned if this function is called on\n32-bit Windows, or if for some reason it fails to retrieve the path on\n64-bit Windows (unlikely).
GetSystemDir()function -> String\nReturns fully qualified path of the Windows System directory. Only\nincludes a trailing backslash if the Windows System directory is the\nroot directory.
GetTempDir()function -> String\nReturns fully qualified path of the temporary directory, with trailing\nbackslash. This does not use the Win32 function GetTempPath, due to\nplatform differences.
GetUILanguage()function -> Integer\nReturns the language identifier (LANGID) of the current user's UI\nlanguage, which is either the language of Windows itself, or in the\ncase of a MUI edition of Windows, the user interface language chosen\nin Control Panel's Regional Options. Returns 0 if the function fails\n(unlikely).
GetUninstallProgressForm()function -> TUninstallProgressForm\nReturns the UninstallProgressForm support object, or raises an\ninternal error if the object has not yet been created.
GetUserNameString()function -> String\nRetrieves the name of the user currently logged onto the system.
GetVersionComponents(const Filename: String; var Major, Minor, Revision, Build: Word)function -> Boolean\nGets the individual version components of the specified file. Returns\nTrue if successful, False otherwise.
GetVersionNumbers(const Filename: String; var VersionMS, VersionLS: Cardinal)function -> Boolean\nGets the version numbers of the specified file. Returns True if\nsuccessful, False otherwise.
GetVersionNumbersString(const Filename: String; var Version: String)function -> Boolean\nGets the version of the specified file as a string (in "0.0.0.0"\nformat). Returns True if successful, False otherwise.
GetWinDir()function -> String\nReturns fully qualified path of the Windows directory. Only includes a\ntrailing backslash if the Windows directory is the root directory.
GetWindowsVersion()function -> Cardinal\nReturns the version number of Windows packed into a single integer.\nThe upper 8 bits specify the major version; the following 8 bits\nspecify the minor version; the lower 16 bits specify the build number.\nFor example, this function will return $0A002800 on Windows 10 Version\n1507, which is version 10.0.10240. To retrieve just the major [...]
GetWindowsVersionEx(var Version: TWindowsVersion)procedure\nReturns extended information about the version of Windows in a record.\nTWindowsVersion is defined as:
GetWindowsVersionString()function -> String\nReturns the version number of Windows in string form. On Windows 2000,\nfor example, this function will return "5.00.2195".
GetWizardForm()function -> TWizardForm\nReturns the WizardForm support object, or raises an internal error if\nthe object has not yet been created.
IDispatchInvoke(Self: IDispatch; PropertySet: Boolean; const Name: String; Par: array of Variant)function -> Variant\nUse IDispatchInvoke to access a COM Automation property or method\nwhose name is a reserved word.
IncrementSharedCount(const Is64Bit: Boolean; const Filename: String; const AlreadyExisted: Boolean)procedure\nIncrements or initializes the reference count for the specified file\nin the following registry key: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\W\nindows\CurrentVersion\SharedDLLs 64-bit versions of Windows have two\nseparate SharedDLLs keys, one for 64-bit files and one for 32-bit\nfiles. If Is64Bit is True, the 64-bit SharedDLLs key will be [...]
IniKeyExists(const Section, Key, Filename: String)function -> Boolean\nReturns True if the specified INI key exists.
InitializeBitmapImageFromIcon(const BitmapImage: TBitmapImage; const IconFilename: String; const BkColor: TColor; const AscendingTrySizes: TArrayOfInteger)function -> Boolean\nInitializes the given bitmap image with an icon from the given icon\nfile using the given background color for transparent parts. The\nbitmap image should be scaled already and the function will load the\nlargest fitting icon which has a size from the given array of sizes.\nAfter loading the function will set the size of the bitmap image [...]
Insert(Source: String; var Dest: String; Index: Integer)procedure\nMerges Source into Dest at the position Dest[Index].
InstallOnThisVersion(const MinVersion, OnlyBelowVersion: String)function -> Boolean\nThis function is deprecated. Returns True if an entry with the\nspecified MinVersion and OnlyBelowVersion parameters should be\ninstalled. If an invalid version string is passed, an exception will\nbe raised. This function is provided for backward compatibility only,\nand may be removed in a future release. New scripts should use [...]
IntToStr(i: Int64)function -> String\nThe IntToStr function converts a 64-bit number into a string.
Is64BitInstallMode()function -> Boolean\nReturns True if Setup or Uninstall is running in 64-bit install mode,\nor False if it is running in 32-bit install mode.
IsARM64()function -> Boolean\nReturns True if the native processor architecture is arm64. This\nfunction is a shorthand for ProcessorArchitecture. Be sure to read the\nProcessorArchitecture topic before using this function.
IsAdmin()function -> Boolean\nReturns True if Setup/Uninstall is running with administrative\nprivileges.
IsAdminInstallMode()function -> Boolean\nReturns True if Setup is running in administrative install mode or if\nUninstall is running with administrative privileges.
IsDotNetInstalled(const MinVersion: TDotNetVersion; const MinServicePack: Cardinal)function -> Boolean\nReturns True if the .NET Framework with the specified MinVersion and\nMinServicePack parameters is installed. TDotNetVersion is defined as:\nTDotNetVersion = (net11, net20, net30, net35, net4Client, net4Full,\nnet45, net451, net452, net46, net461, net462, net47, net471, net472,\nnet48);
IsIA64()function -> Boolean\nReturns True if the native processor architecture is ia64. This\nfunction is a shorthand for ProcessorArchitecture. Be sure to read the\nProcessorArchitecture topic before using this function.
IsIniSectionEmpty(const Section, Filename: String)function -> Boolean\nReturns True if the specified INI section is empty.
IsMsiProductInstalled(const UpgradeCode: String; const PackedMinVersion: Int64)function -> Boolean\nReturns True if a MSI product with the specified UpgradeCode and\nPackedMinVersion is installed. If there are multiple products\ninstalled with the specified UpgradeCode only the version of the first\nproduct returned by the system is checked. An exception will be raised\nif an error occurs.
IsProtectedSystemFile(const Filename: String)function -> Boolean\nReturns True if the specified file is protected by Windows File\nProtection (and therefore can't be replaced).
IsUninstaller()function -> Boolean\nReturns True if Uninstall is running as opposed to Setup, False\notherwise.
IsWildcard(const Pattern: String)function -> Boolean\nReturns True if the specified pattern contains a wildcard.
IsWin64()function -> Boolean\nReturns True if the system is running a 64-bit version of Windows. If\nFalse is returned, you cannot utilize any of Inno Setup's 64-bit-only\nfeatures. Do not use this function to detect 64-bit install mode, use\nIs64BitInstallMode instead.
IsX64()function -> Boolean\nReturns True if the native processor architecture is x64. This\nfunction is a shorthand for ProcessorArchitecture. Be sure to read the\nProcessorArchitecture topic before using this function.
IsX86()function -> Boolean\nReturns True if the native processor architecture is x86. This\nfunction is a shorthand for ProcessorArchitecture. Be sure to read the\nProcessorArchitecture topic before using this function.
Length(s: String)function -> Longint\nReturns the length of the specified string.
LoadDLL(const DLLName: String; var ErrorCode: Integer)function -> Longint\nLoads the specified DLL. Returns the DLL handle if the DLL was loaded\nsuccessfully, zero otherwise. If zero is returned then ErrorCode\nspecifies the error that occurred. Use SysErrorMessage(ErrorCode) to\nget a description of the error.
LoadStringFromFile(const FileName: String; var S: AnsiString)function -> Boolean\nLoads the specified binary or non Unicode text file into the specified\nstring. Returns True if successful, False otherwise.
LoadStringsFromFile(const FileName: String; var S: TArrayOfString)function -> Boolean\nLoads the specified text file into the specified string array. Returns\nTrue if successful, False otherwise.
Log(const S: String)procedure\nLogs the specified string in Setup's log file.
Lowercase(S: String)function -> String\nReturns a copy of the string S, but with all 7-bit ASCII characters\nbetween 'A' and 'Z' converted to lowercase. To convert 8-bit\ninternational characters, use AnsiLowercase instead.
MakePendingFileRenameOperationsChecksum()procedure -> String\nCalculates a checksum of the current PendingFileRenameOperations\nregistry value. The caller can use this checksum to determine if\nPendingFileRenameOperations or WININIT.INI was changed (perhaps by\nanother program).
MinimizePathName(const Filename: String; const Font: TFont; MaxLen: Integer)function -> String\nReturns a minimized filename that will not take more than MaxLen\npixels to display with the given font. The minimizing is done by\nreplacing the middle part with '...' as needed.
ModifyPifFile(const Filename: String; const CloseOnExit: Boolean)function -> Boolean\nChanges the "Close on exit" setting of a .pif file. Returns True if it\nwas able to make the change.
MsgBox(const Text: String; const Typ: TMsgBoxType; const Buttons: Integer)function -> Integer\nDisplays a message box. Text specifies the message to display. Typ\nspecifies which icon to display in the message box. Buttons specifies\nwhich buttons to include in the message box. Returns an ID* constant\nindicating the button the user clicked, or 0 if the function fails\n(which shouldn't happen unless an invalid parameter is specified [...]
Null()function -> Variant\nReturns a variant with a value of Null.
OemToCharBuff(var S: AnsiString)procedure\nTranslates a string with characters from the OEM-defined character set\ninto an ANSI string.
OleCheck(Result: HResult)procedure\nUse OleCheck to wrap any IUnknown based COM methods you call, so that\nif that method fails, an exception will be raised.
Ord(C: Char)function -> Byte\nReturns the ordinal value of the specified character.
PackVersionComponents(const Major, Minor, Revision, Build: Word)function -> Int64\nPacks individual version components into a single value. Always use\nComparePackedVersion or SamePackedVersion to compare packed versions.
PackVersionNumbers(const VersionMS, VersionLS: Cardinal)function -> Int64\nPacks version numbers into a single value. Always use\nComparePackedVersion or SamePackedVersion to compare packed versions.
PageFromID(const ID: Integer)function -> TWizardPage\nGiven a page ID, returns a TWizardPage instance. Call this if, for\nexample, you need to get at the surface of a page and only know its\nID. An exception will be raised if an invalid page ID is specified.
PageIndexFromID(const ID: Integer)function -> Integer\nGiven a page ID, returns an position index. Call this if, for example,\nyou want to check whether a page is positioned before a certain other\npage.
ParamCount()function -> Integer\nReturns the number of command line parameters passed to Setup or\nUninstall, excluding undocumented internal parameters used by Setup\nand Uninstall.
ParamStr(Index: Integer)function -> String\nReturns the Index-th command line parameter passed to Setup or\nUninstall, excluding undocumented internal parameters used by Setup\nand Uninstall. Parameter number zero is the full file name with which\nSetup or Uninstall was started. If Index is invalid, ParamStr returns\nan empty string.
Pos(SubStr, S: String)function -> Integer\nSearches for Substr within S and returns an integer value that is the\nindex of the first character of Substr within S.
PostBroadcastMessage(const Msg, WParam, LParam: Longint)function -> Boolean\nPosts the specified message to top-level windows in the system,\nreturning immediately.
PostMessage(const Wnd: HWND; const Msg, WParam, LParam: Longint)function -> Boolean\nPosts the specified message to the specified window, returning\nimmediately. Returns True if successful.
ProcessorArchitecture()function -> TSetupProcessorArchitecture\nReturns the native processor architecture of the current system.\nTSetupProcessorArchitecture is defined as: TSetupProcessorArchitecture\n= (paUnknown, paX86, paX64, paIA64, paARM64);
RaiseException(const Msg: String)procedure\nRaises an exception with the specified message.
Random(const Range: Integer)function -> Integer\nReturns a random number within the range 0 <= X < Range.
RegDeleteKeyIfEmpty(const RootKey: Integer; const SubkeyName: String)function -> Boolean\nDeletes the specified subkey if it has no subkeys or values. Returns\nTrue if successful, False otherwise.
RegDeleteKeyIncludingSubkeys(const RootKey: Integer; const SubkeyName: String)function -> Boolean\nDeletes the specified key and all subkeys. Returns True if successful,\nFalse otherwise.
RegDeleteValue(const RootKey: Integer; const SubKeyName, ValueName: String)function -> Boolean\nDeletes the specified value. Returns True if successful, False\notherwise.
RegGetSubkeyNames(const RootKey: Integer; const SubKeyName: String; var Names: TArrayOfString)function -> Boolean\nOpens the specified registry key and reads the names of its subkeys\ninto the specified string array Names. Returns True if successful,\nFalse otherwise.
RegGetValueNames(const RootKey: Integer; const SubKeyName: String; var Names: TArrayOfString)function -> Boolean\nOpens the specified registry key and reads the names of its values\ninto the specified string array Names. Returns True if successful,\nFalse otherwise.
RegKeyExists(const RootKey: Integer; const SubKeyName: String)function -> Boolean\nReturns True if the specified registry key exists.
RegQueryBinaryValue(const RootKey: Integer; const SubKeyName, ValueName: String; var ResultStr: AnsiString)function -> Boolean\nQueries the specified registry value, and returns the data in\nResultStr. Returns True if successful. When False is returned,\nResultStr is unmodified.
RegQueryDWordValue(const RootKey: Integer; const SubKeyName, ValueName: String; var ResultDWord: Cardinal)function -> Boolean\nQueries the specified REG_DWORD-type registry value, and returns the\ndata in ResultDWord. Returns True if successful. When False is\nreturned, ResultDWord is unmodified.
RegQueryMultiStringValue(const RootKey: Integer; const SubKeyName, ValueName: String; var ResultStr: String)function -> Boolean\nQueries the specified REG_MULTI_SZ-type registry value, and returns\nthe data in ResultStr. Returns True if successful. When False is\nreturned, ResultStr is unmodified.
RegQueryStringValue(const RootKey: Integer; const SubKeyName, ValueName: String; var ResultStr: String)function -> Boolean\nQueries the specified REG_SZ- or REG_EXPAND_SZ-type value, and returns\nthe data in ResultStr. Returns True if successful. When False is\nreturned, ResultStr is unmodified.
RegValueExists(const RootKey: Integer; const SubKeyName, ValueName: String)function -> Boolean\nReturns True if the specified registry key and value exist.
RegWriteBinaryValue(const RootKey: Integer; const SubKeyName, ValueName: String; const Data: AnsiString)function -> Boolean\nWrites the specified REG_BINARY-type registry value. Returns True if\nsuccessful, False otherwise.
RegWriteDWordValue(const RootKey: Integer; const SubKeyName, ValueName: String; const Data: Cardinal)function -> Boolean\nWrites the specified REG_DWORD-type registry value. Returns True if\nsuccessful, False otherwise.
RegWriteExpandStringValue(const RootKey: Integer; const SubKeyName, ValueName, Data: String)function -> Boolean\nWrites the specified REG_EXPAND_SZ-type registry value. Returns True\nif successful, False otherwise.
RegWriteMultiStringValue(const RootKey: Integer; const SubKeyName, ValueName, Data: String)function -> Boolean\nWrites the specified REG_MULTI_SZ-type registry value. Returns True if\nsuccessful, False otherwise.
RegWriteStringValue(const RootKey: Integer; const SubKeyName, ValueName, Data: String)function -> Boolean\nWrites the specified REG_SZ-type registry value. Returns True if\nsuccessful, False otherwise.
RegisterExtraCloseApplicationsResource(const DisableFsRedir: Boolean; const AFilename: String)function -> Boolean\nRegister an extra file which Setup should check for being in-use. Call\nRegisterExtraCloseApplicationsResource inside a\nRegisterExtraCloseApplicationsResources event function, once per file.\nIgnores CloseApplicationsFilter. Returns True if successful.
RegisterServer(const Is64Bit: Boolean; const Filename: String; const FailCriticalErrors: Boolean)procedure\nRegisters the DLL/OCX with the specified filename. If Is64Bit is True,\nthe DLL/OCX will be loaded as a 64-bit image and registered in a\n64-bit process. If FailCriticalErrors is True, the system will not\ndisplay any critical-error-handler message boxes. Raises an exception\nif not successful.
RegisterTypeLibrary(const Is64Bit: Boolean; const Filename: String)procedure\nRegisters the type library with the specified filename. If Is64Bit is\nTrue, the type library will be registered in a 64-bit process. Raises\nan exception if not successful.
RegisterWindowMessage(const Name: String)function -> Longint\nThe RegisterWindowMessage function defines a new window message that\nis guaranteed to be unique throughout the system. The returned message\nvalue can be used when calling the SendBroadcastMessage or\nPostBroadcastMessage function.
RemoveBackslash(const S: String)function -> String\nReturns the specified string with any trailing slashes/backslashes\nremoved.
RemoveBackslashUnlessRoot(const S: String)function -> String\nReturns the specified string with any trailing slashes/backslashes\nremoved, unless the string specifies the root directory of a drive\n(e.g. "C:\" or "\"), in which case it leaves 1 slash.
RemoveDir(const Dir: string)function -> Boolean\nDeletes an existing empty directory. The return value is True if the\nempty directory was successfully deleted, or False if an error\noccurred.
RemoveQuotes(const S: String)function -> String\nOpposite of AddQuotes; removes any quotes around the string.
RenameFile(const OldName, NewName: string)function -> Boolean\nAttempts to change the name of the file or directory specified by\nOldFile to NewFile. If the operation succeeds, RenameFile returns\nTrue. If it cannot rename the file (for example, if a file called\nNewName already exists), it returns False.
RestartReplace(const TempFile, DestFile: String)procedure\nRenames TempFile to DestFile the next time Windows is started. If\nDestFile already existed, it will be overwritten. If DestFile is ''\nthen TempFile will be deleted. An exception will be raised upon\nfailure.
RmSessionStarted()function -> Boolean\nReturns True if a Restart Manager session was started, False\notherwise.
SamePackedVersion(const Version1, Version2: Int64)function -> Boolean\nCompares the packed versions Version1 and Version2 and returns True if\nthey are equal.
SameStr(const S1, S2: string)function -> Boolan\nCompares S1 to S2, with case-sensitivity. The return value is True if\nthey are equal.
SameText(const S1, S2: string)function -> Boolean\nCompares the strings S1 and S2 and returns True if they are equal. The\nSameText function is not case-sensitive.
SaveStringToFile(const FileName: String; const S: AnsiString; const Append: Boolean)function -> Boolean\nSaves the specified string to the specified file. If Append is True\nand the specified file already exists, it will be appended to instead\nof overwritten. Returns True if successful, False otherwise.
SaveStringsToFile(const FileName: String; const S: TArrayOfString; const Append: Boolean)function -> Boolean\nSaves the specified string array to the specified file with ASCII\nencoding. If Append is True and the specified file already exists, it\nwill be appended to instead of overwritten. Returns True if\nsuccessful, False otherwise.
SaveStringsToUTF8File(const FileName: String; const S: TArrayOfString; const Append: Boolean)function -> Boolean\nSaves the specified string array to the specified file with UTF8\nencoding. If Append is True and the specified file already exists, it\nwill be appended to instead of overwritten. Returns True if\nsuccessful, False otherwise.
ScaleX(X: Integer)function -> Integer\nTakes an X coordinate or width and returns it scaled to fit the size\nof the current dialog font. If the dialog font is 8-point MS Sans\nSerif and the user is running Windows in Small Fonts (96 dpi), then X\nis returned unchanged.
ScaleY(Y: Integer)function -> Integer\nTakes a Y coordinate or height and returns it scaled to fit the size\nof the current dialog font. If the dialog font is 8-point MS Sans\nSerif and the user is running Windows in Small Fonts (96 dpi), then Y\nis returned unchanged.
SelectDisk(const DiskNumber: Integer; const AFilename: String; var Path: String)function -> Boolean\nDisplays the "Setup Needs the Next Disk" message box, and returns True\nif the user enters a path containing the file specified by AFileName\nand selects OK. The selected path is returned in the Path string. The\ncurrent value of Path is used as the initially selected path and\nDiskNumber is used only as information to the user.
SendBroadcastMessage(const Msg, WParam, LParam: Longint)function -> Longint\nSends the specified message to top-level windows in the system. Does\nnot return until all window procedure have processed the message.
SendBroadcastNotifyMessage(const Msg, WParam, LParam: Longint)function -> Boolean
SendMessage(const Wnd: HWND; const Msg, WParam, LParam: Longint)function -> Longint\nSends the specified message to the specified window. Does not return\nuntil the window procedure has processed the message.
SendNotifyMessage(const Wnd: HWND; const Msg, WParam, LParam: Longint)function -> Boolean\nSends the specified message to the specified window without waiting\nfor the message to be processed by the destination window procedure.\nReturns True if successful.
Set8087CW(NewCW: Word)procedure\nSets the FPU control word.
SetArrayLength(var Arr: Array; I: Longint)procedure\nSets the length of an array. Always call SetArrayLength before\naccessing the elements in an array.
SetCurrentDir(const Dir: string)function -> Boolean\nSets the current directory. The return value is True if the current\ndirectory was successfully changed, or False if an error occurred.
SetIniBool(const Section, Key: String; const Value: Boolean; const Filename: String)function -> Boolean\nWrites a Boolean to an INI file.
SetIniInt(const Section, Key: String; const Value: Longint; const Filename: String)function -> Boolean\nWrites a Longint to an INI file.
SetIniString(const Section, Key, Value, Filename: String)function -> Boolean\nWrites a string to an INI file.
SetLength(var S: String; L: Longint)procedure\nSets the length of a string.
SetNTFSCompression(const FileOrDir: String; Compress: Boolean)function -> Boolean\nChanges the NTFS compression state of a file or directory. Returns\nTrue if successful.
SetPreviousData(const PreviousDataKey: Integer; const ValueName, ValueData: String)function -> Boolean\nSets a value that can be restored later using GetPreviousData. Call\nSetPreviousData inside a RegisterPreviousData event function, once per\nsetting.
SetupMessage(const ID: TSetupMessageID)function -> String\nReturns the value of the specified message.
ShellExec(const Verb, Filename, Params, WorkingDir: String; const ShowCmd: Integer; const Wait: TExecWait; var ErrorCode: Integer)function -> Boolean\nOpens the specified file or performs another action specified by Verb,\nusing the same credentials as Setup/Uninstall. The filename can be an\nexecutable file, a document file, a folder, or a URL. Verb may be an\nempty string, in which case the default verb for the file type is used\n(usually "open"). The Wait parameter specifies whether the [...]
ShellExecAsOriginalUser(const Verb, Filename, Params, WorkingDir: String; const ShowCmd: Integer; const Wait: TExecWait; var ErrorCode: Integer)function -> Boolean\nOpens the specified file or performs another action specified by Verb,\nusing the (normally non-elevated) credentials of the user that started\nSetup initially. See ShellExec and the [Run] section flag\nrunasoriginaluser for more information.
ShowExceptionMessage()procedure\nShows the message associated with the current exception in a message\nbox. This function should only be called from within an except\nsection, or a function called from an except section.
Sleep(const Milliseconds: LongInt)procedure\nSuspends the execution of Setup or Uninstall for a specified interval.
StrToFloat(s: string)function -> Extended\nThe StrToFloat function converts the string passed in S into a\nfloating point number. The character used for the decimal point should\nalways be a dot.
StrToInt(s: string)function -> Longint\nThe StrToInt function converts the string passed in S into a number.
StrToInt64(s: string)function -> Int64\nThe StrToInt64 function converts the string passed in S into a 64-bit\nnumber.
StrToInt64Def(s: string; def: Int64)function -> Int64\nThe StrToInt64Def function converts the string passed in S into a\n64-bit number. If S does not represent a valid 64-bit number, StrToInt\nreturns the 64-bit number passed in Def.
StrToIntDef(s: string; def: Longint)function -> Longint\nThe StrToInt function converts the string passed in S into a number.\nIf S does not represent a valid number, StrToInt returns the number\npassed in Def.
StrToVersion(const Version: String; var Version: Int64)function -> Boolean\nReturns the specified string (in "0.0.0.0" format) as a packed\nversion. Returns True if successful, False otherwise.
StringChange(var S: String; const FromStr, ToStr: String)function -> Integer\nThis function is deprecated. It is equivalent to calling\nStringChangeEx with the SupportMBCS parameter set to False.
StringChangeEx(var S: String; const FromStr, ToStr: String; const SupportDBCS: Boolean)function -> Integer\nChanges all occurrences in S of FromStr to ToStr. If SupportDBCS is\nTrue (recommended unless you require binary safety), double-byte\ncharacter sequences in S are recognized and handled properly.\nOtherwise, the function behaves in a binary-safe manner. Returns the\nnumber of times FromStr was matched and changed.
StringOfChar(c: Char; I : Longint)function -> String\nReturns a string of length I with all characters set to character C.
StringToGUID(const S: String)function -> TGUID\nStringToGUID converts the string representation of a GUID into a\n'real' GUID. An exception will be raised upon failure.
SuppressibleMsgBox(const Text: String; const Typ: TMsgBoxType; const Buttons, Default: Integer)function -> Integer\nDisplays a suppressible message box. If message boxes are being\nsuppressed (see Setup Command Line Parameters), Default is returned.\nOtherwise, SuppressibleMsgBox acts the same as the regular MsgBox.
SuppressibleTaskDialogMsgBox(const Instruction, Text: String; const Typ: TMsgBoxType; const Buttons: Cardinal; const ButtonLabels: TArrayOfString; const ShieldButton: Integer; const Default: Integer)function -> Integer\nDisplays a suppressible message box using a task dialog. If message\nboxes are being suppressed (see Setup Command Line Parameters),\nDefault is returned. Otherwise, SuppressibleTaskDialogMsgBox acts the\nsame as the regular TaskDialogMsgBox.
SysErrorMessage(ErrorCode: Integer)function -> String\nReturns a localized error message string that corresponds to the given\noperating system error code.
TaskDialogMsgBox(const Instruction, Text: String; const Typ: TMsgBoxType; const Buttons: Cardinal; const ButtonLabels: TArrayOfString; const ShieldButton: Integer)function -> Integer\nDisplays a message box using a task dialog:
Terminated()function -> Boolean\nReturns True if Setup or Uninstall is terminating, False otherwise.
Trim(const S: string)function -> String\nTrims leading and trailing spaces and control characters from the\ngiven string S.
TrimLeft(const S: string)function -> String\nTrims leading spaces and control characters from the given string S.
TrimRight(const S: string)function -> String\nTrims trailing spaces and control characters from the given string S.
Unassigned()function -> Variant\nReturns a variant with no value assigned.
UninstallSilent()function -> Boolean\nReturns True if Uninstall is running silently, False otherwise.
UnloadDLL(Filename: String)procedure\nUnloads the specified DLL that was loaded by the [Code] section using\nan "external" keyword. This can be useful if you need to delete the\nDLL. The case of the filename and any path name must exactly match\nthat of the function import. You will need to expand any constants in\nthe filename yourself before passing it to UnloadDLL. If the [...]
UnpackVersionComponents(const Version: Int64; var Major, Minor, Revision, Build: Word)procedure\nUnpacks a packed version into individual version components.
UnpackVersionNumbers(const Version: Int64; var VersionMS, VersionLS: Cardinal)procedure\nUnpacks a packed version into version numbers.
UnpinShellLink(const Filename: String)function -> Boolean\nAttempt to unpin the shortcut with the specified filename. Returns\nTrue if the shortcut was successfully removed from the list of pinned\nitems and/or the taskbar, or if the shortcut was not pinned at all.
UnregisterFont(const FontName, FontFilename: String; const PerUserFont: Boolean)procedure\nUnregisters the font with the specified face and filename.
UnregisterServer(const Is64Bit: Boolean; const Filename: String; const FailCriticalErrors: Boolean)function -> Boolean\nUnregisters the DLL/OCX with the specified filename. If Is64Bit is\nTrue, the DLL/OCX will be loaded as a 64-bit image and unregistered in\na 64-bit process. If FailCriticalErrors is True, the system will not\ndisplay any critical-error-handler message boxes. Returns True if\nsuccessful, False otherwise.
Uppercase(S: String)function -> String\nReturns a copy of the string S, but with all 7-bit ASCII characters\nbetween 'a' and 'z' converted to uppercase. To convert 8-bit\ninternational characters, use AnsiUppercase instead.
VarIsClear(const V: Variant)function -> Boolean\nReturns True if the specified variant's value is undefined.
VarIsEmpty(const V: Variant)function -> Boolean\nReturns True if the specified variant is unassigned.
VarIsNull(const V: Variant)function -> Boolean\nReturns True if the specified variant has a value of Null assigned.
VarType(const V: Variant)function -> TVarType\nReturns the type code of the specified variant. The lower twelve bits\nof a variant type code (the bits defined by the varTypeMask bit mask)\ndefine the type of the variant. The varArray bit is set if the variant\nis an array of the given type. The varByRef bit is set if the variant\nis a reference to a value of the given type as opposed to an [...]
VersionToStr(const Version: Int64)function -> String\nReturns the specified packed version as a string (in "0.0.0.0"\nformat).
WildcardMatch(const Text, Pattern: String)function -> Boolean\nReturns True if the specified text matches the specified pattern.
WizardDirValue()function -> String\nReturns the current contents of the edit control on the Select\nDestination Location page of the wizard. Unlike\nExpandConstant('{app}'), this function will not fail if called after\nthe wizard is shown but prior to the user selecting a directory.\nRather, it will return the default directory name.
WizardGroupValue()function -> String\nReturns the current contents of the edit control on the Select Start\nMenu Folder page of the wizard. Unlike ExpandConstant('{group}'), this\nfunction will not fail if called after the wizard is shown but prior\nto the user selecting a folder. Rather, it will return the default\nfolder name.
WizardIsComponentSelected(const Components: String)function -> Boolean\nReturns True if the specified component is selected. Multiple\ncomponents may be specified in the same manner as in a Components\nparameter.
WizardIsTaskSelected(const Tasks: String)function -> Boolean\nReturns True if the specified task is selected. Multiple tasks may be\nspecified in the same manner as in a Tasks parameter.
WizardNoIcons()function -> Boolean\nReturns the current setting of the Don't create a Start Menu folder\ncheck box on the Select Start Menu Folder page of the wizard.
WizardSelectComponents(const Components: String)procedure\nSelects the specified comma separated list of component names. If a\ncomponent name is prefixed with a "*" character, any child components\nwill be selected as well (except for those that include the\ndontinheritcheck flag). If a component name is prefixed with a "!"\ncharacter, the component will be deselected. This function does [...]
WizardSelectTasks(const Tasks: String)procedure\nSelects the specified comma separated list of task names. If a task\nname is prefixed with a "!" character, the task will be deselected.\nThis function does not change the state of unspecified tasks.
WizardSelectedComponents(const Descriptions: Boolean)function -> String\nReturns a comma-separated list of names or descriptions of the\ncomponents selected by the user.
WizardSelectedTasks(const Descriptions: Boolean)function -> String\nReturns a comma-separated list of names or descriptions of the tasks\nselected by the user.
WizardSetupType(const Description: Boolean)function -> String\nReturns the name or description of the setup type selected by the\nuser.
WizardSilent()function -> Boolean\nReturns True if Setup is running silently, False otherwise.
InitializeSetup()event function -> Boolean\nCalled during Setup's initialization. Return False to abort Setup,\nTrue otherwise.
InitializeWizard()event procedure\nUse this event function to make changes to the wizard or wizard pages\nat startup. You can't use the InitializeSetup event function for this\nsince at the time it is triggered, the wizard form does not yet exist.
DeinitializeSetup()event procedure\nCalled just before Setup terminates. Note that this function is called\neven if the user exits Setup before anything is installed.
CurStepChanged(CurStep: TSetupStep)event procedure\nYou can use this event function to perform your own pre-install and\npost-install tasks. Called with CurStep=ssInstall just before the\nactual installation starts, with CurStep=ssPostInstall just after the\nactual installation finishes, and with CurStep=ssDone just before\nSetup terminates after a successful install.
CurInstallProgressChanged(CurProgress, MaxProgress: Integer)event procedure\nYou can use this event function to monitor progress while Setup is\nextracting files, creating shortcuts, creating INI entries, and\ncreating registry entries.
NextButtonClick(CurPageID: Integer)event function -> Boolean\nCalled when the user clicks the Next button. If you return True, the\nwizard will move to the next page; if you return False, it will remain\non the current page (specified by CurPageID). Note that this function\nis called on silent installs as well, even though there is no Next\nbutton that the user can click. Setup instead simulates "clicks" [...]
BackButtonClick(CurPageID: Integer)event function -> Boolean\nCalled when the user clicks the Back button. If you return True, the\nwizard will move to the previous page; if you return False, it will\nremain on the current page (specified by CurPageID).
CancelButtonClick(CurPageID: Integer; var Cancel, Confirm: Boolean)event procedure\nCalled when the user clicks the Cancel button or clicks the window's\nClose button. The Cancel parameter specifies whether normal cancel\nprocessing should occur; it defaults to True. The Confirm parameter\nspecifies whether an "Exit Setup?" message box should be displayed; it\nusually defaults to True. If Cancel is set to False, then the [...]
ShouldSkipPage(PageID: Integer)event function -> Boolean\nThe wizard calls this event function to determine whether or not a\nparticular page (specified by PageID) should be shown at all. If you\nreturn True, the page will be skipped; if you return False, the page\nmay be shown. Note: This event function isn't called for the\nwpPreparing, and wpInstalling pages, nor for pages that Setup [...]
CurPageChanged(CurPageID: Integer)event procedure\nCalled after a new wizard page (specified by CurPageID) is shown.
CheckPassword(Password: String)event function -> Boolean\nIf Setup finds the CheckPassword event function in the Pascal script,\nit automatically displays the Password page and calls CheckPassword to\ncheck passwords. Return True to accept the password and False to\nreject it. To avoid storing the actual password inside the compiled\n[Code] section which is stored inside Setup, you should use [...]
NeedRestart()event function -> Boolean\nReturn True to instruct Setup to prompt the user to restart the system\nat the end of a successful installation, False otherwise.
UpdateReadyMemo(Space, NewLine, MemoUserInfoInfo, MemoDirInfo, MemoTypeInfo, MemoComponentsInfo, MemoGroupInfo, MemoTasksInfo: String)event function -> String\nIf Setup finds the UpdateReadyMemo event function in the Pascal\nscript, it is called automatically when the Ready to Install wizard\npage becomes the active page. It should return the text to be\ndisplayed in the settings memo on the Ready to Install wizard page as\na single string with lines separated by the NewLine parameter. [...]
RegisterPreviousData(PreviousDataKey: Integer)event procedure\nTo store user settings entered on custom wizard pages, place a\nRegisterPreviousData event function in the Pascal script and call\nSetPreviousData(PreviousDataKey, ...) inside it, once per setting.
CheckSerial(Serial: String)event function -> Boolean\nIf Setup finds the CheckSerial event function in the Pascal script, a\nserial number field will automatically appear on the User Info wizard\npage (which must be enabled using UserInfoPage=yes in your [Setup]\nsection!). Return True to accept the serial number and False to reject\nit. When using serial numbers, it's important to keep in mind [...]
GetCustomSetupExitCode()event function -> Integer\nReturn a non zero number to instruct Setup to return a custom exit\ncode. This function is only called if Setup was successfully run to\ncompletion and the exit code would have been 0. Also see Setup Exit\nCodes.
PrepareToInstall(var NeedsRestart: Boolean)event function -> String\nYou can use this event function to detect and install missing\nprerequisites and/or to shutdown any application which is about to be\nupdated. Return a non empty string to instruct Setup to stop at the\nPreparing to Install wizard page, showing the returned string as the\nerror message. Set NeedsRestart to True (and return a non empty [...]
RegisterExtraCloseApplicationsResources()event procedure\nTo register extra files which Setup should check for being in-use if\nCloseApplications is set to yes, place a\nRegisterExtraCloseApplicationsResources event function in the Pascal\nscript and call RegisterExtraCloseApplicationsResource inside it, once\nper file.
InitializeUninstall()event function -> Boolean\nReturn False to abort Uninstall, True otherwise.
InitializeUninstallProgressForm()event procedure\nUse this event function to make changes to the progress form at\nstartup. You can't use the InitializeUninstall event function for this\nsince at the time it is triggered, the progress form does not yet\nexist.
DeinitializeUninstall()event procedure
CurUninstallStepChanged(CurUninstallStep: TUninstallStep)event procedure
UninstallNeedRestart()event function -> Boolean\nReturn True to instruct Uninstall to prompt the user to restart the\nsystem at the end of a successful uninstallation, False otherwise.
and
begin
break
case
const
continue
do
downto
else
end
except
exit
False
finally
for
function
if
not
of
on
or
procedure
repeat
Result
then
to
True
try
type
until
uses
var
while
with
