ArithmeticError()[class] Base class for arithmetic errors.
AssertionError()[class] Assertion failed.
AttributeError()[class] Attribute not found.
BaseException()[class] Common base class for all exceptions
BaseExceptionGroup()[class] A combination of multiple unrelated exceptions.
BlockingIOError()[class] I/O operation would block.
BrokenPipeError()[class] Broken pipe.
BufferError()[class] Buffer error.
BytesWarning()[class] Base class for warnings about bytes and buffer related problems, mostly\nrelated to conversion from str or comparing to str.
ChildProcessError()[class] Child process error.
ConnectionAbortedError()[class] Connection aborted.
ConnectionError()[class] Connection error.
ConnectionRefusedError()[class] Connection refused.
ConnectionResetError()[class] Connection reset.
DeprecationWarning()[class] Base class for warnings about deprecated features.
EOFError()[class] Read beyond end of file.
Ellipsis
EncodingWarning()[class] Base class for warnings about encodings.
EnvironmentError()[class] Base class for I/O related errors.
Exception()[class] Common base class for all non-exit exceptions.
ExceptionGroup()[class] A combination of multiple unrelated exceptions.
False
FileExistsError()[class] File already exists.
FileNotFoundError()[class] File not found.
FloatingPointError()[class] Floating point operation failed.
FutureWarning()[class] Base class for warnings about constructs that will change semantically\nin the future.
GeneratorExit()[class] Request that a generator exit.
IOError()[class] Base class for I/O related errors.
ImportError()[class] Import can't find module, or can't find name in module.
ImportWarning()[class] Base class for warnings about probable mistakes in module imports
IndentationError()[class] Improper indentation.
IndexError()[class] Sequence index out of range.
InterruptedError()[class] Interrupted by signal.
IsADirectoryError()[class] Operation doesn't work on directories.
KeyError()[class] Mapping key not found.
KeyboardInterrupt()[class] Program interrupted by user.
LookupError()[class] Base class for lookup errors.
MemoryError()[class] Out of memory.
ModuleNotFoundError()[class] Module not found.
NameError()[class] Name not found globally.
None
NotADirectoryError()[class] Operation only works on directories.
NotImplemented
NotImplementedError()[class] Method or function hasn't been implemented yet.
OSError()[class] Base class for I/O related errors.
OverflowError()[class] Result too large to be represented.
PendingDeprecationWarning()[class] Base class for warnings about features which will be deprecated\nin the future.
PermissionError()[class] Not enough permissions.
ProcessLookupError()[class] Process not found.
RecursionError()[class] Recursion limit exceeded.
ReferenceError()[class] Weak ref proxy used after referent went away.
ResourceWarning()[class] Base class for warnings about resource usage.
RuntimeError()[class] Unspecified run-time error.
RuntimeWarning()[class] Base class for warnings about dubious runtime behavior.
StopAsyncIteration()[class] Signal the end from iterator.__anext__().
StopIteration()[class] Signal the end from iterator.__next__().
SyntaxError()[class] Invalid syntax.
SyntaxWarning()[class] Base class for warnings about dubious syntax.
SystemError()[class] Internal error in the Python interpreter.
SystemExit()[class] Request to exit from the interpreter.
TabError()[class] Improper mixture of spaces and tabs.
TimeoutError()[class] Timeout expired.
True
TypeError()[class] Inappropriate argument type.
UnboundLocalError()[class] Local name referenced but not bound to a value.
UnicodeDecodeError()[class] Unicode decoding error.
UnicodeEncodeError()[class] Unicode encoding error.
UnicodeError()[class] Unicode related error.
UnicodeTranslateError()[class] Unicode translation error.
UnicodeWarning()[class] Base class for warnings about Unicode related problems, mostly\nrelated to conversion problems.
UserWarning()[class] Base class for warnings generated by user code.
ValueError()[class] Inappropriate argument value (of correct type).
Warning()[class] Base class for warning categories.
WindowsError()[class] Base class for I/O related errors.
ZeroDivisionError()[class] Second argument to a division or modulo operation was zero.
abc
abc.ABC()[class] Helper class that provides a standard way to create an ABC using\ninheritance.
abc.ABCMeta(name, bases, namespace, /, **kwargs)[class] Metaclass for defining Abstract Base Classes (ABCs).
abc.abstractclassmethod()[class] A decorator indicating abstract classmethods.
abc.abstractmethod(funcobj)[function] A decorator indicating abstract methods.
abc.abstractproperty(fget=None, fset=None, fdel=None, doc=None)[class] A decorator indicating abstract properties.
abc.abstractstaticmethod()[class] A decorator indicating abstract staticmethods.
abc.get_cache_token()Returns the current ABC cache token.
abc.update_abstractmethods(cls)[function] Recalculate the set of abstract methods of an abstract class.
abs(x, /)Return the absolute value of the argument.
aifc
aifc.Error()[class] Common base class for all non-exit exceptions.
aifc.open(f, mode=None)[function]
aiter(async_iterable, /)Return an AsyncIterator for an AsyncIterable object.
all(iterable, /)Return True if bool(x) is True for all values x in the iterable.
and
anext()async anext(aiterator[, default])
any(iterable, /)Return True if bool(x) is True for any x in the iterable.
argparse
argparse.Action(option_strings, dest, nargs=None, const=None, default=None,\n  type=None, choices=None, required=False, help=None, metavar=None)[class] Information about how to convert command line strings to Python objects.
argparse.ArgumentDefaultsHelpFormatter(prog, indent_increment=2,\n  max_help_position=24, width=None)[class] Help message formatter which adds default values to argument help.
argparse.ArgumentError(argument, message)[class] An error from creating or using an argument (optional or positional).
argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None,\n  parents=[], formatter_class=<??>, prefix_chars='-', fromfile_prefix_chars=None,\n  argument_default=None, conflict_handler='error', add_help=True, allow_abbrev=True,\n  exit_on_error=True)[class] Object for parsing command line strings into Python objects.
argparse.ArgumentTypeError()[class] An error from trying to convert a command line string to a type.
argparse.BooleanOptionalAction(option_strings, dest, default=None, type=<??>,\n  choices=<??>, required=False, help=None, metavar=<??>)[class] Information about how to convert command line strings to Python objects.
argparse.FileType(mode='r', bufsize=-1, encoding=None, errors=None)[class] Factory for creating file object types
argparse.HelpFormatter(prog, indent_increment=2, max_help_position=24,\n  width=None)[class] Formatter for generating usage messages and argument help strings.
argparse.MetavarTypeHelpFormatter(prog, indent_increment=2,\n  max_help_position=24, width=None)[class] Help message formatter which uses the argument 'type' as the default\nmetavar value (instead of the argument 'dest')
argparse.Namespace(**kwargs)[class] Simple object for storing attributes.
argparse.ONE_OR_MORE
argparse.OPTIONAL
argparse.PARSER
argparse.REMAINDER
argparse.RawDescriptionHelpFormatter(prog, indent_increment=2,\n  max_help_position=24, width=None)[class] Help message formatter which retains any formatting in descriptions.
argparse.RawTextHelpFormatter(prog, indent_increment=2, max_help_position=24,\n  width=None)[class] Help message formatter which retains formatting of all help text.
argparse.SUPPRESS
argparse.ZERO_OR_MORE
array
array.ArrayType()[class] array(typecode [, initializer]) -> array
array.array(typecode[, initializer])[class] array(typecode [, initializer]) -> array
array.typecodes
as
ascii(obj, /)Return an ASCII-only representation of an object.
assert
ast
ast.AST()[class]
ast.Add()[class] Add
ast.And()[class] And
ast.AnnAssign()[class] AnnAssign(expr target, expr annotation, expr? value, int simple)
ast.Assert()[class] Assert(expr test, expr? msg)
ast.Assign()[class] Assign(expr* targets, expr value, string? type_comment)
ast.AsyncFor()[class] AsyncFor(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)
ast.AsyncFunctionDef()[class] AsyncFunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns, string? type_comment, type_param* type_params)
ast.AsyncWith()[class] AsyncWith(withitem* items, stmt* body, string? type_comment)
ast.Attribute()[class] Attribute(expr value, identifier attr, expr_context ctx)
ast.AugAssign()[class] AugAssign(expr target, operator op, expr value)
ast.AugLoad()[class] Deprecated AST node class.  Unused in Python 3.
ast.AugStore()[class] Deprecated AST node class.  Unused in Python 3.
ast.Await()[class] Await(expr value)
ast.BinOp()[class] BinOp(expr left, operator op, expr right)
ast.BitAnd()[class] BitAnd
ast.BitOr()[class] BitOr
ast.BitXor()[class] BitXor
ast.BoolOp()[class] BoolOp(boolop op, expr* values)
ast.Break()[class] Break
ast.Call()[class] Call(expr func, expr* args, keyword* keywords)
ast.ClassDef()[class] ClassDef(identifier name, expr* bases, keyword* keywords, stmt* body, expr* decorator_list, type_param* type_params)
ast.Compare()[class] Compare(expr left, cmpop* ops, expr* comparators)
ast.Constant()[class] Constant(constant value, string? kind)
ast.Continue()[class] Continue
ast.Del()[class] Del
ast.Delete()[class] Delete(expr* targets)
ast.Dict()[class] Dict(expr* keys, expr* values)
ast.DictComp()[class] DictComp(expr key, expr value, comprehension* generators)
ast.Div()[class] Div
ast.Eq()[class] Eq
ast.ExceptHandler()[class] ExceptHandler(expr? type, identifier? name, stmt* body)
ast.Expr()[class] Expr(expr value)
ast.Expression()[class] Expression(expr body)
ast.ExtSlice(dims=﴾﴿, **kwargs)[class] Deprecated AST node class. Use ast.Tuple instead.
ast.FloorDiv()[class] FloorDiv
ast.For()[class] For(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)
ast.FormattedValue()[class] FormattedValue(expr value, int conversion, expr? format_spec)
ast.FunctionDef()[class] FunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns, string? type_comment, type_param* type_params)
ast.FunctionType()[class] FunctionType(expr* argtypes, expr returns)
ast.GeneratorExp()[class] GeneratorExp(expr elt, comprehension* generators)
ast.Global()[class] Global(identifier* names)
ast.Gt()[class] Gt
ast.GtE()[class] GtE
ast.If()[class] If(expr test, stmt* body, stmt* orelse)
ast.IfExp()[class] IfExp(expr test, expr body, expr orelse)
ast.Import()[class] Import(alias* names)
ast.ImportFrom()[class] ImportFrom(identifier? module, alias* names, int? level)
ast.In()[class] In
ast.Index(value, **kwargs)[class] Deprecated AST node class. Use the index value directly instead.
ast.IntEnum(new_class_name, /, names, *, module=None, qualname=None, type=None,\n  start=1, boundary=None)[class] Enum where members are also (and must be) ints
ast.Interactive()[class] Interactive(stmt* body)
ast.Invert()[class] Invert
ast.Is()[class] Is
ast.IsNot()[class] IsNot
ast.JoinedStr()[class] JoinedStr(expr* values)
ast.LShift()[class] LShift
ast.Lambda()[class] Lambda(arguments args, expr body)
ast.List()[class] List(expr* elts, expr_context ctx)
ast.ListComp()[class] ListComp(expr elt, comprehension* generators)
ast.Load()[class] Load
ast.Lt()[class] Lt
ast.LtE()[class] LtE
ast.MatMult()[class] MatMult
ast.Match()[class] Match(expr subject, match_case* cases)
ast.MatchAs()[class] MatchAs(pattern? pattern, identifier? name)
ast.MatchClass()[class] MatchClass(expr cls, pattern* patterns, identifier* kwd_attrs, pattern* kwd_patterns)
ast.MatchMapping()[class] MatchMapping(expr* keys, pattern* patterns, identifier? rest)
ast.MatchOr()[class] MatchOr(pattern* patterns)
ast.MatchSequence()[class] MatchSequence(pattern* patterns)
ast.MatchSingleton()[class] MatchSingleton(constant value)
ast.MatchStar()[class] MatchStar(identifier? name)
ast.MatchValue()[class] MatchValue(expr value)
ast.Mod()[class] Mod
ast.Module()[class] Module(stmt* body, type_ignore* type_ignores)
ast.Mult()[class] Mult
ast.Name()[class] Name(identifier id, expr_context ctx)
ast.NamedExpr()[class] NamedExpr(expr target, expr value)
ast.NodeTransformer()[class] A :class:`NodeVisitor` subclass that walks the abstract syntax tree and\nallows modification of nodes.
ast.NodeVisitor()[class] A node visitor base class that walks the abstract syntax tree and calls a\nvisitor function for every node found.  This function may return a value\nwhich is forwarded by the `visit` method.
ast.Nonlocal()[class] Nonlocal(identifier* names)
ast.Not()[class] Not
ast.NotEq()[class] NotEq
ast.NotIn()[class] NotIn
ast.Or()[class] Or
ast.Param()[class] Deprecated AST node class.  Unused in Python 3.
ast.ParamSpec()[class] ParamSpec(identifier name)
ast.Pass()[class] Pass
ast.Pow()[class] Pow
ast.PyCF_ALLOW_TOP_LEVEL_AWAIT
ast.PyCF_ONLY_AST
ast.PyCF_TYPE_COMMENTS
ast.RShift()[class] RShift
ast.Raise()[class] Raise(expr? exc, expr? cause)
ast.Return()[class] Return(expr? value)
ast.Set()[class] Set(expr* elts)
ast.SetComp()[class] SetComp(expr elt, comprehension* generators)
ast.Slice()[class] Slice(expr? lower, expr? upper, expr? step)
ast.Starred()[class] Starred(expr value, expr_context ctx)
ast.Store()[class] Store
ast.Sub()[class] Sub
ast.Subscript()[class] Subscript(expr value, expr slice, expr_context ctx)
ast.Suite()[class] Deprecated AST node class.  Unused in Python 3.
ast.Try()[class] Try(stmt* body, excepthandler* handlers, stmt* orelse, stmt* finalbody)
ast.TryStar()[class] TryStar(stmt* body, excepthandler* handlers, stmt* orelse, stmt* finalbody)
ast.Tuple()[class] Tuple(expr* elts, expr_context ctx)
ast.TypeAlias()[class] TypeAlias(expr name, type_param* type_params, expr value)
ast.TypeIgnore()[class] TypeIgnore(int lineno, string tag)
ast.TypeVar()[class] TypeVar(identifier name, expr? bound)
ast.TypeVarTuple()[class] TypeVarTuple(identifier name)
ast.UAdd()[class] UAdd
ast.USub()[class] USub
ast.UnaryOp()[class] UnaryOp(unaryop op, expr operand)
ast.While()[class] While(expr test, stmt* body, stmt* orelse)
ast.With()[class] With(withitem* items, stmt* body, string? type_comment)
ast.Yield()[class] Yield(expr? value)
ast.YieldFrom()[class] YieldFrom(expr value)
ast.alias()[class] alias(identifier name, identifier? asname)
ast.arg()[class] arg(identifier arg, expr? annotation, string? type_comment)
ast.arguments()[class] arguments(arg* posonlyargs, arg* args, arg? vararg, arg* kwonlyargs, expr* kw_defaults, arg? kwarg, expr* defaults)
ast.auto(value=_auto_null)[class] Instances are replaced with an appropriate value in Enum class suites.
ast.boolop()[class] boolop = And | Or
ast.cmpop()[class] cmpop = Eq | NotEq | Lt | LtE | Gt | GtE | Is | IsNot | In | NotIn
ast.comprehension()[class] comprehension(expr target, expr iter, expr* ifs, int is_async)
ast.contextmanager(func)[function] @contextmanager decorator.
ast.copy_location(new_node, old_node)[function] Copy source location (`lineno`, `col_offset`, `end_lineno`, and `end_col_offset`\nattributes) from *old_node* to *new_node* if possible, and return *new_node*.
ast.dump(node, annotate_fields=True, include_attributes=False, *, indent=None)[function] Return a formatted dump of the tree in node.  This is mainly useful for\ndebugging purposes.  If annotate_fields is true (by default),\nthe returned string will show the names and the values for fields.\nIf annotate_fields is false, the result string will be more compact by\nomitting unambiguous field names.  Attributes such as line\nnumbers and column offsets are not dumped by default.  If this is wanted,\ninclude_attributes can be set to true.  If indent is a non-negative\ninteger or string, then the tree will be pretty-printed with that indent\nlevel. None (the default) selects the single line representation.
ast.excepthandler()[class] excepthandler = ExceptHandler(expr? type, identifier? name, stmt* body)
ast.expr()[class] expr = BoolOp(boolop op, expr* values)\n| NamedExpr(expr target, expr value)\n| BinOp(expr left, operator op, expr right)\n| UnaryOp(unaryop op, expr operand)\n| Lambda(arguments args, expr body)\n| IfExp(expr test, expr body, expr orelse)\n| Dict(expr* keys, expr* values)\n| Set(expr* elts)\n| ListComp(expr elt, comprehension* generators)\n| SetComp(expr elt, comprehension* generators)\n| DictComp(expr key, expr value, comprehension* generators)\n| GeneratorExp(expr elt, comprehension* generators)\n| Await(expr value)\n| Yield(expr? value)\n| YieldFrom(expr value)\n| Compare(expr left, cmpop* ops, expr* comparators)\n| Call(expr func, expr* args, keyword* keywords)\n| FormattedValue(expr value, int conversion, expr? format_spec)\n| JoinedStr(expr* values)\n| Constant(constant value, string? kind)\n| Attribute(expr value, identifier attr, expr_context ctx)\n| Subscript(expr value, expr slice, expr_context ctx)\n| Starred(expr value, expr_context ctx)\n| Name(identifier id, expr_context ctx)\n| List(expr* elts, expr_context ctx)\n| Tuple(expr* elts, expr_context ctx)\n| Slice(expr? lower, expr? upper, expr? step)
ast.expr_context()[class] expr_context = Load | Store | Del
ast.fix_missing_locations(node)[function] When you compile a node tree with compile(), the compiler expects lineno and\ncol_offset attributes for every node that supports them.  This is rather\ntedious to fill in for generated nodes, so this helper adds these attributes\nrecursively where not already set, by setting them to the values of the\nparent node.  It works recursively starting at *node*.
ast.get_docstring(node, clean=True)[function] Return the docstring for the given node or None if no docstring can\nbe found.  If the node provided does not have docstrings a TypeError\nwill be raised.
ast.get_source_segment(source, node, *, padded=False)[function] Get source code segment of the *source* that generated *node*.
ast.increment_lineno(node, n=1)[function] Increment the line number and end line number of each node in the tree\nstarting at *node* by *n*. This is useful to "move code" to a different\nlocation in a file.
ast.iter_child_nodes(node)[function] Yield all direct child nodes of *node*, that is, all fields that are nodes\nand all items of fields that are lists of nodes.
ast.iter_fields(node)[function] Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields``\nthat is present on *node*.
ast.keyword()[class] keyword(identifier? arg, expr value)
ast.literal_eval(node_or_string)[function] Evaluate an expression node or a string containing only a Python\nexpression.  The string or node provided may only consist of the following\nPython literal structures: strings, bytes, numbers, tuples, lists, dicts,\nsets, booleans, and None.
ast.main()[function]
ast.match_case()[class] match_case(pattern pattern, expr? guard, stmt* body)
ast.mod()[class] mod = Module(stmt* body, type_ignore* type_ignores)\n| Interactive(stmt* body)\n| Expression(expr body)\n| FunctionType(expr* argtypes, expr returns)
ast.nullcontext(enter_result=None)[class] Context manager that does no additional processing.
ast.operator()[class] operator = Add | Sub | Mult | MatMult | Div | Mod | Pow | LShift | RShift | BitOr | BitXor | BitAnd | FloorDiv
ast.parse(source, filename='<unknown>', mode='exec', *, type_comments=False,\n  feature_version=None)[function] Parse the source into an AST node.\nEquivalent to compile(source, filename, mode, PyCF_ONLY_AST).\nPass type_comments=True to get back type comments where the syntax allows.
ast.pattern()[class] pattern = MatchValue(expr value)\n| MatchSingleton(constant value)\n| MatchSequence(pattern* patterns)\n| MatchMapping(expr* keys, pattern* patterns, identifier? rest)\n| MatchClass(expr cls, pattern* patterns, identifier* kwd_attrs, pattern* kwd_patterns)\n| MatchStar(identifier? name)\n| MatchAs(pattern? pattern, identifier? name)\n| MatchOr(pattern* patterns)
ast.slice()[class] Deprecated AST node class.
ast.stmt()[class] stmt = FunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns, string? type_comment, type_param* type_params)\n| AsyncFunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns, string? type_comment, type_param* type_params)\n| ClassDef(identifier name, expr* bases, keyword* keywords, stmt* body, expr* decorator_list, type_param* type_params)\n| Return(expr? value)\n| Delete(expr* targets)\n| Assign(expr* targets, expr value, string? type_comment)\n| TypeAlias(expr name, type_param* type_params, expr value)\n| AugAssign(expr target, operator op, expr value)\n| AnnAssign(expr target, expr annotation, expr? value, int simple)\n| For(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)\n| AsyncFor(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)\n| While(expr test, stmt* body, stmt* orelse)\n| If(expr test, stmt* body, stmt* orelse)\n| With(withitem* items, stmt* body, string? type_comment)\n| AsyncWith(withitem* items, stmt* body, string? type_comment)\n| Match(expr subject, match_case* cases)\n| Raise(expr? exc, expr? cause)\n| Try(stmt* body, excepthandler* handlers, stmt* orelse, stmt* finalbody)\n| TryStar(stmt* body, excepthandler* handlers, stmt* orelse, stmt* finalbody)\n| Assert(expr test, expr? msg)\n| Import(alias* names)\n| ImportFrom(identifier? module, alias* names, int? level)\n| Global(identifier* names)\n| Nonlocal(identifier* names)\n| Expr(expr value)\n| Pass\n| Break\n| Continue
ast.type_ignore()[class] type_ignore = TypeIgnore(int lineno, string tag)
ast.type_param()[class] type_param = TypeVar(identifier name, expr? bound)\n| ParamSpec(identifier name)\n| TypeVarTuple(identifier name)
ast.unaryop()[class] unaryop = Invert | Not | UAdd | USub
ast.unparse(ast_obj)[function]
ast.walk(node)[function] Recursively yield all descendant nodes in the tree starting at *node*\n(including *node* itself), in no specified order.  This is useful if you\nonly want to modify nodes in place and don't care about the context.
ast.withitem()[class] withitem(expr context_expr, expr? optional_vars)
async
asyncio
asyncio.ALL_COMPLETED
asyncio.AbstractEventLoop()[class] Abstract event loop.
asyncio.AbstractEventLoopPolicy()[class] Abstract policy for accessing the event loop.
asyncio.AbstractServer()[class] Abstract server returned by create_server().
asyncio.Barrier(parties)[class] Asyncio equivalent to threading.Barrier
asyncio.BaseEventLoop()[class] Abstract event loop.
asyncio.BaseProtocol()[class] Common base class for protocol interfaces.
asyncio.BaseTransport(extra=None)[class] Base class for transports.
asyncio.BoundedSemaphore(value=1)[class] A bounded semaphore implementation.
asyncio.BrokenBarrierError()[class] Barrier is broken by barrier.abort() call.
asyncio.BufferedProtocol()[class] Interface for stream protocol with manual buffer control.
asyncio.CancelledError()[class] The Future or Task was cancelled.
asyncio.Condition(lock=None)[class] Asynchronous equivalent to threading.Condition.
asyncio.DatagramProtocol()[class] Interface for datagram protocol.
asyncio.DatagramTransport(extra=None)[class] Interface for datagram (UDP) transports.
asyncio.DefaultEventLoopPolicy()[class] Default policy implementation for accessing the event loop.
asyncio.Event()[class] Asynchronous equivalent to threading.Event.
asyncio.FIRST_COMPLETED
asyncio.FIRST_EXCEPTION
asyncio.Future(*, loop=None)[class] This class is *almost* compatible with concurrent.futures.Future.
asyncio.Handle(callback, args, loop, context=None)[class] Object returned by callback registration methods.
asyncio.IncompleteReadError(partial, expected)[class] Incomplete read error. Attributes:
asyncio.InvalidStateError()[class] The operation is not allowed in this state.
asyncio.IocpProactor(concurrency=4294967295)[class] Proactor implementation using IOCP.
asyncio.LifoQueue(maxsize=0)[class] A subclass of Queue that retrieves most recently added entries first.
asyncio.LimitOverrunError(message, consumed)[class] Reached the buffer limit while looking for a separator.
asyncio.Lock()[class] Primitive lock objects.
asyncio.PriorityQueue(maxsize=0)[class] A subclass of Queue; retrieves entries in priority order (lowest first).
asyncio.ProactorEventLoop(proactor=None)[class] Windows version of proactor event loop using IOCP.
asyncio.Protocol()[class] Interface for stream protocol.
asyncio.Queue(maxsize=0)[class] A queue, useful for coordinating producer and consumer coroutines.
asyncio.QueueEmpty()[class] Raised when Queue.get_nowait() is called on an empty Queue.
asyncio.QueueFull()[class] Raised when the Queue.put_nowait() method is called on a full Queue.
asyncio.ReadTransport(extra=None)[class] Interface for read-only transports.
asyncio.Runner(*, debug=None, loop_factory=None)[class] A context manager that controls event loop life cycle.
asyncio.SelectorEventLoop(selector=None)[class] Windows version of selector event loop.
asyncio.Semaphore(value=1)[class] A Semaphore implementation.
asyncio.SendfileNotAvailableError()[class] Sendfile syscall is not available.
asyncio.Server(loop, sockets, protocol_factory, ssl_context, backlog,\n  ssl_handshake_timeout, ssl_shutdown_timeout=None)[class] Abstract server returned by create_server().
asyncio.StreamReader(limit=65536, loop=None)[class]
asyncio.StreamReaderProtocol(stream_reader, client_connected_cb=None,\n  loop=None)[class] Helper class to adapt between Protocol and StreamReader.
asyncio.StreamWriter(transport, protocol, reader, loop)[class] Wraps a Transport.
asyncio.SubprocessProtocol()[class] Interface for protocol for subprocess calls.
asyncio.SubprocessTransport(extra=None)[class] Base class for transports.
asyncio.Task(coro, *, loop=None, name=None, context=None, eager_start=False)[class] A coroutine wrapped in a Future.
asyncio.TaskGroup()[class] Asynchronous context manager for managing groups of tasks.
asyncio.Timeout(when: Optional[float])[class] Asynchronous context manager for cancelling overdue coroutines.
asyncio.TimeoutError()[class] Timeout expired.
asyncio.TimerHandle(when, callback, args, loop, context=None)[class] Object returned by timed callback registration methods.
asyncio.Transport(extra=None)[class] Interface representing a bidirectional transport.
asyncio.WindowsProactorEventLoopPolicy()[class] Default policy implementation for accessing the event loop.
asyncio.WindowsSelectorEventLoopPolicy()[class] Default policy implementation for accessing the event loop.
asyncio.WriteTransport(extra=None)[class] Interface for write-only transports.
asyncio._enter_task(loop, task)Enter into task execution or resume suspended task.
asyncio._get_running_loop()Return the running event loop or None.
asyncio._leave_task(loop, task)Leave task execution or suspend a task.
asyncio._register_task(task)Register a new task in asyncio as executed by loop.
asyncio._set_running_loop(loop, /)Set the running event loop.
asyncio._unregister_task(task)Unregister a task.
asyncio.all_tasks(loop=None)[function] Return a set of all tasks for the loop.
asyncio.as_completed(fs, *, timeout=None)[function] Return an iterator whose values are coroutines.
asyncio.base_events
asyncio.base_events.BaseEventLoop()[class] Abstract event loop.
asyncio.base_events.Server(loop, sockets, protocol_factory, ssl_context,\n  backlog, ssl_handshake_timeout, ssl_shutdown_timeout=None)[class] Abstract server returned by create_server().
asyncio.base_futures
asyncio.base_subprocess
asyncio.base_subprocess.BaseSubprocessTransport(loop, protocol, args, shell,\n  stdin, stdout, stderr, bufsize, waiter=None, extra=None, **kwargs)[class] Base class for transports.
asyncio.base_subprocess.ReadSubprocessPipeProto(proc, fd)[class] Interface for stream protocol.
asyncio.base_subprocess.WriteSubprocessPipeProto(proc, fd)[class] Common base class for protocol interfaces.
asyncio.base_subprocess.logger
asyncio.base_tasks
asyncio.base_tasks._task_get_stack(task, limit)[function]
asyncio.base_tasks._task_print_stack(task, limit, file)[function]
asyncio.base_tasks._task_repr(self)[function]
asyncio.base_tasks._task_repr_info(task)[function]
asyncio.constants
asyncio.constants.ACCEPT_RETRY_DELAY
asyncio.constants.DEBUG_STACK_DEPTH
asyncio.constants.FLOW_CONTROL_HIGH_WATER_SSL_READ
asyncio.constants.FLOW_CONTROL_HIGH_WATER_SSL_WRITE
asyncio.constants.LOG_THRESHOLD_FOR_CONNLOST_WRITES
asyncio.constants.SENDFILE_FALLBACK_READBUFFER_SIZE
asyncio.constants.SSL_HANDSHAKE_TIMEOUT
asyncio.constants.SSL_SHUTDOWN_TIMEOUT
asyncio.constants.THREAD_JOIN_TIMEOUT
asyncio.constants._SendfileMode(*values)[class] Create a collection of name/value pairs.
asyncio.coroutines
asyncio.coroutines.iscoroutine(obj)[function] Return True if obj is a coroutine object.
asyncio.coroutines.iscoroutinefunction(func)[function] Return True if func is a decorated coroutine function.
asyncio.create_eager_task_factory(custom_task_constructor)[function] Create a function suitable for use as a task factory on an event-loop.
asyncio.create_subprocess_exec(program, *args, *, stdin=None, stdout=None,\n  stderr=None, limit=65536, **kwds)[function]
asyncio.create_subprocess_shell(cmd, stdin=None, stdout=None, stderr=None,\n  limit=65536, **kwds)[function]
asyncio.create_task(coro, *, name=None, context=None)[function] Schedule the execution of a coroutine object in a spawn task.
asyncio.current_task(loop=None)Return a currently executed task.
asyncio.eager_task_factory(loop, coro, *, name=None, context=None)[function]
asyncio.ensure_future(coro_or_future, *, loop=None)[function] Wrap a coroutine or an awaitable in a future.
asyncio.events
asyncio.events.AbstractEventLoop()[class] Abstract event loop.
asyncio.events.AbstractEventLoopPolicy()[class] Abstract policy for accessing the event loop.
asyncio.events.AbstractServer()[class] Abstract server returned by create_server().
asyncio.events.Handle(callback, args, loop, context=None)[class] Object returned by callback registration methods.
asyncio.events.TimerHandle(when, callback, args, loop, context=None)[class] Object returned by timed callback registration methods.
asyncio.events._get_running_loop()Return the running event loop or None.
asyncio.events._set_running_loop(loop, /)Set the running event loop.
asyncio.events.get_child_watcher()[function] Equivalent to calling get_event_loop_policy().get_child_watcher().
asyncio.events.get_event_loop()Return an asyncio event loop.
asyncio.events.get_event_loop_policy()[function] Get the current event loop policy.
asyncio.events.get_running_loop()Return the running event loop.  Raise a RuntimeError if there is none.
asyncio.events.new_event_loop()[function] Equivalent to calling get_event_loop_policy().new_event_loop().
asyncio.events.set_child_watcher(watcher)[function] Equivalent to calling\nget_event_loop_policy().set_child_watcher(watcher).
asyncio.events.set_event_loop(loop)[function] Equivalent to calling get_event_loop_policy().set_event_loop(loop).
asyncio.events.set_event_loop_policy(policy)[function] Set the current event loop policy.
asyncio.exceptions
asyncio.exceptions.BrokenBarrierError()[class] Barrier is broken by barrier.abort() call.
asyncio.exceptions.CancelledError()[class] The Future or Task was cancelled.
asyncio.exceptions.IncompleteReadError(partial, expected)[class] Incomplete read error. Attributes:
asyncio.exceptions.InvalidStateError()[class] The operation is not allowed in this state.
asyncio.exceptions.LimitOverrunError(message, consumed)[class] Reached the buffer limit while looking for a separator.
asyncio.exceptions.SendfileNotAvailableError()[class] Sendfile syscall is not available.
asyncio.exceptions.TimeoutError()[class] Timeout expired.
asyncio.format_helpers
asyncio.format_helpers._format_args_and_kwargs(args, kwargs)[function] Format function arguments and keyword arguments.
asyncio.format_helpers._format_callback(func, args, kwargs, suffix='')[function]
asyncio.format_helpers._format_callback_source(func, args)[function]
asyncio.format_helpers._get_function_source(func)[function]
asyncio.format_helpers.extract_stack(f=None, limit=None)[function] Replacement for traceback.extract_stack() that only does the\nnecessary work for asyncio debug mode.
asyncio.futures
asyncio.futures.Future(*, loop=None)[class] This class is *almost* compatible with concurrent.futures.Future.
asyncio.futures.isfuture(obj)[function] Check for a Future.
asyncio.futures.wrap_future(future, *, loop=None)[function] Wrap concurrent.futures.Future object.
asyncio.gather(*coros_or_futures, *, return_exceptions=False)[function] Return a future aggregating results from the given coroutines/futures.
asyncio.get_child_watcher()[function] Equivalent to calling get_event_loop_policy().get_child_watcher().
asyncio.get_event_loop()Return an asyncio event loop.
asyncio.get_event_loop_policy()[function] Get the current event loop policy.
asyncio.get_running_loop()Return the running event loop.  Raise a RuntimeError if there is none.
asyncio.iscoroutine(obj)[function] Return True if obj is a coroutine object.
asyncio.iscoroutinefunction(func)[function] Return True if func is a decorated coroutine function.
asyncio.isfuture(obj)[function] Check for a Future.
asyncio.locks
asyncio.locks.Barrier(parties)[class] Asyncio equivalent to threading.Barrier
asyncio.locks.BoundedSemaphore(value=1)[class] A bounded semaphore implementation.
asyncio.locks.Condition(lock=None)[class] Asynchronous equivalent to threading.Condition.
asyncio.locks.Event()[class] Asynchronous equivalent to threading.Event.
asyncio.locks.Lock()[class] Primitive lock objects.
asyncio.locks.Semaphore(value=1)[class] A Semaphore implementation.
asyncio.log
asyncio.log.logger
asyncio.mixins
asyncio.mixins._LoopBoundMixin()[class]
asyncio.mixins._global_lock
asyncio.new_event_loop()[function] Equivalent to calling get_event_loop_policy().new_event_loop().
asyncio.open_connection(host=None, port=None, *, limit=65536, **kwds)[function] A wrapper for create_connection() returning a (reader, writer) pair.
asyncio.proactor_events
asyncio.proactor_events.BaseProactorEventLoop(proactor)[class] Abstract event loop.
asyncio.protocols
asyncio.protocols.BaseProtocol()[class] Common base class for protocol interfaces.
asyncio.protocols.BufferedProtocol()[class] Interface for stream protocol with manual buffer control.
asyncio.protocols.DatagramProtocol()[class] Interface for datagram protocol.
asyncio.protocols.Protocol()[class] Interface for stream protocol.
asyncio.protocols.SubprocessProtocol()[class] Interface for protocol for subprocess calls.
asyncio.queues
asyncio.queues.LifoQueue(maxsize=0)[class] A subclass of Queue that retrieves most recently added entries first.
asyncio.queues.PriorityQueue(maxsize=0)[class] A subclass of Queue; retrieves entries in priority order (lowest first).
asyncio.queues.Queue(maxsize=0)[class] A queue, useful for coordinating producer and consumer coroutines.
asyncio.queues.QueueEmpty()[class] Raised when Queue.get_nowait() is called on an empty Queue.
asyncio.queues.QueueFull()[class] Raised when the Queue.put_nowait() method is called on a full Queue.
asyncio.run(main, *, debug=None, loop_factory=None)[function] Execute the coroutine and return the result.
asyncio.run_coroutine_threadsafe(coro, loop)[function] Submit a coroutine object to a given event loop.
asyncio.runners
asyncio.runners.Runner(*, debug=None, loop_factory=None)[class] A context manager that controls event loop life cycle.
asyncio.runners.run(main, *, debug=None, loop_factory=None)[function] Execute the coroutine and return the result.
asyncio.selector_events
asyncio.selector_events.BaseSelectorEventLoop(selector=None)[class] Selector event loop.
asyncio.set_child_watcher(watcher)[function] Equivalent to calling\nget_event_loop_policy().set_child_watcher(watcher).
asyncio.set_event_loop(loop)[function] Equivalent to calling get_event_loop_policy().set_event_loop(loop).
asyncio.set_event_loop_policy(policy)[function] Set the current event loop policy.
asyncio.shield(arg)[function] Wait for a future, shielding it from cancellation.
asyncio.sleep(delay, result=None)[function] Coroutine that completes after a given time (in seconds).
asyncio.sslproto
asyncio.sslproto.AppProtocolState(*values)[class] Create a collection of name/value pairs.
asyncio.sslproto.SSLAgainErrors
asyncio.sslproto.SSLProtocol(loop, app_protocol, sslcontext, waiter,\n  server_side=False, server_hostname=None, call_connection_made=True, ssl_handshake_timeout=None,\n  ssl_shutdown_timeout=None)[class] Interface for stream protocol with manual buffer control.
asyncio.sslproto.SSLProtocolState(*values)[class] Create a collection of name/value pairs.
asyncio.sslproto._SSLProtocolTransport(loop, ssl_protocol)[class] All the logic for (write) flow control in a mix-in base class.
asyncio.sslproto._create_transport_context(server_side, server_hostname)[function]
asyncio.sslproto.add_flowcontrol_defaults(high, low, kb)[function]
asyncio.sslproto.logger
asyncio.staggered
asyncio.staggered.staggered_race(coro_fns: Iterable[Callable[[]﹐ Awaitable]],\n  delay: Optional[float], *, loop: asyncio.events.AbstractEventLoop = None)[function] Run coroutines with staggered start times and take the first to finish.
asyncio.start_server(client_connected_cb, host=None, port=None, *, limit=65536,\n  **kwds)[function] Start a socket server, call back for each client connected.
asyncio.streams
asyncio.streams.StreamReader(limit=65536, loop=None)[class]
asyncio.streams.StreamReaderProtocol(stream_reader, client_connected_cb=None,\n  loop=None)[class] Helper class to adapt between Protocol and StreamReader.
asyncio.streams.StreamWriter(transport, protocol, reader, loop)[class] Wraps a Transport.
asyncio.streams.open_connection(host=None, port=None, *, limit=65536, **kwds)[function] A wrapper for create_connection() returning a (reader, writer) pair.
asyncio.streams.start_server(client_connected_cb, host=None, port=None, *,\n  limit=65536, **kwds)[function] Start a socket server, call back for each client connected.
asyncio.subprocess
asyncio.subprocess.create_subprocess_exec(program, *args, *, stdin=None,\n  stdout=None, stderr=None, limit=65536, **kwds)[function]
asyncio.subprocess.create_subprocess_shell(cmd, stdin=None, stdout=None,\n  stderr=None, limit=65536, **kwds)[function]
asyncio.taskgroups
asyncio.taskgroups.TaskGroup()[class] Asynchronous context manager for managing groups of tasks.
asyncio.tasks
asyncio.tasks.ALL_COMPLETED
asyncio.tasks.FIRST_COMPLETED
asyncio.tasks.FIRST_EXCEPTION
asyncio.tasks.Task(coro, *, loop=None, name=None, context=None,\n  eager_start=False)[class] A coroutine wrapped in a Future.
asyncio.tasks._enter_task(loop, task)Enter into task execution or resume suspended task.
asyncio.tasks._leave_task(loop, task)Leave task execution or suspend a task.
asyncio.tasks._register_task(task)Register a new task in asyncio as executed by loop.
asyncio.tasks._unregister_task(task)Unregister a task.
asyncio.tasks.all_tasks(loop=None)[function] Return a set of all tasks for the loop.
asyncio.tasks.as_completed(fs, *, timeout=None)[function] Return an iterator whose values are coroutines.
asyncio.tasks.create_eager_task_factory(custom_task_constructor)[function] Create a function suitable for use as a task factory on an event-loop.
asyncio.tasks.create_task(coro, *, name=None, context=None)[function] Schedule the execution of a coroutine object in a spawn task.
asyncio.tasks.current_task(loop=None)Return a currently executed task.
asyncio.tasks.eager_task_factory(loop, coro, *, name=None, context=None)[function]
asyncio.tasks.ensure_future(coro_or_future, *, loop=None)[function] Wrap a coroutine or an awaitable in a future.
asyncio.tasks.gather(*coros_or_futures, *, return_exceptions=False)[function] Return a future aggregating results from the given coroutines/futures.
asyncio.tasks.run_coroutine_threadsafe(coro, loop)[function] Submit a coroutine object to a given event loop.
asyncio.tasks.shield(arg)[function] Wait for a future, shielding it from cancellation.
asyncio.tasks.sleep(delay, result=None)[function] Coroutine that completes after a given time (in seconds).
asyncio.tasks.wait(fs, *, timeout=None, return_when='ALL_COMPLETED')[function] Wait for the Futures or Tasks given by fs to complete.
asyncio.tasks.wait_for(fut, timeout)[function] Wait for the single Future or coroutine to complete, with timeout.
asyncio.threads
asyncio.threads.to_thread(func, /, *args, **kwargs)[function] Asynchronously run function *func* in a separate thread.
asyncio.timeout(delay: Optional[float])[function] Timeout async context manager.
asyncio.timeout_at(when: Optional[float])[function] Schedule the timeout at absolute time.
asyncio.timeouts
asyncio.timeouts.Timeout(when: Optional[float])[class] Asynchronous context manager for cancelling overdue coroutines.
asyncio.timeouts.timeout(delay: Optional[float])[function] Timeout async context manager.
asyncio.timeouts.timeout_at(when: Optional[float])[function] Schedule the timeout at absolute time.
asyncio.to_thread(func, /, *args, **kwargs)[function] Asynchronously run function *func* in a separate thread.
asyncio.transports
asyncio.transports.BaseTransport(extra=None)[class] Base class for transports.
asyncio.transports.DatagramTransport(extra=None)[class] Interface for datagram (UDP) transports.
asyncio.transports.ReadTransport(extra=None)[class] Interface for read-only transports.
asyncio.transports.SubprocessTransport(extra=None)[class] Base class for transports.
asyncio.transports.Transport(extra=None)[class] Interface representing a bidirectional transport.
asyncio.transports.WriteTransport(extra=None)[class] Interface for write-only transports.
asyncio.trsock
asyncio.trsock.TransportSocket(sock: socket.socket)[class] A socket-like wrapper for exposing real transport sockets.
asyncio.wait(fs, *, timeout=None, return_when='ALL_COMPLETED')[function] Wait for the Futures or Tasks given by fs to complete.
asyncio.wait_for(fut, timeout)[function] Wait for the single Future or coroutine to complete, with timeout.
asyncio.windows_events
asyncio.windows_events.DefaultEventLoopPolicy()[class] Default policy implementation for accessing the event loop.
asyncio.windows_events.IocpProactor(concurrency=4294967295)[class] Proactor implementation using IOCP.
asyncio.windows_events.ProactorEventLoop(proactor=None)[class] Windows version of proactor event loop using IOCP.
asyncio.windows_events.SelectorEventLoop(selector=None)[class] Windows version of selector event loop.
asyncio.windows_events.WindowsProactorEventLoopPolicy()[class] Default policy implementation for accessing the event loop.
asyncio.windows_events.WindowsSelectorEventLoopPolicy()[class] Default policy implementation for accessing the event loop.
asyncio.windows_utils
asyncio.windows_utils.PIPE
asyncio.windows_utils.PipeHandle(handle)[class] Wrapper for an overlapped pipe handle which is vaguely file-object like.
asyncio.windows_utils.Popen(args, stdin=None, stdout=None, stderr=None, **kwds)[class] Replacement for subprocess.Popen using overlapped pipe handles.
asyncio.windows_utils.pipe(*, duplex=False, overlapped=﴾True﹐ True﴿,\n  bufsize=8192)[function] Like os.pipe() but with overlapped support and using handles not fds.
asyncio.wrap_future(future, *, loop=None)[function] Wrap concurrent.futures.Future object.
atexit
atexit.register(func, *args, **kwargs)register(func, *args, **kwargs) -> func
atexit.unregister(func)unregister(func) -> None
audioop
audioop.add(fragment1, fragment2, width, /)Return a fragment which is the addition of the two samples passed as parameters.
audioop.adpcm2lin(fragment, width, state, /)Decode an Intel/DVI ADPCM coded fragment to a linear fragment.
audioop.alaw2lin(fragment, width, /)Convert sound fragments in a-LAW encoding to linearly encoded sound fragments.
audioop.avg(fragment, width, /)Return the average over all samples in the fragment.
audioop.avgpp(fragment, width, /)Return the average peak-peak value over all samples in the fragment.
audioop.bias(fragment, width, bias, /)Return a fragment that is the original fragment with a bias added to each sample.
audioop.byteswap(fragment, width, /)Convert big-endian samples to little-endian and vice versa.
audioop.cross(fragment, width, /)Return the number of zero crossings in the fragment passed as an argument.
audioop.error()[class] Common base class for all non-exit exceptions.
audioop.findfactor(fragment, reference, /)Return a factor F such that rms(add(fragment, mul(reference, -F))) is minimal.
audioop.findfit(fragment, reference, /)Try to match reference as well as possible to a portion of fragment.
audioop.findmax(fragment, length, /)Search fragment for a slice of specified number of samples with maximum energy.
audioop.getsample(fragment, width, index, /)Return the value of sample index from the fragment.
audioop.lin2adpcm(fragment, width, state, /)Convert samples to 4 bit Intel/DVI ADPCM encoding.
audioop.lin2alaw(fragment, width, /)Convert samples in the audio fragment to a-LAW encoding.
audioop.lin2lin(fragment, width, newwidth, /)Convert samples between 1-, 2-, 3- and 4-byte formats.
audioop.lin2ulaw(fragment, width, /)Convert samples in the audio fragment to u-LAW encoding.
audioop.max(fragment, width, /)Return the maximum of the absolute value of all samples in a fragment.
audioop.maxpp(fragment, width, /)Return the maximum peak-peak value in the sound fragment.
audioop.minmax(fragment, width, /)Return the minimum and maximum values of all samples in the sound fragment.
audioop.mul(fragment, width, factor, /)Return a fragment that has all samples in the original fragment multiplied by the floating-point value factor.
audioop.ratecv(fragment, width, nchannels, inrate, outrate, state, weightA=1,\n  weightB=0, /)Convert the frame rate of the input fragment.
audioop.reverse(fragment, width, /)Reverse the samples in a fragment and returns the modified fragment.
audioop.rms(fragment, width, /)Return the root-mean-square of the fragment, i.e. sqrt(sum(S_i^2)/n).
audioop.tomono(fragment, width, lfactor, rfactor, /)Convert a stereo fragment to a mono fragment.
audioop.tostereo(fragment, width, lfactor, rfactor, /)Generate a stereo fragment from a mono fragment.
audioop.ulaw2lin(fragment, width, /)Convert sound fragments in u-LAW encoding to linearly encoded sound fragments.
await
base64
base64.a85decode(b, *, foldspaces=False, adobe=False,\n  ignorechars=b' \\t\\n\\r\\x0b')[function] Decode the Ascii85 encoded bytes-like object or ASCII string b.
base64.a85encode(b, *, foldspaces=False, wrapcol=0, pad=False, adobe=False)[function] Encode bytes-like object b using Ascii85 and return a bytes object.
base64.b16decode(s, casefold=False)[function] Decode the Base16 encoded bytes-like object or ASCII string s.
base64.b16encode(s)[function] Encode the bytes-like object s using Base16 and return a bytes object.
base64.b32decode(s, casefold=False, map01=None)[function] Decode the base32 encoded bytes-like object or ASCII string s.
base64.b32encode(s)[function] Encode the bytes-like objects using base32 and return a bytes object.
base64.b32hexdecode(s, casefold=False)[function] Decode the base32hex encoded bytes-like object or ASCII string s.
base64.b32hexencode(s)[function] Encode the bytes-like objects using base32hex and return a bytes object.
base64.b64decode(s, altchars=None, validate=False)[function] Decode the Base64 encoded bytes-like object or ASCII string s.
base64.b64encode(s, altchars=None)[function] Encode the bytes-like object s using Base64 and return a bytes object.
base64.b85decode(b)[function] Decode the base85-encoded bytes-like object or ASCII string b
base64.b85encode(b, pad=False)[function] Encode bytes-like object b in base85 format and return a bytes object.
base64.decode(input, output)[function] Decode a file; input and output are binary files.
base64.decodebytes(s)[function] Decode a bytestring of base-64 data into a bytes object.
base64.encode(input, output)[function] Encode a file; input and output are binary files.
base64.encodebytes(s)[function] Encode a bytestring into a bytes object containing multiple lines\nof base-64 data.
base64.standard_b64decode(s)[function] Decode bytes encoded with the standard Base64 alphabet.
base64.standard_b64encode(s)[function] Encode bytes-like object s using the standard Base64 alphabet.
base64.urlsafe_b64decode(s)[function] Decode bytes using the URL- and filesystem-safe Base64 alphabet.
base64.urlsafe_b64encode(s)[function] Encode bytes using the URL- and filesystem-safe Base64 alphabet.
bdb
bdb.Bdb(skip=None)[class] Generic Python debugger base class.
bdb.BdbQuit()[class] Exception to give up completely.
bdb.Breakpoint(file, line, temporary=False, cond=None, funcname=None)[class] Breakpoint class.
bin(number, /)Return the binary representation of an integer.
binascii
binascii.Error()[class] Inappropriate argument value (of correct type).
binascii.Incomplete()[class] Common base class for all non-exit exceptions.
binascii.a2b_base64(data, /, *, strict_mode=False)Decode a line of base64 data.
binascii.a2b_hex(hexstr, /)Binary data of hexadecimal representation.
binascii.a2b_qp(data, header=False)Decode a string of qp-encoded data.
binascii.a2b_uu(data, /)Decode a line of uuencoded data.
binascii.b2a_base64(data, /, *, newline=True)Base64-code line of data.
binascii.b2a_hex(data[, sep[, bytes_per_sep=1]])Hexadecimal representation of binary data.
binascii.b2a_qp(data, quotetabs=False, istext=True, header=False)Encode a string using quoted-printable encoding.
binascii.b2a_uu(data, /, *, backtick=False)Uuencode line of data.
binascii.crc32(data, crc=0, /)Compute CRC-32 incrementally.
binascii.crc_hqx(data, crc, /)Compute CRC-CCITT incrementally.
binascii.hexlify(data[, sep[, bytes_per_sep=1]])Hexadecimal representation of binary data.
binascii.unhexlify(hexstr, /)Binary data of hexadecimal representation.
bisect
bisect.bisect(a, x, lo=0, hi=None, *, key=None)Return the index where to insert item x in list a, assuming a is sorted.
bisect.bisect_left(a, x, lo=0, hi=None, *, key=None)Return the index where to insert item x in list a, assuming a is sorted.
bisect.bisect_right(a, x, lo=0, hi=None, *, key=None)Return the index where to insert item x in list a, assuming a is sorted.
bisect.insort(a, x, lo=0, hi=None, *, key=None)Insert item x in list a, and keep it sorted assuming a is sorted.
bisect.insort_left(a, x, lo=0, hi=None, *, key=None)Insert item x in list a, and keep it sorted assuming a is sorted.
bisect.insort_right(a, x, lo=0, hi=None, *, key=None)Insert item x in list a, and keep it sorted assuming a is sorted.
bool([x])[class] bool(x) -> bool
break
breakpoint(*args, **kws)breakpoint(*args, **kws)
builtins
builtins.ArithmeticError()[class] Base class for arithmetic errors.
builtins.AssertionError()[class] Assertion failed.
builtins.AttributeError()[class] Attribute not found.
builtins.BaseException()[class] Common base class for all exceptions
builtins.BaseExceptionGroup()[class] A combination of multiple unrelated exceptions.
builtins.BlockingIOError()[class] I/O operation would block.
builtins.BrokenPipeError()[class] Broken pipe.
builtins.BufferError()[class] Buffer error.
builtins.BytesWarning()[class] Base class for warnings about bytes and buffer related problems, mostly\nrelated to conversion from str or comparing to str.
builtins.ChildProcessError()[class] Child process error.
builtins.ConnectionAbortedError()[class] Connection aborted.
builtins.ConnectionError()[class] Connection error.
builtins.ConnectionRefusedError()[class] Connection refused.
builtins.ConnectionResetError()[class] Connection reset.
builtins.DeprecationWarning()[class] Base class for warnings about deprecated features.
builtins.EOFError()[class] Read beyond end of file.
builtins.Ellipsis
builtins.EncodingWarning()[class] Base class for warnings about encodings.
builtins.EnvironmentError()[class] Base class for I/O related errors.
builtins.Exception()[class] Common base class for all non-exit exceptions.
builtins.ExceptionGroup()[class] A combination of multiple unrelated exceptions.
builtins.False
builtins.FileExistsError()[class] File already exists.
builtins.FileNotFoundError()[class] File not found.
builtins.FloatingPointError()[class] Floating point operation failed.
builtins.FutureWarning()[class] Base class for warnings about constructs that will change semantically\nin the future.
builtins.GeneratorExit()[class] Request that a generator exit.
builtins.IOError()[class] Base class for I/O related errors.
builtins.ImportError()[class] Import can't find module, or can't find name in module.
builtins.ImportWarning()[class] Base class for warnings about probable mistakes in module imports
builtins.IndentationError()[class] Improper indentation.
builtins.IndexError()[class] Sequence index out of range.
builtins.InterruptedError()[class] Interrupted by signal.
builtins.IsADirectoryError()[class] Operation doesn't work on directories.
builtins.KeyError()[class] Mapping key not found.
builtins.KeyboardInterrupt()[class] Program interrupted by user.
builtins.LookupError()[class] Base class for lookup errors.
builtins.MemoryError()[class] Out of memory.
builtins.ModuleNotFoundError()[class] Module not found.
builtins.NameError()[class] Name not found globally.
builtins.None
builtins.NotADirectoryError()[class] Operation only works on directories.
builtins.NotImplemented
builtins.NotImplementedError()[class] Method or function hasn't been implemented yet.
builtins.OSError()[class] Base class for I/O related errors.
builtins.OverflowError()[class] Result too large to be represented.
builtins.PendingDeprecationWarning()[class] Base class for warnings about features which will be deprecated\nin the future.
builtins.PermissionError()[class] Not enough permissions.
builtins.ProcessLookupError()[class] Process not found.
builtins.RecursionError()[class] Recursion limit exceeded.
builtins.ReferenceError()[class] Weak ref proxy used after referent went away.
builtins.ResourceWarning()[class] Base class for warnings about resource usage.
builtins.RuntimeError()[class] Unspecified run-time error.
builtins.RuntimeWarning()[class] Base class for warnings about dubious runtime behavior.
builtins.StopAsyncIteration()[class] Signal the end from iterator.__anext__().
builtins.StopIteration()[class] Signal the end from iterator.__next__().
builtins.SyntaxError()[class] Invalid syntax.
builtins.SyntaxWarning()[class] Base class for warnings about dubious syntax.
builtins.SystemError()[class] Internal error in the Python interpreter.
builtins.SystemExit()[class] Request to exit from the interpreter.
builtins.TabError()[class] Improper mixture of spaces and tabs.
builtins.TimeoutError()[class] Timeout expired.
builtins.True
builtins.TypeError()[class] Inappropriate argument type.
builtins.UnboundLocalError()[class] Local name referenced but not bound to a value.
builtins.UnicodeDecodeError()[class] Unicode decoding error.
builtins.UnicodeEncodeError()[class] Unicode encoding error.
builtins.UnicodeError()[class] Unicode related error.
builtins.UnicodeTranslateError()[class] Unicode translation error.
builtins.UnicodeWarning()[class] Base class for warnings about Unicode related problems, mostly\nrelated to conversion problems.
builtins.UserWarning()[class] Base class for warnings generated by user code.
builtins.ValueError()[class] Inappropriate argument value (of correct type).
builtins.Warning()[class] Base class for warning categories.
builtins.WindowsError()[class] Base class for I/O related errors.
builtins.ZeroDivisionError()[class] Second argument to a division or modulo operation was zero.
builtins.abs(x, /)Return the absolute value of the argument.
builtins.aiter(async_iterable, /)Return an AsyncIterator for an AsyncIterable object.
builtins.all(iterable, /)Return True if bool(x) is True for all values x in the iterable.
builtins.anext()async anext(aiterator[, default])
builtins.any(iterable, /)Return True if bool(x) is True for any x in the iterable.
builtins.ascii(obj, /)Return an ASCII-only representation of an object.
builtins.bin(number, /)Return the binary representation of an integer.
builtins.bool([x])[class] bool(x) -> bool
builtins.breakpoint(*args, **kws)breakpoint(*args, **kws)
builtins.bytearray([source[, encoding[, errors]]])[class] bytearray(iterable_of_ints) -> bytearray\nbytearray(string, encoding[, errors]) -> bytearray\nbytearray(bytes_or_buffer) -> mutable copy of bytes_or_buffer\nbytearray(int) -> bytes array of size given by the parameter initialized with null bytes\nbytearray() -> empty bytes array
builtins.bytes([source[, encoding[, errors]]])[class] bytes(iterable_of_ints) -> bytes\nbytes(string, encoding[, errors]) -> bytes\nbytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\nbytes(int) -> bytes object of size given by the parameter initialized with null bytes\nbytes() -> empty bytes object
builtins.callable(obj, /)Return whether the object is callable (i.e., some kind of function).
builtins.chr(i, /)Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.
builtins.classmethod(function)[class] classmethod(function) -> method
builtins.compile(source, filename, mode, flags=0, dont_inherit=False,\n  optimize=-1, *, _feature_version=-1)Compile source into a code object that can be executed by exec() or eval().
builtins.complex(real=0, imag=0)[class] Create a complex number from a real part and an optional imaginary part.
builtins.copyright()interactive prompt objects for printing the license text, a list of\ncontributors and the copyright notice.
builtins.credits()interactive prompt objects for printing the license text, a list of\ncontributors and the copyright notice.
builtins.delattr(obj, name, /)Deletes the named attribute from the given object.
builtins.dict(**kwarg)[class] dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)
builtins.dict(iterable, **kwarg)[class] dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)
builtins.dict(mapping, **kwarg)[class] dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)
builtins.dir([object])Show attributes of an object.
builtins.divmod(x, y, /)Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.
builtins.enumerate(iterable, start=0)[class] Return an enumerate object.
builtins.eval(source, globals=None, locals=None, /)Evaluate the given source in the context of globals and locals.
builtins.exec(source, globals=None, locals=None, /, *, closure=None)Execute the given source in the context of globals and locals.
builtins.exit(code=None)
builtins.filter(function, iterable)[class] filter(function or None, iterable) --> filter object
builtins.float(x=0, /)[class] Convert a string or number to a floating point number, if possible.
builtins.format(value, format_spec='', /)Return type(value).__format__(value, format_spec)
builtins.frozenset([iterable])[class] frozenset() -> empty frozenset object\nfrozenset(iterable) -> frozenset object
builtins.getattr(object, name[, default])Get a named attribute from an object.
builtins.globals()Return the dictionary containing the current scope's global variables.
builtins.hasattr(obj, name, /)Return whether the object has an attribute with the given name.
builtins.hash(obj, /)Return the hash value for the given object.
builtins.help(*args, **kwds)Define the builtin 'help'.
builtins.hex(number, /)Return the hexadecimal representation of an integer.
builtins.id(obj, /)Return the identity of an object.
builtins.input(prompt='', /)Read a string from standard input.  The trailing newline is stripped.
builtins.int([x])[class] int([x]) -> integer\nint(x, base=10) -> integer
builtins.int(x, base=10)[class] int([x]) -> integer\nint(x, base=10) -> integer
builtins.isinstance(obj, class_or_tuple, /)Return whether an object is an instance of a class or of a subclass thereof.
builtins.issubclass(cls, class_or_tuple, /)Return whether 'cls' is derived from another class or is the same class.
builtins.iter(object[, sentinel])Get an iterator from an object.
builtins.len(obj, /)Return the number of items in a container.
builtins.license()interactive prompt objects for printing the license text, a list of\ncontributors and the copyright notice.
builtins.list(iterable=﴾﴿, /)[class] Built-in mutable sequence.
builtins.locals()Return a dictionary containing the current scope's local variables.
builtins.map(function, iterable, ...)[class] map(func, *iterables) --> map object
builtins.max(arg1, arg2, *args[, key])max(iterable, *[, default=obj, key=func]) -> value\nmax(arg1, arg2, *args, *[, key=func]) -> value
builtins.max(iterable, *[, key, default])max(iterable, *[, default=obj, key=func]) -> value\nmax(arg1, arg2, *args, *[, key=func]) -> value
builtins.memoryview(object)[class] Create a new memoryview object which references the given object.
builtins.min(arg1, arg2, *args[, key])min(iterable, *[, default=obj, key=func]) -> value\nmin(arg1, arg2, *args, *[, key=func]) -> value
builtins.min(iterable, *[, key, default])min(iterable, *[, default=obj, key=func]) -> value\nmin(arg1, arg2, *args, *[, key=func]) -> value
builtins.next(iterator[, default])Return the next item from the iterator.
builtins.object()[class] The base class of the class hierarchy.
builtins.oct(number, /)Return the octal representation of an integer.
builtins.open(file, mode='r', buffering=-1, encoding=None, errors=None,\n  newline=None, closefd=True, opener=None)Open file and return a stream.  Raise OSError upon failure.
builtins.ord(c, /)Return the Unicode code point for a one-character string.
builtins.pow(base, exp, mod=None)Equivalent to base**exp with 2 arguments or base**exp % mod with 3 arguments
builtins.print(*args, *, sep=' ', end='\\n', file=None, flush=False)Prints the values to a stream, or to sys.stdout by default.
builtins.property(fget=None, fset=None, fdel=None, doc=None)[class] Property attribute.
builtins.quit(code=None)
builtins.range(start, stop[, step])[class] range(stop) -> range object\nrange(start, stop[, step]) -> range object
builtins.range(stop)[class] range(stop) -> range object\nrange(start, stop[, step]) -> range object
builtins.repr(obj, /)Return the canonical string representation of the object.
builtins.reversed(sequence, /)[class] Return a reverse iterator over the values of the given sequence.
builtins.round(number, ndigits=None)Round a number to a given precision in decimal digits.
builtins.set([iterable])[class] set() -> new empty set object\nset(iterable) -> new set object
builtins.setattr(obj, name, value, /)Sets the named attribute on the given object to the specified value.
builtins.slice(start, stop[, step])[class] slice(stop)\nslice(start, stop[, step])
builtins.slice(stop)[class] slice(stop)\nslice(start, stop[, step])
builtins.sorted(iterable, /, *, key=None, reverse=False)Return a new list containing all items from the iterable in ascending order.
builtins.staticmethod(function)[class] staticmethod(function) -> method
builtins.str(object='')[class] str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str
builtins.str(object=b'', encoding='utf-8', errors='strict')[class] str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str
builtins.sum(iterable, /, start=0)Return the sum of a 'start' value (default: 0) plus an iterable of numbers
builtins.super([type[, object-or-type]])[class] super() -> same as super(__class__, <first argument>)\nsuper(type) -> unbound super object\nsuper(type, obj) -> bound super object; requires isinstance(obj, type)\nsuper(type, type2) -> bound super object; requires issubclass(type2, type)\nTypical use to call a cooperative superclass method:\nclass C(B):\n    def meth(self, arg):\n        super().meth(arg)\nThis works for class methods too:\nclass C(B):\n    @classmethod\n    def cmeth(cls, arg):\n        super().cmeth(arg)
builtins.tuple(iterable=﴾﴿, /)[class] Built-in immutable sequence.
builtins.type(name, bases, dict)[class] type(object) -> the object's type\ntype(name, bases, dict, **kwds) -> a new type
builtins.type(object)[class] type(object) -> the object's type\ntype(name, bases, dict, **kwds) -> a new type
builtins.vars([object])Show vars.
builtins.zip(*iterables)[class] zip(*iterables, strict=False) --> Yield tuples until an input is exhausted.
bytearray([source[, encoding[, errors]]])[class] bytearray(iterable_of_ints) -> bytearray\nbytearray(string, encoding[, errors]) -> bytearray\nbytearray(bytes_or_buffer) -> mutable copy of bytes_or_buffer\nbytearray(int) -> bytes array of size given by the parameter initialized with null bytes\nbytearray() -> empty bytes array
bytes([source[, encoding[, errors]]])[class] bytes(iterable_of_ints) -> bytes\nbytes(string, encoding[, errors]) -> bytes\nbytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\nbytes(int) -> bytes object of size given by the parameter initialized with null bytes\nbytes() -> empty bytes object
bz2
bz2.BZ2Compressor(compresslevel=9, /)[class] Create a compressor object for compressing data incrementally.
bz2.BZ2Decompressor()[class] Create a decompressor object for decompressing data incrementally.
bz2.BZ2File(filename, mode='r', *, compresslevel=9)[class] A file object providing transparent bzip2 (de)compression.
bz2.compress(data, compresslevel=9)[function] Compress a block of data.
bz2.decompress(data)[function] Decompress a block of data.
bz2.open(filename, mode='rb', compresslevel=9, encoding=None, errors=None,\n  newline=None)[function] Open a bzip2-compressed file in binary or text mode.
cProfile
cProfile.Profile(timer=None, timeunit=0.0, subcalls=True, builtins=True)[class] Profile(timer=None, timeunit=None, subcalls=True, builtins=True)
cProfile.run(statement, filename=None, sort=-1)[function] Run statement under profiler optionally saving results in filename
cProfile.runctx(statement, globals, locals, filename=None, sort=-1)[function] Run statement under profiler, supplying your own globals and locals,\noptionally saving results in filename.
calendar
calendar.APRIL
calendar.AUGUST
calendar.Calendar(firstweekday=0)[class] Base calendar class. This class doesn't do any formatting. It simply\nprovides data to subclasses.
calendar.DECEMBER
calendar.Day(*values)[class] Enum where members are also (and must be) ints
calendar.FEBRUARY
calendar.FRIDAY
calendar.HTMLCalendar(firstweekday=0)[class] This calendar returns complete HTML pages.
calendar.IllegalMonthError(month)[class] Inappropriate argument value (of correct type).
calendar.IllegalWeekdayError(weekday)[class] Inappropriate argument value (of correct type).
calendar.JANUARY
calendar.JULY
calendar.JUNE
calendar.LocaleHTMLCalendar(firstweekday=0, locale=None)[class] This class can be passed a locale name in the constructor and will return\nmonth and weekday names in the specified locale.
calendar.LocaleTextCalendar(firstweekday=0, locale=None)[class] This class can be passed a locale name in the constructor and will return\nmonth and weekday names in the specified locale.
calendar.MARCH
calendar.MAY
calendar.MONDAY
calendar.Month(*values)[class] Enum where members are also (and must be) ints
calendar.NOVEMBER
calendar.OCTOBER
calendar.SATURDAY
calendar.SEPTEMBER
calendar.SUNDAY
calendar.THURSDAY
calendar.TUESDAY
calendar.TextCalendar(firstweekday=0)[class] Subclass of Calendar that outputs a calendar as a simple plain text\nsimilar to the UNIX program cal.
calendar.WEDNESDAY
calendar.calendar(theyear, w=2, l=1, c=6, m=3)[method] Returns a year's calendar as a multi-line string.
calendar.day_abbr
calendar.day_name
calendar.firstweekday()[method]
calendar.isleap(year)[function] Return True for leap years, False for non-leap years.
calendar.leapdays(y1, y2)[function] Return number of leap years in range [y1, y2).\nAssume y1 <= y2.
calendar.month(theyear, themonth, w=0, l=0)[method] Return a month's calendar string (multi-line).
calendar.month_abbr
calendar.month_name
calendar.monthcalendar(year, month)[method] Return a matrix representing a month's calendar.\nEach row represents a week; days outside this month are zero.
calendar.monthrange(year, month)[function] Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for\nyear, month.
calendar.prcal(theyear, w=0, l=0, c=6, m=3)[method] Print a year's calendar.
calendar.prmonth(theyear, themonth, w=0, l=0)[method] Print a month's calendar.
calendar.setfirstweekday(firstweekday)[function]
calendar.timegm(tuple)[function] Unrelated but handy function to calculate Unix timestamp from GMT.
calendar.weekday(year, month, day)[function] Return weekday (0-6 ~ Mon-Sun) for year, month (1-12), day (1-31).
calendar.weekheader(width)[method] Return a header for a week.
callable(obj, /)Return whether the object is callable (i.e., some kind of function).
case
cgi
cgi.FieldStorage(fp=None, headers=None, outerboundary=b'', environ=os.environ,\n  keep_blank_values=0, strict_parsing=0, limit=None, encoding='utf-8', errors='replace',\n  max_num_fields=None, separator='&')[class] Store a sequence of fields, reading multipart/form-data.
cgi.MiniFieldStorage(name, value)[class] Like FieldStorage, for use when no file uploads are possible.
cgi.parse(fp=None, environ=os.environ, keep_blank_values=0, strict_parsing=0,\n  separator='&')[function] Parse a query in the environment or from a file (default stdin)
cgi.parse_header(line)[function] Parse a Content-type like header.
cgi.parse_multipart(fp, pdict, encoding='utf-8', errors='replace',\n  separator='&')[function] Parse multipart input.
cgi.print_arguments()[function]
cgi.print_directory()[function] Dump the current directory as HTML.
cgi.print_environ(environ=os.environ)[function] Dump the shell environment as HTML.
cgi.print_environ_usage()[function] Dump a list of environment variables used by CGI as HTML.
cgi.print_exception(type=None, value=None, tb=None, limit=None)[function]
cgi.print_form(form)[function] Dump the contents of a form as HTML.
cgi.test(environ=os.environ)[function] Robust test CGI script, usable as main program.
cgitb
cgitb.Hook(display=1, logdir=None, context=5, file=None, format='html')[class] A hook to replace sys.excepthook that shows tracebacks in HTML.
cgitb.enable(display=1, logdir=None, context=5, format='html')[function] Install an exception handler that formats tracebacks as HTML.
cgitb.grey(text)[function]
cgitb.handler(info=None)[method]
cgitb.html(einfo, context=5)[function] Return a nice HTML document describing a given traceback.
cgitb.html_escape(s, quote=True)[function] Replace special characters "&", "<" and ">" to HTML-safe sequences.\nIf the optional flag quote is true (the default), the quotation mark\ncharacters, both double quote (") and single quote (') characters are also\ntranslated.
cgitb.lookup(name, frame, locals)[function] Find the value for a given name in the given environment.
cgitb.reset()[function] Return a string that resets the CGI and browser to a known state.
cgitb.scanvars(reader, frame, locals)[function] Scan one logical line of Python and look up values of variables used.
cgitb.small(text)[function]
cgitb.strong(text)[function]
cgitb.text(einfo, context=5)[function] Return a plain text document describing a given traceback.
chr(i, /)Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.
chunk
chunk.Chunk(file, align=True, bigendian=True, inclheader=False)[class]
class
classmethod(function)[class] classmethod(function) -> method
cmath
cmath.acos(z, /)Return the arc cosine of z.
cmath.acosh(z, /)Return the inverse hyperbolic cosine of z.
cmath.asin(z, /)Return the arc sine of z.
cmath.asinh(z, /)Return the inverse hyperbolic sine of z.
cmath.atan(z, /)Return the arc tangent of z.
cmath.atanh(z, /)Return the inverse hyperbolic tangent of z.
cmath.cos(z, /)Return the cosine of z.
cmath.cosh(z, /)Return the hyperbolic cosine of z.
cmath.e
cmath.exp(z, /)Return the exponential value e**z.
cmath.inf
cmath.infj
cmath.isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)Determine whether two complex numbers are close in value.
cmath.isfinite(z, /)Return True if both the real and imaginary parts of z are finite, else False.
cmath.isinf(z, /)Checks if the real or imaginary part of z is infinite.
cmath.isnan(z, /)Checks if the real or imaginary part of z not a number (NaN).
cmath.log(x[, base])log(z[, base]) -> the logarithm of z to the given base.
cmath.log10(z, /)Return the base-10 logarithm of z.
cmath.nan
cmath.nanj
cmath.phase(z, /)Return argument, also known as the phase angle, of a complex.
cmath.pi
cmath.polar(z, /)Convert a complex from rectangular coordinates to polar coordinates.
cmath.rect(r, phi, /)Convert from polar coordinates to rectangular coordinates.
cmath.sin(z, /)Return the sine of z.
cmath.sinh(z, /)Return the hyperbolic sine of z.
cmath.sqrt(z, /)Return the square root of z.
cmath.tan(z, /)Return the tangent of z.
cmath.tanh(z, /)Return the hyperbolic tangent of z.
cmath.tau
cmd
cmd.Cmd(completekey='tab', stdin=None, stdout=None)[class] A simple framework for writing line-oriented command interpreters.
code
code.InteractiveConsole(locals=None, filename='<console>')[class] Closely emulate the behavior of the interactive Python interpreter.
code.InteractiveInterpreter(locals=None)[class] Base class for InteractiveConsole.
code.compile_command(source, filename='<input>', symbol='single')[function] Compile a command and determine whether it is incomplete.
code.interact(banner=None, readfunc=None, local=None, exitmsg=None)[function] Closely emulate the interactive Python interpreter.
codecs
codecs.BOM
codecs.BOM32_BE
codecs.BOM32_LE
codecs.BOM64_BE
codecs.BOM64_LE
codecs.BOM_BE
codecs.BOM_LE
codecs.BOM_UTF16
codecs.BOM_UTF16_BE
codecs.BOM_UTF16_LE
codecs.BOM_UTF32
codecs.BOM_UTF32_BE
codecs.BOM_UTF32_LE
codecs.BOM_UTF8
codecs.Codec()[class] Defines the interface for stateless encoders/decoders.
codecs.CodecInfo(encode, decode, streamreader=None, streamwriter=None,\n  incrementalencoder=None, incrementaldecoder=None, name=None, *, _is_text_encoding=None)[class] Codec details when looking up the codec registry
codecs.EncodedFile(file, data_encoding, file_encoding=None, errors='strict')[function] Return a wrapped version of file which provides transparent\nencoding translation.
codecs.IncrementalDecoder(errors='strict')[class] An IncrementalDecoder decodes an input in multiple steps. The input can\nbe passed piece by piece to the decode() method. The IncrementalDecoder\nremembers the state of the decoding process between calls to decode().
codecs.IncrementalEncoder(errors='strict')[class] An IncrementalEncoder encodes an input in multiple steps. The input can\nbe passed piece by piece to the encode() method. The IncrementalEncoder\nremembers the state of the encoding process between calls to encode().
codecs.StreamReader(stream, errors='strict')[class] Defines the interface for stateless encoders/decoders.
codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')[class] StreamReaderWriter instances allow wrapping streams which\nwork in both read and write modes.
codecs.StreamRecoder(stream, encode, decode, Reader, Writer, errors='strict')[class] StreamRecoder instances translate data from one encoding to another.
codecs.StreamWriter(stream, errors='strict')[class] Defines the interface for stateless encoders/decoders.
codecs.backslashreplace_errors(exception)Implements the 'backslashreplace' error handling, which replaces malformed data with a backslashed escape sequence.
codecs.decode(obj, encoding='utf-8', errors='strict')Decodes obj using the codec registered for encoding.
codecs.encode(obj, encoding='utf-8', errors='strict')Encodes obj using the codec registered for encoding.
codecs.getdecoder(encoding)[function] Lookup up the codec for the given encoding and return\nits decoder function.
codecs.getencoder(encoding)[function] Lookup up the codec for the given encoding and return\nits encoder function.
codecs.getincrementaldecoder(encoding)[function] Lookup up the codec for the given encoding and return\nits IncrementalDecoder class or factory function.
codecs.getincrementalencoder(encoding)[function] Lookup up the codec for the given encoding and return\nits IncrementalEncoder class or factory function.
codecs.getreader(encoding)[function] Lookup up the codec for the given encoding and return\nits StreamReader class or factory function.
codecs.getwriter(encoding)[function] Lookup up the codec for the given encoding and return\nits StreamWriter class or factory function.
codecs.ignore_errors(exception)Implements the 'ignore' error handling, which ignores malformed data and continues.
codecs.iterdecode(iterator, encoding, errors='strict', **kwargs)[function] Decoding iterator.
codecs.iterencode(iterator, encoding, errors='strict', **kwargs)[function] Encoding iterator.
codecs.lookup(encoding, /)Looks up a codec tuple in the Python codec registry and returns a CodecInfo object.
codecs.lookup_error(name, /)lookup_error(errors) -> handler
codecs.namereplace_errors(exception)Implements the 'namereplace' error handling, which replaces an unencodable character with a \\N{...} escape sequence.
codecs.open(filename, mode='r', encoding=None, errors='strict', buffering=-1)[function] Open an encoded file using the given mode and return\na wrapped version providing transparent encoding/decoding.
codecs.register(search_function, /)Register a codec search function.
codecs.register_error(errors, handler, /)Register the specified error handler under the name errors.
codecs.replace_errors(exception)Implements the 'replace' error handling, which replaces malformed data with a replacement marker.
codecs.strict_errors(exception)Implements the 'strict' error handling, which raises a UnicodeError on coding errors.
codecs.xmlcharrefreplace_errors(exception)Implements the 'xmlcharrefreplace' error handling, which replaces an unencodable character with the appropriate XML character reference.
codeop
codeop.CommandCompiler()[class] Instances of this class have __call__ methods identical in\nsignature to compile_command; the difference is that if the\ninstance compiles program text containing a __future__ statement,\nthe instance 'remembers' and compiles all subsequent program texts\nwith the statement in force.
codeop.Compile()[class] Instances of this class behave much like the built-in compile\nfunction, but if one is used to compile text containing a future\nstatement, it "remembers" and compiles all subsequent program texts\nwith the statement in force.
codeop.compile_command(source, filename='<input>', symbol='single')[function] Compile a command and determine whether it is incomplete.
collections
collections.ChainMap(*maps)[class] A ChainMap groups multiple dicts (or other mappings) together\nto create a single, updateable view.
collections.Counter(iterable=None, /, **kwds)[class] Dict subclass for counting hashable items.  Sometimes called a bag\nor multiset.  Elements are stored as dictionary keys and their counts\nare stored as dictionary values.
collections.OrderedDict([items])[class] Dictionary that remembers insertion order
collections.UserDict(dict=None, /, **kwargs)[class] A MutableMapping is a generic container for associating\nkey/value pairs.
collections.UserList(initlist=None)[class] A more or less complete user-defined wrapper around list objects.
collections.UserString(seq)[class] All the operations on a read-only sequence.
collections.abc
collections.abc.AsyncGenerator()[class]
collections.abc.AsyncIterable()[class]
collections.abc.AsyncIterator()[class]
collections.abc.Awaitable()[class]
collections.abc.Buffer()[class]
collections.abc.ByteString()[class] This unifies bytes and bytearray.
collections.abc.Callable()[class]
collections.abc.Collection()[class]
collections.abc.Container()[class]
collections.abc.Coroutine()[class]
collections.abc.Generator()[class]
collections.abc.Hashable()[class]
collections.abc.ItemsView(mapping)[class] A set is a finite, iterable container.
collections.abc.Iterable()[class]
collections.abc.Iterator()[class]
collections.abc.KeysView(mapping)[class] A set is a finite, iterable container.
collections.abc.Mapping()[class] A Mapping is a generic container for associating key/value\npairs.
collections.abc.MappingView(mapping)[class]
collections.abc.MutableMapping()[class] A MutableMapping is a generic container for associating\nkey/value pairs.
collections.abc.MutableSequence()[class] All the operations on a read-write sequence.
collections.abc.MutableSet()[class] A mutable set is a finite, iterable container.
collections.abc.Reversible()[class]
collections.abc.Sequence()[class] All the operations on a read-only sequence.
collections.abc.Set()[class] A set is a finite, iterable container.
collections.abc.Sized()[class]
collections.abc.ValuesView(mapping)[class]
collections.defaultdict([default_factory[, ...]])[class] defaultdict(default_factory=None, /, [...]) --> dict with default factory
collections.deque([iterable[, maxlen]])[class] deque([iterable[, maxlen]]) --> deque object
collections.namedtuple(typename, field_names, *, rename=False, defaults=None,\n  module=None)[function] Returns a new subclass of tuple with named fields.
colorsys
colorsys.hls_to_rgb(h, l, s)[function]
colorsys.hsv_to_rgb(h, s, v)[function]
colorsys.rgb_to_hls(r, g, b)[function]
colorsys.rgb_to_hsv(r, g, b)[function]
colorsys.rgb_to_yiq(r, g, b)[function]
colorsys.yiq_to_rgb(y, i, q)[function]
compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1, *,\n  _feature_version=-1)Compile source into a code object that can be executed by exec() or eval().
compileall
compileall.compile_dir(dir, maxlevels=None, ddir=None, force=False, rx=None,\n  quiet=0, legacy=False, optimize=-1, workers=1, invalidation_mode=None, *,\n  stripdir=None, prependdir=None, limit_sl_dest=None, hardlink_dupes=False)[function] Byte-compile all modules in the given directory tree.
compileall.compile_file(fullname, ddir=None, force=False, rx=None, quiet=0,\n  legacy=False, optimize=-1, invalidation_mode=None, *, stripdir=None, prependdir=None,\n  limit_sl_dest=None, hardlink_dupes=False)[function] Byte-compile one file.
compileall.compile_path(skip_curdir=1, maxlevels=0, force=False, quiet=0,\n  legacy=False, optimize=-1, invalidation_mode=None)[function] Byte-compile all module on sys.path.
complex(real=0, imag=0)[class] Create a complex number from a real part and an optional imaginary part.
concurrent
concurrent.futures
concurrent.futures.ALL_COMPLETED
concurrent.futures.BrokenExecutor()[class] Raised when a executor has become non-functional after a severe failure.
concurrent.futures.CancelledError()[class] The Future was cancelled.
concurrent.futures.Executor()[class] This is an abstract base class for concrete asynchronous executors.
concurrent.futures.FIRST_COMPLETED
concurrent.futures.FIRST_EXCEPTION
concurrent.futures.Future()[class] Represents the result of an asynchronous computation.
concurrent.futures.ProcessPoolExecutor(max_workers=None, mp_context=None,\n  initializer=None, initargs=﴾﴿, *, max_tasks_per_child=None)[class] This is an abstract base class for concrete asynchronous executors.
concurrent.futures.ThreadPoolExecutor(max_workers=None, thread_name_prefix='',\n  initializer=None, initargs=﴾﴿)[class] This is an abstract base class for concrete asynchronous executors.
concurrent.futures.TimeoutError()[class] Timeout expired.
concurrent.futures.as_completed(fs, timeout=None)[function] An iterator over the given futures that yields each as it completes.
concurrent.futures.wait(fs, timeout=None, return_when='ALL_COMPLETED')[function] Wait for the futures in the given sequence to complete.
configparser
configparser.BasicInterpolation()[class] Interpolation as implemented in the classic ConfigParser.
configparser.ConfigParser(defaults=None, dict_type=<??>, allow_no_value=False,\n  *, delimiters=﴾'='﹐ ':'﴿, comment_prefixes=﴾'#'﹐ ';'﴿,\n  inline_comment_prefixes=None, strict=True, empty_lines_in_values=True, default_section='DEFAULT',\n  interpolation=<??>, converters=<??>)[class] ConfigParser implementing interpolation.
configparser.ConverterMapping(parser)[class] Enables reuse of get*() methods between the parser and section proxies.
configparser.DEFAULTSECT
configparser.DuplicateOptionError(section, option, source=None, lineno=None)[class] Raised by strict parsers when an option is repeated in an input source.
configparser.DuplicateSectionError(section, source=None, lineno=None)[class] Raised when a section is repeated in an input source.
configparser.ExtendedInterpolation()[class] Advanced variant of interpolation, supports the syntax used by\n`zc.buildout`. Enables interpolation between sections.
configparser.Interpolation()[class] Dummy interpolation that passes the value through with no changes.
configparser.InterpolationDepthError(option, section, rawval)[class] Raised when substitutions are nested too deeply.
configparser.InterpolationError(option, section, msg)[class] Base class for interpolation-related exceptions.
configparser.InterpolationMissingOptionError(option, section, rawval,\n  reference)[class] A string substitution required a setting which was not available.
configparser.InterpolationSyntaxError(option, section, msg)[class] Raised when the source text contains invalid syntax.
configparser.LegacyInterpolation(*args, **kwargs)[class] Deprecated interpolation used in old versions of ConfigParser.\nUse BasicInterpolation or ExtendedInterpolation instead.
configparser.MAX_INTERPOLATION_DEPTH
configparser.MissingSectionHeaderError(filename, lineno, line)[class] Raised when a key-value pair is found before any section header.
configparser.NoOptionError(option, section)[class] A requested option was not found.
configparser.NoSectionError(section)[class] Raised when no section matches a requested option.
configparser.ParsingError(source)[class] Raised when a configuration file does not follow legal syntax.
configparser.RawConfigParser(defaults=None, dict_type=<??>,\n  allow_no_value=False, *, delimiters=﴾'='﹐ ':'﴿, comment_prefixes=﴾'#'﹐ ';'﴿,\n  inline_comment_prefixes=None, strict=True, empty_lines_in_values=True, default_section='DEFAULT',\n  interpolation=<??>, converters=<??>)[class] ConfigParser that does not do interpolation.
configparser.SectionProxy(parser, name)[class] A proxy for a single section from a parser.
contextlib
contextlib.AbstractAsyncContextManager()[class] An abstract base class for asynchronous context managers.
contextlib.AbstractContextManager()[class] An abstract base class for context managers.
contextlib.AsyncExitStack()[class] Async context manager for dynamic management of a stack of exit\ncallbacks.
contextlib.ContextDecorator()[class] A base class or mixin that enables context managers to work as decorators.
contextlib.ExitStack()[class] Context manager for dynamic management of a stack of exit callbacks.
contextlib.aclosing(thing)[class] Async context manager for safely finalizing an asynchronously cleaned-up\nresource such as an async generator, calling its ``aclose()`` method.
contextlib.asynccontextmanager(func)[function] @asynccontextmanager decorator.
contextlib.chdir(path)[class] Non thread-safe context manager to change the current working directory.
contextlib.closing(thing)[class] Context to automatically close something at the end of a block.
contextlib.contextmanager(func)[function] @contextmanager decorator.
contextlib.nullcontext(enter_result=None)[class] Context manager that does no additional processing.
contextlib.redirect_stderr(new_target)[class] Context manager for temporarily redirecting stderr to another file.
contextlib.redirect_stdout(new_target)[class] Context manager for temporarily redirecting stdout to another file.
contextlib.suppress(*exceptions)[class] Context manager to suppress specified exceptions
contextvars
contextvars.Context()[class]
contextvars.ContextVar(name[, *, default])[class]
contextvars.Token()[class]
contextvars.copy_context()
continue
copy
copy.Error()[class] Common base class for all non-exit exceptions.
copy.copy(x)[function] Shallow copy operation on arbitrary Python objects.
copy.deepcopy(x, memo=None, _nil=[])[function] Deep copy operation on arbitrary Python objects.
copyreg
copyreg.add_extension(module, name, code)[function] Register an extension code.
copyreg.clear_extension_cache()[function]
copyreg.constructor(object)[function]
copyreg.pickle(ob_type, pickle_function, constructor_ob=None)[function]
copyreg.remove_extension(module, name, code)[function] Unregister an extension code.  For testing only.
copyright()interactive prompt objects for printing the license text, a list of\ncontributors and the copyright notice.
credits()interactive prompt objects for printing the license text, a list of\ncontributors and the copyright notice.
csv
csv.Dialect()[class] Describe a CSV dialect.
csv.DictReader(f, fieldnames=None, restkey=None, restval=None, dialect='excel',\n  *args, **kwds)[class]
csv.DictWriter(f, fieldnames, restval='', extrasaction='raise',\n  dialect='excel', *args, **kwds)[class]
csv.Error()[class] Common base class for all non-exit exceptions.
csv.QUOTE_ALL
csv.QUOTE_MINIMAL
csv.QUOTE_NONE
csv.QUOTE_NONNUMERIC
csv.QUOTE_NOTNULL
csv.QUOTE_STRINGS
csv.Sniffer()[class] "Sniffs" the format of a CSV file (i.e. delimiter, quotechar)\nReturns a Dialect object.
csv.excel()[class] Describe the usual properties of Excel-generated CSV files.
csv.excel_tab()[class] Describe the usual properties of Excel-generated TAB-delimited files.
csv.field_size_limit([new_limit])Sets an upper limit on parsed fields.
csv.get_dialect(name)Return the dialect instance associated with name.
csv.list_dialects()Return a list of all known dialect names.
csv.reader(csvfile, dialect='excel', **fmtparams)csv_reader = reader(iterable [, dialect='excel']\n                        [optional keyword args])\n    for row in csv_reader:\n        process(row)
csv.register_dialect(name[, dialect[, **fmtparams]])Create a mapping from a string name to a dialect class.\ndialect = csv.register_dialect(name[, dialect[, **fmtparams]])
csv.unix_dialect()[class] Describe the usual properties of Unix-generated CSV files.
csv.unregister_dialect(name)Delete the name/dialect mapping associated with a string name.
csv.writer(csvfile, dialect='excel', **fmtparams)csv_writer = csv.writer(fileobj [, dialect='excel']\n                            [optional keyword args])\n    for row in sequence:\n        csv_writer.writerow(row)
ctypes
ctypes.ARRAY(typ, len)[function]
ctypes.ArgumentError()[class] Common base class for all non-exit exceptions.
ctypes.Array(*args)[class]
ctypes.BigEndianStructure(*args, **kw)[class] Structure with big endian byte order
ctypes.BigEndianUnion()[class] Union with big endian byte order
ctypes.CDLL(name, mode=0, handle=None, use_errno=False, use_last_error=False,\n  winmode=None)[class] An instance of this class represents a loaded dll/shared\nlibrary, exporting functions using the standard C calling\nconvention (named 'cdecl' on Windows).
ctypes.CFUNCTYPE(restype, *argtypes, **kw)[function] CFUNCTYPE(restype, *argtypes,\n             use_errno=False, use_last_error=False) -> function prototype.
ctypes.DEFAULT_MODE
ctypes.DllCanUnloadNow()[function]
ctypes.DllGetClassObject(rclsid, riid, ppv)[function]
ctypes.FormatError([code])FormatError([integer]) -> string
ctypes.GetLastError()
ctypes.HRESULT()[class]
ctypes.LibraryLoader(dlltype)[class]
ctypes.LittleEndianStructure(*args, **kw)[class] Structure base class
ctypes.LittleEndianUnion()[class] Union base class
ctypes.OleDLL(name, mode=0, handle=None, use_errno=False, use_last_error=False,\n  winmode=None)[class] This class represents a dll exporting functions using the\nWindows stdcall calling convention, and returning HRESULT.\nHRESULT error values are automatically raised as OSError\nexceptions.
ctypes.POINTER(type)
ctypes.PYFUNCTYPE(restype, *argtypes)[function]
ctypes.PyDLL(name, mode=0, handle=None, use_errno=False, use_last_error=False,\n  winmode=None)[class] This class represents the Python library itself.  It allows\naccessing Python API functions.  The GIL is not released, and\nPython exceptions are handled correctly.
ctypes.RTLD_GLOBAL
ctypes.RTLD_LOCAL
ctypes.SIZEOF_TIME_T
ctypes.SetPointerType(pointer, cls)[function]
ctypes.Structure(*args, **kw)[class] Structure base class
ctypes.Union(*args, **kw)[class] Union base class
ctypes.WINFUNCTYPE(restype, *argtypes, **kw)[function]
ctypes.WinDLL(name, mode=0, handle=None, use_errno=False, use_last_error=False,\n  winmode=None)[class] This class represents a dll exporting functions using the\nWindows stdcall calling convention.
ctypes.WinError(code=None, descr=None)[function]
ctypes.addressof(obj)addressof(C instance) -> integer\nReturn the address of the C instance internal buffer
ctypes.alignment(obj_or_type)alignment(C type) -> integer\nalignment(C instance) -> integer\nReturn the alignment requirements of a C instance
ctypes.byref(obj[, offset])byref(C instance[, offset=0]) -> byref-object\nReturn a pointer lookalike to a C instance, only usable\nas function argument
ctypes.c_bool()[class]
ctypes.c_buffer(init, size=None)[function] create_string_buffer(aBytes) -> character array\ncreate_string_buffer(anInteger) -> character array\ncreate_string_buffer(aBytes, anInteger) -> character array
ctypes.c_byte()[class]
ctypes.c_char()[class]
ctypes.c_char_p()[class]
ctypes.c_double()[class]
ctypes.c_float()[class]
ctypes.c_int()[class]
ctypes.c_int16()[class]
ctypes.c_int32()[class]
ctypes.c_int64()[class]
ctypes.c_int8()[class]
ctypes.c_long()[class]
ctypes.c_longdouble()[class]
ctypes.c_longlong()[class]
ctypes.c_short()[class]
ctypes.c_size_t()[class]
ctypes.c_ssize_t()[class]
ctypes.c_time_t()[class]
ctypes.c_ubyte()[class]
ctypes.c_uint()[class]
ctypes.c_uint16()[class]
ctypes.c_uint32()[class]
ctypes.c_uint64()[class]
ctypes.c_uint8()[class]
ctypes.c_ulong()[class]
ctypes.c_ulonglong()[class]
ctypes.c_ushort()[class]
ctypes.c_void_p()[class]
ctypes.c_voidp()[class]
ctypes.c_wchar()[class]
ctypes.c_wchar_p()[class]
ctypes.cast(obj, typ)[function]
ctypes.cdll
ctypes.create_string_buffer(init, size=None)[function] create_string_buffer(aBytes) -> character array\ncreate_string_buffer(anInteger) -> character array\ncreate_string_buffer(aBytes, anInteger) -> character array
ctypes.create_unicode_buffer(init, size=None)[function] create_unicode_buffer(aString) -> character array\ncreate_unicode_buffer(anInteger) -> character array\ncreate_unicode_buffer(aString, anInteger) -> character array
ctypes.get_errno()
ctypes.get_last_error()
ctypes.memmove(dst, src, count)
ctypes.memset(dst, c, count)
ctypes.oledll
ctypes.pointer(obj)
ctypes.py_object()[class]
ctypes.pydll
ctypes.pythonapi
ctypes.resize(obj, size)Resize the memory buffer of a ctypes instance
ctypes.set_errno()
ctypes.set_last_error()
ctypes.sizeof(obj_or_type)sizeof(C type) -> integer\nsizeof(C instance) -> integer\nReturn the size in bytes of a C instance
ctypes.string_at(ptr, size=-1)[function] string_at(addr[, size]) -> string
ctypes.util
ctypes.util._get_build_version()[function] Return the version of MSVC that was used to build Python.
ctypes.util.find_library(name)[function]
ctypes.util.find_msvcrt()[function] Return the name of the VC runtime dll
ctypes.util.test()[function]
ctypes.windll
ctypes.wintypes
ctypes.wintypes.ATOM()[class]
ctypes.wintypes.BOOL()[class]
ctypes.wintypes.BOOLEAN()[class]
ctypes.wintypes.BYTE()[class]
ctypes.wintypes.CHAR()[class]
ctypes.wintypes.COLORREF()[class]
ctypes.wintypes.DOUBLE()[class]
ctypes.wintypes.DWORD()[class]
ctypes.wintypes.FILETIME()[class] Structure base class
ctypes.wintypes.FLOAT()[class]
ctypes.wintypes.HACCEL()[class]
ctypes.wintypes.HANDLE()[class]
ctypes.wintypes.HBITMAP()[class]
ctypes.wintypes.HBRUSH()[class]
ctypes.wintypes.HCOLORSPACE()[class]
ctypes.wintypes.HDC()[class]
ctypes.wintypes.HDESK()[class]
ctypes.wintypes.HDWP()[class]
ctypes.wintypes.HENHMETAFILE()[class]
ctypes.wintypes.HFONT()[class]
ctypes.wintypes.HGDIOBJ()[class]
ctypes.wintypes.HGLOBAL()[class]
ctypes.wintypes.HHOOK()[class]
ctypes.wintypes.HICON()[class]
ctypes.wintypes.HINSTANCE()[class]
ctypes.wintypes.HKEY()[class]
ctypes.wintypes.HKL()[class]
ctypes.wintypes.HLOCAL()[class]
ctypes.wintypes.HMENU()[class]
ctypes.wintypes.HMETAFILE()[class]
ctypes.wintypes.HMODULE()[class]
ctypes.wintypes.HMONITOR()[class]
ctypes.wintypes.HPALETTE()[class]
ctypes.wintypes.HPEN()[class]
ctypes.wintypes.HRGN()[class]
ctypes.wintypes.HRSRC()[class]
ctypes.wintypes.HSTR()[class]
ctypes.wintypes.HTASK()[class]
ctypes.wintypes.HWINSTA()[class]
ctypes.wintypes.HWND()[class]
ctypes.wintypes.INT()[class]
ctypes.wintypes.LANGID()[class]
ctypes.wintypes.LARGE_INTEGER()[class]
ctypes.wintypes.LCID()[class]
ctypes.wintypes.LCTYPE()[class]
ctypes.wintypes.LGRPID()[class]
ctypes.wintypes.LONG()[class]
ctypes.wintypes.LPARAM()[class]
ctypes.wintypes.LPBOOL()[class]
ctypes.wintypes.LPBYTE()[class]
ctypes.wintypes.LPCOLESTR()[class]
ctypes.wintypes.LPCOLORREF()[class]
ctypes.wintypes.LPCSTR()[class]
ctypes.wintypes.LPCVOID()[class]
ctypes.wintypes.LPCWSTR()[class]
ctypes.wintypes.LPDWORD()[class]
ctypes.wintypes.LPFILETIME()[class]
ctypes.wintypes.LPHANDLE()[class]
ctypes.wintypes.LPHKL()[class]
ctypes.wintypes.LPINT()[class]
ctypes.wintypes.LPLONG()[class]
ctypes.wintypes.LPMSG()[class]
ctypes.wintypes.LPOLESTR()[class]
ctypes.wintypes.LPPOINT()[class]
ctypes.wintypes.LPRECT()[class]
ctypes.wintypes.LPRECTL()[class]
ctypes.wintypes.LPSC_HANDLE()[class]
ctypes.wintypes.LPSIZE()[class]
ctypes.wintypes.LPSIZEL()[class]
ctypes.wintypes.LPSTR()[class]
ctypes.wintypes.LPUINT()[class]
ctypes.wintypes.LPVOID()[class]
ctypes.wintypes.LPWIN32_FIND_DATAA()[class]
ctypes.wintypes.LPWIN32_FIND_DATAW()[class]
ctypes.wintypes.LPWORD()[class]
ctypes.wintypes.LPWSTR()[class]
ctypes.wintypes.MAX_PATH
ctypes.wintypes.MSG()[class] Structure base class
ctypes.wintypes.OLESTR()[class]
ctypes.wintypes.PBOOL()[class]
ctypes.wintypes.PBOOLEAN()[class]
ctypes.wintypes.PBYTE()[class]
ctypes.wintypes.PCHAR()[class]
ctypes.wintypes.PDWORD()[class]
ctypes.wintypes.PFILETIME()[class]
ctypes.wintypes.PFLOAT()[class]
ctypes.wintypes.PHANDLE()[class]
ctypes.wintypes.PHKEY()[class]
ctypes.wintypes.PINT()[class]
ctypes.wintypes.PLARGE_INTEGER()[class]
ctypes.wintypes.PLCID()[class]
ctypes.wintypes.PLONG()[class]
ctypes.wintypes.PMSG()[class]
ctypes.wintypes.POINT()[class] Structure base class
ctypes.wintypes.POINTL()[class] Structure base class
ctypes.wintypes.PPOINT()[class]
ctypes.wintypes.PPOINTL()[class]
ctypes.wintypes.PRECT()[class]
ctypes.wintypes.PRECTL()[class]
ctypes.wintypes.PSHORT()[class]
ctypes.wintypes.PSIZE()[class]
ctypes.wintypes.PSIZEL()[class]
ctypes.wintypes.PSMALL_RECT()[class]
ctypes.wintypes.PUINT()[class]
ctypes.wintypes.PULARGE_INTEGER()[class]
ctypes.wintypes.PULONG()[class]
ctypes.wintypes.PUSHORT()[class]
ctypes.wintypes.PWCHAR()[class]
ctypes.wintypes.PWIN32_FIND_DATAA()[class]
ctypes.wintypes.PWIN32_FIND_DATAW()[class]
ctypes.wintypes.PWORD()[class]
ctypes.wintypes.RECT()[class] Structure base class
ctypes.wintypes.RECTL()[class] Structure base class
ctypes.wintypes.RGB(red, green, blue)[function]
ctypes.wintypes.SC_HANDLE()[class]
ctypes.wintypes.SERVICE_STATUS_HANDLE()[class]
ctypes.wintypes.SHORT()[class]
ctypes.wintypes.SIZE()[class] Structure base class
ctypes.wintypes.SIZEL()[class] Structure base class
ctypes.wintypes.SMALL_RECT()[class] Structure base class
ctypes.wintypes.UINT()[class]
ctypes.wintypes.ULARGE_INTEGER()[class]
ctypes.wintypes.ULONG()[class]
ctypes.wintypes.USHORT()[class]
ctypes.wintypes.VARIANT_BOOL()[class]
ctypes.wintypes.WCHAR()[class]
ctypes.wintypes.WIN32_FIND_DATAA()[class] Structure base class
ctypes.wintypes.WIN32_FIND_DATAW()[class] Structure base class
ctypes.wintypes.WORD()[class]
ctypes.wintypes.WPARAM()[class]
ctypes.wintypes._COORD()[class] Structure base class
ctypes.wintypes._FILETIME()[class] Structure base class
ctypes.wintypes._LARGE_INTEGER()[class]
ctypes.wintypes._POINTL()[class] Structure base class
ctypes.wintypes._RECTL()[class] Structure base class
ctypes.wintypes._SMALL_RECT()[class] Structure base class
ctypes.wintypes._ULARGE_INTEGER()[class]
ctypes.wintypes.tagMSG()[class] Structure base class
ctypes.wintypes.tagPOINT()[class] Structure base class
ctypes.wintypes.tagRECT()[class] Structure base class
ctypes.wintypes.tagSIZE()[class] Structure base class
ctypes.wstring_at(ptr, size=-1)[function] wstring_at(addr[, size]) -> string
dataclasses
dataclasses.Field(default, default_factory, init, repr, hash, compare,\n  metadata, kw_only)[class]
dataclasses.FrozenInstanceError()[class] Attribute not found.
dataclasses.InitVar(type)[class]
dataclasses.KW_ONLY
dataclasses.MISSING
dataclasses.asdict(obj, *, dict_factory=<??>)[function] Return the fields of a dataclass instance as a new dictionary mapping\nfield names to field values.
dataclasses.astuple(obj, *, tuple_factory=<??>)[function] Return the fields of a dataclass instance as a new tuple of field values.
dataclasses.dataclass(cls=None, /, *, init=True, repr=True, eq=True,\n  order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False,\n  slots=False, weakref_slot=False)[function] Add dunder methods based on the fields defined in the class.
dataclasses.field(*, default=<??>, default_factory=<??>, init=True, repr=True,\n  hash=None, compare=True, metadata=None, kw_only=<??>)[function] Return an object to identify dataclass fields.
dataclasses.fields(class_or_instance)[function] Return a tuple describing the fields of this dataclass.
dataclasses.is_dataclass(obj)[function] Returns True if obj is a dataclass or an instance of a\ndataclass.
dataclasses.make_dataclass(cls_name, fields, *, bases=﴾﴿, namespace=None,\n  init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False,\n  match_args=True, kw_only=False, slots=False, weakref_slot=False, module=None)[function] Return a new dynamically created dataclass.
dataclasses.replace(obj, /, **changes)[function] Return a new object replacing specified fields with new values.
datetime
datetime.MAXYEAR
datetime.MINYEAR
datetime.UTC
datetime.date(year, month, day)[class] date(year, month, day) --> date object
datetime.datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0,\n  tzinfo=None, *, fold=0)[class] datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
datetime.time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *,\n  fold=0)[class] time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object
datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0,\n  minutes=0, hours=0, weeks=0)[class] Difference between two datetime values.
datetime.timezone(offset, name=None)[class] Fixed offset from UTC implementation of tzinfo.
datetime.tzinfo()[class] Abstract base class for time zone info objects.
dbm
dbm.error
dbm.open(file, flag='r', mode=438)[function] Open or create database at path given by *file*.
dbm.whichdb(filename)[function] Guess which db package to use to open a db file.
decimal
decimal.BasicContext
decimal.Clamped()[class] Base class for arithmetic errors.
decimal.Context(prec=None, rounding=None, Emin=None, Emax=None, capitals=None,\n  clamp=None, flags=None, traps=None)[class] The context affects almost all operations and controls rounding,\nOver/Underflow, raising of exceptions and much more.  A new context\ncan be constructed as follows:
decimal.ConversionSyntax()[class] Base class for arithmetic errors.
decimal.Decimal(value='0', context=None)[class] Construct a new Decimal object. 'value' can be an integer, string, tuple,\nor another Decimal object. If no value is given, return Decimal('0'). The\ncontext does not affect the conversion and is only passed to determine if\nthe InvalidOperation trap is active.
decimal.DecimalException()[class] Base class for arithmetic errors.
decimal.DecimalTuple(sign, digits, exponent)[class] DecimalTuple(sign, digits, exponent)
decimal.DefaultContext
decimal.DivisionByZero()[class] Second argument to a division or modulo operation was zero.
decimal.DivisionImpossible()[class] Base class for arithmetic errors.
decimal.DivisionUndefined()[class] Second argument to a division or modulo operation was zero.
decimal.ExtendedContext
decimal.FloatOperation()[class] Base class for arithmetic errors.
decimal.HAVE_CONTEXTVAR
decimal.HAVE_THREADS
decimal.Inexact()[class] Base class for arithmetic errors.
decimal.InvalidContext()[class] Base class for arithmetic errors.
decimal.InvalidOperation()[class] Base class for arithmetic errors.
decimal.MAX_EMAX
decimal.MAX_PREC
decimal.MIN_EMIN
decimal.MIN_ETINY
decimal.Overflow()[class] Base class for arithmetic errors.
decimal.ROUND_05UP
decimal.ROUND_CEILING
decimal.ROUND_DOWN
decimal.ROUND_FLOOR
decimal.ROUND_HALF_DOWN
decimal.ROUND_HALF_EVEN
decimal.ROUND_HALF_UP
decimal.ROUND_UP
decimal.Rounded()[class] Base class for arithmetic errors.
decimal.Subnormal()[class] Base class for arithmetic errors.
decimal.Underflow()[class] Base class for arithmetic errors.
decimal.getcontext()Get the current default context.
decimal.localcontext(ctx=None, **kwargs)Return a context manager that will set the default context to a copy of ctx\non entry to the with-statement and restore the previous default context when\nexiting the with-statement. If no context is specified, a copy of the current\ndefault context is used.
decimal.setcontext(context, /)Set a new default context.
def
del
delattr(obj, name, /)Deletes the named attribute from the given object.
dict(**kwarg)[class] dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)
dict(iterable, **kwarg)[class] dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)
dict(mapping, **kwarg)[class] dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)
difflib
difflib.Differ(linejunk=None, charjunk=None)[class] Differ is a class for comparing sequences of lines of text, and\nproducing human-readable differences or deltas.  Differ uses\nSequenceMatcher both to compare sequences of lines, and to compare\nsequences of characters within similar (near-matching) lines.
difflib.HtmlDiff(tabsize=8, wrapcolumn=None, linejunk=None, charjunk=<??>)[class] For producing HTML side by side comparison with change highlights.
difflib.IS_CHARACTER_JUNK(ch, ws=' \\t')[function] Return True for ignorable character: iff `ch` is a space or tab.
difflib.IS_LINE_JUNK(line, pat=<??>)[function] Return True for ignorable line: iff `line` is blank or contains a single '#'.
difflib.Match(a, b, size)[class] Match(a, b, size)
difflib.SequenceMatcher(isjunk=None, a='', b='', autojunk=True)[class] SequenceMatcher is a flexible class for comparing pairs of sequences of\nany type, so long as the sequence elements are hashable.  The basic\nalgorithm predates, and is a little fancier than, an algorithm\npublished in the late 1980's by Ratcliff and Obershelp under the\nhyperbolic name "gestalt pattern matching".  The basic idea is to find\nthe longest contiguous matching subsequence that contains no "junk"\nelements (R-O doesn't address junk).  The same idea is then applied\nrecursively to the pieces of the sequences to the left and to the right\nof the matching subsequence.  This does not yield minimal edit\nsequences, but does tend to yield matches that "look right" to people.
difflib.context_diff(a, b, fromfile='', tofile='', fromfiledate='',\n  tofiledate='', n=3, lineterm='\\n')[function] Compare two sequences of lines; generate the delta as a context diff.
difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'', fromfiledate=b'',\n  tofiledate=b'', n=3, lineterm=b'\\n')[function] Compare `a` and `b`, two sequences of lines represented as bytes rather\nthan str. This is a wrapper for `dfunc`, which is typically either\nunified_diff() or context_diff(). Inputs are losslessly converted to\nstrings so that `dfunc` only has to worry about strings, and encoded\nback to bytes on return. This is necessary to compare files with\nunknown or inconsistent encoding. All other inputs (except `n`) must be\nbytes rather than str.
difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)[function] Use SequenceMatcher to return list of the best "good enough" matches.
difflib.ndiff(a, b, linejunk=None, charjunk=<??>)[function] Compare `a` and `b` (lists of strings); return a `Differ`-style delta.
difflib.restore(delta, which)[function] Generate one of the two sequences that generated a delta.
difflib.unified_diff(a, b, fromfile='', tofile='', fromfiledate='',\n  tofiledate='', n=3, lineterm='\\n')[function] Compare two sequences of lines; generate the delta as a unified diff.
dir([object])Show attributes of an object.
dis
dis.Bytecode(x, *, first_line=None, current_offset=None, show_caches=False,\n  adaptive=False)[class] The bytecode operations of a piece of code
dis.EXTENDED_ARG
dis.HAVE_ARGUMENT
dis.Instruction(opname, opcode, arg, argval, argrepr, offset, starts_line,\n  is_jump_target, positions=None)[class] Details for a bytecode operation
dis.cmp_op
dis.code_info(x)[function] Formatted details of methods, functions, or code.
dis.dis(x=None, *, file=None, depth=None, show_caches=False, adaptive=False)[function] Disassemble classes, methods, functions, and other compiled objects.
dis.disassemble(co, lasti=-1, *, file=None, show_caches=False, adaptive=False)[function] Disassemble a code object.
dis.disco(co, lasti=-1, *, file=None, show_caches=False, adaptive=False)[function] Disassemble a code object.
dis.distb(tb=None, *, file=None, show_caches=False, adaptive=False)[function] Disassemble a traceback (default: last traceback).
dis.findlabels(code)[function] Detect all offsets in a byte code which are jump targets.
dis.findlinestarts(code)[function] Find the offsets in a byte code which are start of lines in the source.
dis.get_instructions(x, *, first_line=None, show_caches=False, adaptive=False)[function] Iterator for the opcodes in methods, functions or code
dis.hasarg
dis.hascompare
dis.hasconst
dis.hasexc
dis.hasfree
dis.hasjabs
dis.hasjrel
dis.haslocal
dis.hasname
dis.opmap
dis.opname
dis.show_code(co, *, file=None)[function] Print details of methods, functions, or code to *file*.
dis.stack_effect(opcode, oparg=None, /, *, jump=None)Compute the stack effect of the opcode.
divmod(x, y, /)Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.
doctest
doctest.COMPARISON_FLAGS
doctest.DONT_ACCEPT_BLANKLINE
doctest.DONT_ACCEPT_TRUE_FOR_1
doctest.DebugRunner(checker=None, verbose=None, optionflags=0)[class] Run doc tests but raise an exception as soon as there is a failure.
doctest.DocFileSuite(*paths, **kw)[function] A unittest suite for one or more doctest files.
doctest.DocTest(examples, globs, name, filename, lineno, docstring)[class] A collection of doctest examples that should be run in a single\nnamespace.  Each `DocTest` defines the following attributes:
doctest.DocTestFailure(test, example, got)[class] A DocTest example has failed in debugging mode.
doctest.DocTestFinder(verbose=False, parser=<??>, recurse=True,\n  exclude_empty=True)[class] A class used to extract the DocTests that are relevant to a given\nobject, from its docstring and the docstrings of its contained\nobjects.  Doctests can currently be extracted from the following\nobject types: modules, functions, classes, methods, staticmethods,\nclassmethods, and properties.
doctest.DocTestParser()[class] A class used to parse strings containing doctest examples.
doctest.DocTestRunner(checker=None, verbose=None, optionflags=0)[class] A class used to run DocTest test cases, and accumulate statistics.\nThe `run` method is used to process a single DocTest case.  It\nreturns a tuple `(f, t)`, where `t` is the number of test cases\ntried, and `f` is the number of test cases that failed.
doctest.DocTestSuite(module=None, globs=None, extraglobs=None,\n  test_finder=None, **options)[function] Convert doctest tests for a module to a unittest test suite.
doctest.ELLIPSIS
doctest.Example(source, want, exc_msg=None, lineno=0, indent=0, options=None)[class] A single doctest example, consisting of source code and expected\noutput.  `Example` defines the following attributes:
doctest.FAIL_FAST
doctest.IGNORE_EXCEPTION_DETAIL
doctest.NORMALIZE_WHITESPACE
doctest.OutputChecker()[class] A class used to check the whether the actual output from a doctest\nexample matches the expected output.  `OutputChecker` defines two\nmethods: `check_output`, which compares a given pair of outputs,\nand returns true if they match; and `output_difference`, which\nreturns a string describing the differences between two outputs.
doctest.REPORTING_FLAGS
doctest.REPORT_CDIFF
doctest.REPORT_NDIFF
doctest.REPORT_ONLY_FIRST_FAILURE
doctest.REPORT_UDIFF
doctest.SKIP
doctest.UnexpectedException(test, example, exc_info)[class] A DocTest example has encountered an unexpected exception
doctest.debug(module, name, pm=False)[function] Debug a single doctest docstring.
doctest.debug_src(src, pm=False, globs=None)[function] Debug a single doctest docstring, in argument `src`'
doctest.register_optionflag(name)[function]
doctest.run_docstring_examples(f, globs, verbose=False, name='NoName',\n  compileflags=None, optionflags=0)[function] Test examples in the given object's docstring (`f`), using `globs`\nas globals.  Optional argument `name` is used in failure messages.\nIf the optional argument `verbose` is true, then generate output\neven if there are no failures.
doctest.script_from_examples(s)[function] Extract script from text with examples.
doctest.set_unittest_reportflags(flags)[function] Sets the unittest option flags.
doctest.testfile(filename, module_relative=True, name=None, package=None,\n  globs=None, verbose=None, report=True, optionflags=0, extraglobs=None,\n  raise_on_error=False, parser=<??>, encoding=None)[function] Test examples in the given file.  Return (#failures, #tests).
doctest.testmod(m=None, name=None, globs=None, verbose=None, report=True,\n  optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False)[function] m=None, name=None, globs=None, verbose=None, report=True,\n   optionflags=0, extraglobs=None, raise_on_error=False,\n   exclude_empty=False
doctest.testsource(module, name)[function] Extract the test sources from a doctest docstring as a script.
elif
else
email
email.base64mime
email.base64mime.body_decode(string)[function] Decode a raw base64 string, returning a bytes object.
email.base64mime.body_encode(s, maxlinelen=76, eol='\\n')[function] Encode a string with base64.
email.base64mime.decode(string)[function] Decode a raw base64 string, returning a bytes object.
email.base64mime.decodestring(string)[function] Decode a raw base64 string, returning a bytes object.
email.base64mime.header_encode(header_bytes, charset='iso-8859-1')[function] Encode a single header line with Base64 encoding in a given charset.
email.base64mime.header_length(bytearray)[function] Return the length of s when it is encoded with base64.
email.charset
email.charset.Charset(input_charset='us-ascii')[class] Map character sets to their email properties.
email.charset.add_alias(alias, canonical)[function] Add a character set alias.
email.charset.add_charset(charset, header_enc=None, body_enc=None,\n  output_charset=None)[function] Add character set properties to the global registry.
email.charset.add_codec(charset, codecname)[function] Add a codec that map characters in the given charset to/from Unicode.
email.contentmanager
email.contentmanager.ContentManager()[class]
email.contentmanager._encode_base64(data, max_line_length)[function]
email.contentmanager._encode_text(string, charset, cte, policy)[function]
email.contentmanager._finalize_set(msg, disposition, filename, cid, params)[function]
email.contentmanager._prepare_set(msg, maintype, subtype, headers)[function]
email.contentmanager.get_and_fixup_unknown_message_content(msg)[function]
email.contentmanager.get_message_content(msg)[function]
email.contentmanager.get_non_text_content(msg)[function]
email.contentmanager.get_text_content(msg, errors='replace')[function]
email.contentmanager.raw_data_manager
email.contentmanager.set_bytes_content(msg, data, maintype, subtype,\n  cte='base64', disposition=None, filename=None, cid=None, params=None, headers=None)[function]
email.contentmanager.set_message_content(msg, message, subtype='rfc822',\n  cte=None, disposition=None, filename=None, cid=None, params=None, headers=None)[function]
email.contentmanager.set_text_content(msg, string, subtype='plain',\n  charset='utf-8', cte=None, disposition=None, filename=None, cid=None, params=None,\n  headers=None)[function]
email.encoders
email.encoders.encode_7or8bit(msg)[function] Set the Content-Transfer-Encoding header to 7bit or 8bit.
email.encoders.encode_base64(msg)[function] Encode the message's payload in Base64.
email.encoders.encode_noop(msg)[function] Do nothing.
email.encoders.encode_quopri(msg)[function] Encode the message's payload in quoted-printable.
email.errors
email.errors.BoundaryError()[class] Couldn't find terminating boundary.
email.errors.CharsetError()[class] An illegal charset was given.
email.errors.CloseBoundaryNotFoundDefect(line=None)[class] A start boundary was found, but not the corresponding close boundary.
email.errors.FirstHeaderLineIsContinuationDefect(line=None)[class] A message had a continuation line as its first header line.
email.errors.HeaderDefect(*args, **kw)[class] Base class for a header defect.
email.errors.HeaderMissingRequiredValue(*args, **kw)[class] A header that must have a value had none
email.errors.HeaderParseError()[class] Error while parsing headers.
email.errors.InvalidBase64CharactersDefect(line=None)[class] base64 encoded sequence had characters not in base64 alphabet
email.errors.InvalidBase64LengthDefect(line=None)[class] base64 encoded sequence had invalid length (1 mod 4)
email.errors.InvalidBase64PaddingDefect(line=None)[class] base64 encoded sequence had an incorrect length
email.errors.InvalidDateDefect(*args, **kw)[class] Header has unparsable or invalid date
email.errors.InvalidHeaderDefect(*args, **kw)[class] Header is not valid, message gives details.
email.errors.InvalidMultipartContentTransferEncodingDefect(line=None)[class] An invalid content transfer encoding was set on the multipart itself.
email.errors.MalformedHeaderDefect(line=None)[class] Found line with no leading whitespace and no colon before blank line.
email.errors.MessageDefect(line=None)[class] Base class for a message defect.
email.errors.MessageError()[class] Base class for errors in the email package.
email.errors.MessageParseError()[class] Base class for message parsing errors.
email.errors.MisplacedEnvelopeHeaderDefect(line=None)[class] A 'Unix-from' header was found in the middle of a header block.
email.errors.MissingHeaderBodySeparatorDefect(line=None)[class] Found line with no leading whitespace and no colon before blank line.
email.errors.MultipartConversionError()[class] Conversion to a multipart is prohibited.
email.errors.MultipartInvariantViolationDefect(line=None)[class] A message claimed to be a multipart but no subparts were found.
email.errors.NoBoundaryInMultipartDefect(line=None)[class] A message claimed to be a multipart but had no boundary parameter.
email.errors.NonASCIILocalPartDefect(*args, **kw)[class] local_part contains non-ASCII characters
email.errors.NonPrintableDefect(non_printables)[class] ASCII characters outside the ascii-printable range found
email.errors.ObsoleteHeaderDefect(*args, **kw)[class] Header uses syntax declared obsolete by RFC 5322
email.errors.StartBoundaryNotFoundDefect(line=None)[class] The claimed start boundary was never found.
email.errors.UndecodableBytesDefect(line=None)[class] Header contained bytes that could not be decoded
email.feedparser
email.feedparser.BytesFeedParser(_factory=None, *, policy=Compat32﴾﴿)[class] Like FeedParser, but feed accepts bytes.
email.feedparser.FeedParser(_factory=None, *, policy=Compat32﴾﴿)[class] A feed-style parser of email.
email.generator
email.generator.BytesGenerator(outfp, mangle_from_=None, maxheaderlen=None, *,\n  policy=None)[class] Generates a bytes version of a Message object tree.
email.generator.DecodedGenerator(outfp, mangle_from_=None, maxheaderlen=None,\n  fmt=None, *, policy=None)[class] Generates a text representation of a message.
email.generator.Generator(outfp, mangle_from_=None, maxheaderlen=None, *,\n  policy=None)[class] Generates output from a Message object tree.
email.header
email.header.Header(s=None, charset=None, maxlinelen=None, header_name=None,\n  continuation_ws=' ', errors='strict')[class]
email.header.decode_header(header)[function] Decode a message header value without converting charset.
email.header.make_header(decoded_seq, maxlinelen=None, header_name=None,\n  continuation_ws=' ')[function] Create a Header from a sequence of pairs as returned by decode_header()
email.headerregistry
email.headerregistry.Address(display_name='', username='', domain='',\n  addr_spec=None)[class]
email.headerregistry.AddressHeader()[class]
email.headerregistry.BaseHeader(name, value)[class] Base class for message headers.
email.headerregistry.ContentDispositionHeader()[class]
email.headerregistry.ContentTransferEncodingHeader()[class]
email.headerregistry.ContentTypeHeader()[class]
email.headerregistry.DateHeader()[class] Header whose value consists of a single timestamp.
email.headerregistry.Group(display_name=None, addresses=None)[class]
email.headerregistry.HeaderRegistry(base_class=<??>, default_class=<??>,\n  use_default_map=True)[class] A header_factory and header registry.
email.headerregistry.MIMEVersionHeader()[class]
email.headerregistry.MappingProxyType()[class]
email.headerregistry.MessageIDHeader()[class]
email.headerregistry.ParameterizedMIMEHeader()[class]
email.headerregistry.SingleAddressHeader()[class]
email.headerregistry.UniqueAddressHeader()[class]
email.headerregistry.UniqueDateHeader()[class] Header whose value consists of a single timestamp.
email.headerregistry.UniqueSingleAddressHeader()[class]
email.headerregistry.UniqueUnstructuredHeader()[class]
email.headerregistry.UnstructuredHeader()[class]
email.headerregistry._default_header_map
email.headerregistry._reconstruct_header(cls_name, bases, value)[function]
email.iterators
email.iterators.body_line_iterator(msg, decode=False)[function] Iterate over the parts, returning string payloads line-by-line.
email.iterators.typed_subpart_iterator(msg, maintype='text', subtype=None)[function] Iterate over the subparts with a given MIME type.
email.iterators.walk(self)[function] Walk over the message tree, yielding each subpart.
email.message
email.message.EmailMessage(policy=None)[class] Basic message object.
email.message.Message(policy=Compat32﴾﴿)[class] Basic message object.
email.message_from_binary_file(fp, *args, **kws)[function] Read a binary file and parse its contents into a Message object model.
email.message_from_bytes(s, *args, **kws)[function] Parse a bytes string into a Message object model.
email.message_from_file(fp, *args, **kws)[function] Read a file and parse its contents into a Message object model.
email.message_from_string(s, *args, **kws)[function] Parse a string into a Message object model.
email.mime
email.mime.application
email.mime.application.MIMEApplication(_data, _subtype='octet-stream',\n  _encoder=<??>, *, policy=None, **_params)[class] Class for generating application/* MIME documents.
email.mime.audio
email.mime.audio.MIMEAudio(_audiodata, _subtype=None, _encoder=<??>, *,\n  policy=None, **_params)[class] Class for generating audio/* MIME documents.
email.mime.base
email.mime.base.MIMEBase(_maintype, _subtype, *, policy=None, **_params)[class] Base class for MIME specializations.
email.mime.image
email.mime.image.MIMEImage(_imagedata, _subtype=None, _encoder=<??>, *,\n  policy=None, **_params)[class] Class for generating image/* type MIME documents.
email.mime.message
email.mime.message.MIMEMessage(_msg, _subtype='rfc822', *, policy=None)[class] Class representing message/* MIME documents.
email.mime.multipart
email.mime.multipart.MIMEMultipart(_subtype='mixed', boundary=None,\n  _subparts=None, *, policy=None, **_params)[class] Base class for MIME multipart/* type messages.
email.mime.nonmultipart
email.mime.nonmultipart.MIMENonMultipart(_maintype, _subtype, *, policy=None,\n  **_params)[class] Base class for MIME non-multipart type messages.
email.mime.text
email.mime.text.MIMEText(_text, _subtype='plain', _charset=None, *,\n  policy=None)[class] Class for generating text/* type MIME documents.
email.parser
email.parser.BytesFeedParser(_factory=None, *, policy=Compat32﴾﴿)[class] Like FeedParser, but feed accepts bytes.
email.parser.BytesHeaderParser(*args, **kw)[class]
email.parser.BytesParser(*args, **kw)[class]
email.parser.FeedParser(_factory=None, *, policy=Compat32﴾﴿)[class] A feed-style parser of email.
email.parser.HeaderParser(_class=None, *, policy=Compat32﴾﴿)[class]
email.parser.Parser(_class=None, *, policy=Compat32﴾﴿)[class]
email.policy
email.policy.Compat32(**kw)[class] Controls for how messages are interpreted and formatted.
email.policy.EmailPolicy(**kw)[class] Controls for how messages are interpreted and formatted.
email.policy.HTTP
email.policy.Policy(**kw)[class] Controls for how messages are interpreted and formatted.
email.policy.SMTP
email.policy.compat32
email.policy.default
email.policy.strict
email.quoprimime
email.quoprimime.body_decode(encoded, eol='\\n')[function] Decode a quoted-printable string.
email.quoprimime.body_encode(body, maxlinelen=76, eol='\\n')[function] Encode with quoted-printable, wrapping at maxlinelen characters.
email.quoprimime.body_length(bytearray)[function] Return a body quoted-printable encoding length.
email.quoprimime.decode(encoded, eol='\\n')[function] Decode a quoted-printable string.
email.quoprimime.decodestring(encoded, eol='\\n')[function] Decode a quoted-printable string.
email.quoprimime.header_decode(s)[function] Decode a string encoded with RFC 2045 MIME header `Q' encoding.
email.quoprimime.header_encode(header_bytes, charset='iso-8859-1')[function] Encode a single header line with quoted-printable (like) encoding.
email.quoprimime.header_length(bytearray)[function] Return a header quoted-printable encoding length.
email.quoprimime.quote(c)[function]
email.quoprimime.unquote(s)[function] Turn a string in the form =AB to the ASCII character with value 0xab
email.utils
email.utils.collapse_rfc2231_value(value, errors='replace',\n  fallback_charset='us-ascii')[function]
email.utils.decode_params(params)[function] Decode parameters list according to RFC 2231.
email.utils.decode_rfc2231(s)[function] Decode string according to RFC 2231
email.utils.encode_rfc2231(s, charset=None, language=None)[function] Encode string according to RFC 2231.
email.utils.format_datetime(dt, usegmt=False)[function] Turn a datetime into a date string as specified in RFC 2822.
email.utils.formataddr(pair, charset='utf-8')[function] The inverse of parseaddr(), this takes a 2-tuple of the form\n(realname, email_address) and returns the string value suitable\nfor an RFC 2822 From, To or Cc header.
email.utils.formatdate(timeval=None, localtime=False, usegmt=False)[function] Returns a date string as specified by RFC 2822, e.g.:
email.utils.getaddresses(fieldvalues)[function] Return a list of (REALNAME, EMAIL) for each fieldvalue.
email.utils.make_msgid(idstring=None, domain=None)[function] Returns a string suitable for RFC 2822 compliant Message-ID, e.g:
email.utils.mktime_tz(data)[function] Turn a 10-tuple as returned by parsedate_tz() into a POSIX timestamp.
email.utils.parseaddr(addr)[function] Parse addr into its constituent realname and email address parts.
email.utils.parsedate(data)[function] Convert a time string to a time tuple.
email.utils.parsedate_to_datetime(data)[function]
email.utils.parsedate_tz(data)[function] Convert a date string to a time tuple.
email.utils.unquote(str)[function] Remove quotes from a string.
encodings
encodings.CodecRegistryError()[class] Base class for lookup errors.
encodings.aliases
encodings.aliases.aliases
encodings.cp1252
encodings.cp1252.Codec()[class] Defines the interface for stateless encoders/decoders.
encodings.cp1252.IncrementalDecoder(errors='strict')[class] An IncrementalDecoder decodes an input in multiple steps. The input can\nbe passed piece by piece to the decode() method. The IncrementalDecoder\nremembers the state of the decoding process between calls to decode().
encodings.cp1252.IncrementalEncoder(errors='strict')[class] An IncrementalEncoder encodes an input in multiple steps. The input can\nbe passed piece by piece to the encode() method. The IncrementalEncoder\nremembers the state of the encoding process between calls to encode().
encodings.cp1252.StreamReader(stream, errors='strict')[class] Defines the interface for stateless encoders/decoders.
encodings.cp1252.StreamWriter(stream, errors='strict')[class] Defines the interface for stateless encoders/decoders.
encodings.cp1252.decoding_table
encodings.cp1252.encoding_table
encodings.cp1252.getregentry()[function]
encodings.idna
encodings.idna.Codec()[class] Defines the interface for stateless encoders/decoders.
encodings.idna.IncrementalDecoder(errors='strict')[class] This subclass of IncrementalDecoder can be used as the baseclass for an\nincremental decoder if the decoder must be able to handle incomplete\nbyte sequences.
encodings.idna.IncrementalEncoder(errors='strict')[class] This subclass of IncrementalEncoder can be used as the baseclass for an\nincremental encoder if the encoder must keep some of the output in a\nbuffer between calls to encode().
encodings.idna.StreamReader(stream, errors='strict')[class] Defines the interface for stateless encoders/decoders.
encodings.idna.StreamWriter(stream, errors='strict')[class] Defines the interface for stateless encoders/decoders.
encodings.idna.ToASCII(label)[function]
encodings.idna.ToUnicode(label)[function]
encodings.idna.ace_prefix
encodings.idna.dots
encodings.idna.getregentry()[function]
encodings.idna.nameprep(label)[function]
encodings.idna.sace_prefix
encodings.idna.unicodedata
encodings.normalize_encoding(encoding)[function] Normalize an encoding name.
encodings.search_function(encoding)[function]
encodings.utf_8
encodings.utf_8.IncrementalDecoder(errors='strict')[class] This subclass of IncrementalDecoder can be used as the baseclass for an\nincremental decoder if the decoder must be able to handle incomplete\nbyte sequences.
encodings.utf_8.IncrementalEncoder(errors='strict')[class] An IncrementalEncoder encodes an input in multiple steps. The input can\nbe passed piece by piece to the encode() method. The IncrementalEncoder\nremembers the state of the encoding process between calls to encode().
encodings.utf_8.StreamReader(stream, errors='strict')[class] Defines the interface for stateless encoders/decoders.
encodings.utf_8.StreamWriter(stream, errors='strict')[class] Defines the interface for stateless encoders/decoders.
encodings.utf_8.decode(input, errors='strict')[function]
encodings.utf_8.encode(str, errors=None, /)
encodings.utf_8.getregentry()[function]
ensurepip
ensurepip.bootstrap(*, root=None, upgrade=False, user=False, altinstall=False,\n  default_pip=False, verbosity=0)[function] Bootstrap pip into the current Python installation (or the given root\ndirectory).
ensurepip.version()[function] Returns a string specifying the bundled version of pip.
enum
enum.CONFORM
enum.CONTINUOUS
enum.EJECT
enum.Enum(new_class_name, /, names, *, module=None, qualname=None, type=None,\n  start=1, boundary=None)[class] Create a collection of name/value pairs.
enum.EnumCheck(*values)[class] various conditions to check an enumeration for
enum.EnumMeta(cls, bases, classdict, *, boundary=None, _simple=False, **kwds)[class] Metaclass for Enum
enum.EnumType(cls, bases, classdict, *, boundary=None, _simple=False, **kwds)[class] Metaclass for Enum
enum.Flag(new_class_name, /, names, *, module=None, qualname=None, type=None,\n  start=1, boundary=None)[class] Support for flags
enum.FlagBoundary(*values)[class] control how out of range values are handled\n"strict" -> error is raised             [default for Flag]\n"conform" -> extra bits are discarded\n"eject" -> lose flag status\n"keep" -> keep flag status and all bits [default for IntFlag]
enum.IntEnum(new_class_name, /, names, *, module=None, qualname=None,\n  type=None, start=1, boundary=None)[class] Enum where members are also (and must be) ints
enum.IntFlag(new_class_name, /, names, *, module=None, qualname=None,\n  type=None, start=1, boundary=None)[class] Support for integer-based Flags
enum.KEEP
enum.NAMED_FLAGS
enum.ReprEnum(new_class_name, /, names, *, module=None, qualname=None,\n  type=None, start=1, boundary=None)[class] Only changes the repr(), leaving str() and format() to the mixed-in type.
enum.STRICT
enum.StrEnum(new_class_name, /, names, *, module=None, qualname=None,\n  type=None, start=1, boundary=None)[class] Enum where members are also (and must be) strings
enum.UNIQUE
enum.auto(value=_auto_null)[class] Instances are replaced with an appropriate value in Enum class suites.
enum.global_enum(cls, update_str=False)[function] decorator that makes the repr() of an enum member reference its module\ninstead of its class; also exports all members to the enum's module's\nglobal namespace
enum.global_enum_repr(self)[function] use module.enum_name instead of class.enum_name
enum.global_flag_repr(self)[function] use module.flag_name instead of class.flag_name
enum.global_str(self)[function] use enum_name instead of class.enum_name
enum.member(value)[class] Forces item to become an Enum member during class creation.
enum.nonmember(value)[class] Protects item from becoming an Enum member during class creation.
enum.pickle_by_enum_name(self, proto)[function]
enum.pickle_by_global_name(self, proto)[function]
enum.property(fget=None, fset=None, fdel=None, doc=None)[class] This is a descriptor, used to define attributes that act differently\nwhen accessed through an enum member and through an enum class.\nInstance access is the same as property(), but access to an attribute\nthrough the enum class will instead look in the class' _member_map_ for\na corresponding enum member.
enum.unique(enumeration)[function] Class decorator for enumerations ensuring unique member values.
enum.verify(*checks)[class] Check an enumeration for various constraints. (see EnumCheck)
enumerate(iterable, start=0)[class] Return an enumerate object.
errno
errno.E2BIG
errno.EACCES
errno.EADDRINUSE
errno.EADDRNOTAVAIL
errno.EAFNOSUPPORT
errno.EAGAIN
errno.EALREADY
errno.EBADF
errno.EBADMSG
errno.EBUSY
errno.ECANCELED
errno.ECHILD
errno.ECONNABORTED
errno.ECONNREFUSED
errno.ECONNRESET
errno.EDEADLK
errno.EDEADLOCK
errno.EDESTADDRREQ
errno.EDOM
errno.EDQUOT
errno.EEXIST
errno.EFAULT
errno.EFBIG
errno.EHOSTDOWN
errno.EHOSTUNREACH
errno.EIDRM
errno.EILSEQ
errno.EINPROGRESS
errno.EINTR
errno.EINVAL
errno.EIO
errno.EISCONN
errno.EISDIR
errno.ELOOP
errno.EMFILE
errno.EMLINK
errno.EMSGSIZE
errno.ENAMETOOLONG
errno.ENETDOWN
errno.ENETRESET
errno.ENETUNREACH
errno.ENFILE
errno.ENOBUFS
errno.ENODATA
errno.ENODEV
errno.ENOENT
errno.ENOEXEC
errno.ENOLCK
errno.ENOLINK
errno.ENOMEM
errno.ENOMSG
errno.ENOPROTOOPT
errno.ENOSPC
errno.ENOSR
errno.ENOSTR
errno.ENOSYS
errno.ENOTCONN
errno.ENOTDIR
errno.ENOTEMPTY
errno.ENOTRECOVERABLE
errno.ENOTSOCK
errno.ENOTSUP
errno.ENOTTY
errno.ENXIO
errno.EOPNOTSUPP
errno.EOVERFLOW
errno.EOWNERDEAD
errno.EPERM
errno.EPFNOSUPPORT
errno.EPIPE
errno.EPROTO
errno.EPROTONOSUPPORT
errno.EPROTOTYPE
errno.ERANGE
errno.EREMOTE
errno.EROFS
errno.ESHUTDOWN
errno.ESOCKTNOSUPPORT
errno.ESPIPE
errno.ESRCH
errno.ESTALE
errno.ETIME
errno.ETIMEDOUT
errno.ETOOMANYREFS
errno.ETXTBSY
errno.EUSERS
errno.EWOULDBLOCK
errno.EXDEV
errno.WSABASEERR
errno.WSAEACCES
errno.WSAEADDRINUSE
errno.WSAEADDRNOTAVAIL
errno.WSAEAFNOSUPPORT
errno.WSAEALREADY
errno.WSAEBADF
errno.WSAECONNABORTED
errno.WSAECONNREFUSED
errno.WSAECONNRESET
errno.WSAEDESTADDRREQ
errno.WSAEDISCON
errno.WSAEDQUOT
errno.WSAEFAULT
errno.WSAEHOSTDOWN
errno.WSAEHOSTUNREACH
errno.WSAEINPROGRESS
errno.WSAEINTR
errno.WSAEINVAL
errno.WSAEISCONN
errno.WSAELOOP
errno.WSAEMFILE
errno.WSAEMSGSIZE
errno.WSAENAMETOOLONG
errno.WSAENETDOWN
errno.WSAENETRESET
errno.WSAENETUNREACH
errno.WSAENOBUFS
errno.WSAENOPROTOOPT
errno.WSAENOTCONN
errno.WSAENOTEMPTY
errno.WSAENOTSOCK
errno.WSAEOPNOTSUPP
errno.WSAEPFNOSUPPORT
errno.WSAEPROCLIM
errno.WSAEPROTONOSUPPORT
errno.WSAEPROTOTYPE
errno.WSAEREMOTE
errno.WSAESHUTDOWN
errno.WSAESOCKTNOSUPPORT
errno.WSAESTALE
errno.WSAETIMEDOUT
errno.WSAETOOMANYREFS
errno.WSAEUSERS
errno.WSAEWOULDBLOCK
errno.WSANOTINITIALISED
errno.WSASYSNOTREADY
errno.WSAVERNOTSUPPORTED
errno.errorcode
eval(source, globals=None, locals=None, /)Evaluate the given source in the context of globals and locals.
except
exec(source, globals=None, locals=None, /, *, closure=None)Execute the given source in the context of globals and locals.
exit(code=None)
faulthandler
faulthandler.cancel_dump_traceback_later()cancel_dump_traceback_later():\ncancel the previous call to dump_traceback_later().
faulthandler.disable()disable(): disable the fault handler
faulthandler.dump_traceback(file=sys.stderr, all_threads=True)dump_traceback(file=sys.stderr, all_threads=True): dump the traceback of the current thread, or of all threads if all_threads is True, into file
faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr,\n  exit=False)dump_traceback_later(timeout, repeat=False, file=sys.stderr, exit=False):\ndump the traceback of all threads in timeout seconds,\nor each timeout seconds if repeat is True. If exit is True, call _exit(1) which is not safe.
faulthandler.enable(file=sys.stderr, all_threads=True)enable(file=sys.stderr, all_threads=True): enable the fault handler
faulthandler.is_enabled()is_enabled()->bool: check if the handler is enabled
filecmp
filecmp.DEFAULT_IGNORES
filecmp.clear_cache()[function] Clear the filecmp cache.
filecmp.cmp(f1, f2, shallow=True)[function] Compare two files.
filecmp.cmpfiles(a, b, common, shallow=True)[function] Compare common files in two directories.
filecmp.dircmp(a, b, ignore=None, hide=None)[class] A class that manages the comparison of 2 directories.
fileinput
fileinput.FileInput(files=None, inplace=False, backup='', *, mode='r',\n  openhook=None, encoding=None, errors=None)[class] FileInput([files[, inplace[, backup]]], *, mode=None, openhook=None)
fileinput.close()[function] Close the sequence.
fileinput.filelineno()[function] Return the line number in the current file. Before the first line\nhas been read, returns 0. After the last line of the last file has\nbeen read, returns the line number of that line within the file.
fileinput.filename()[function] Return the name of the file currently being read.\nBefore the first line has been read, returns None.
fileinput.fileno()[function] Return the file number of the current file. When no file is currently\nopened, returns -1.
fileinput.hook_compressed(filename, mode, *, encoding=None, errors=None)[function]
fileinput.hook_encoded(encoding, errors=None)[function]
fileinput.input(files=None, inplace=False, backup='', *, mode='r',\n  openhook=None, encoding=None, errors=None)[function] Return an instance of the FileInput class, which can be iterated.
fileinput.isfirstline()[function] Returns true the line just read is the first line of its file,\notherwise returns false.
fileinput.isstdin()[function] Returns true if the last line was read from sys.stdin,\notherwise returns false.
fileinput.lineno()[function] Return the cumulative line number of the line that has just been read.\nBefore the first line has been read, returns 0. After the last line\nof the last file has been read, returns the line number of that line.
fileinput.nextfile()[function] Close the current file so that the next iteration will read the first\nline from the next file (if any); lines not read from the file will\nnot count towards the cumulative line count. The filename is not\nchanged until after the first line of the next file has been read.\nBefore the first line has been read, this function has no effect;\nit cannot be used to skip the first file. After the last line of the\nlast file has been read, this function has no effect.
filter(function, iterable)[class] filter(function or None, iterable) --> filter object
finally
float(x=0, /)[class] Convert a string or number to a floating point number, if possible.
fnmatch
fnmatch.filter(names, pat)[function] Construct a list from those elements of the iterable NAMES that match PAT.
fnmatch.fnmatch(name, pat)[function] Test whether FILENAME matches PATTERN.
fnmatch.fnmatchcase(name, pat)[function] Test whether FILENAME matches PATTERN, including case.
fnmatch.translate(pat)[function] Translate a shell PATTERN to a regular expression.
for
format(value, format_spec='', /)Return type(value).__format__(value, format_spec)
fractions
fractions.Fraction(numerator=0, denominator=None)[class] This class implements rational numbers.
from
frozenset([iterable])[class] frozenset() -> empty frozenset object\nfrozenset(iterable) -> frozenset object
ftplib
ftplib.FTP(host='', user='', passwd='', acct='', timeout=<??>,\n  source_address=None, *, encoding='utf-8')[class] An FTP client class.
ftplib.FTP_TLS(host='', user='', passwd='', acct='', *, context=None,\n  timeout=<??>, source_address=None, encoding='utf-8')[class] A FTP subclass which adds TLS support to FTP as described\nin RFC-4217.
ftplib.all_errors
ftplib.error_perm()[class] Common base class for all non-exit exceptions.
ftplib.error_proto()[class] Common base class for all non-exit exceptions.
ftplib.error_reply()[class] Common base class for all non-exit exceptions.
ftplib.error_temp()[class] Common base class for all non-exit exceptions.
functools
functools.WRAPPER_ASSIGNMENTS
functools.WRAPPER_UPDATES
functools.cache(user_function, /)[function] Simple lightweight unbounded cache.  Sometimes called "memoize".
functools.cached_property(func)[class]
functools.cmp_to_key(mycmp)Convert a cmp= function into a key= function.
functools.lru_cache(maxsize=128, typed=False)[function] Least-recently-used cache decorator.
functools.partial(func, /, *args, **keywords)[class] partial(func, *args, **keywords) - new function with partial application\nof the given arguments and keywords.
functools.partialmethod(func, /, *args, **keywords)[class] Method descriptor with partial application of the given arguments\nand keywords.
functools.reduce(function, iterable[, initializer])reduce(function, iterable[, initial]) -> value
functools.singledispatch(func)[function] Single-dispatch generic function decorator.
functools.singledispatchmethod(func)[class] Single-dispatch generic method descriptor.
functools.total_ordering(cls)[function] Class decorator that fills in missing ordering methods
functools.update_wrapper(wrapper, wrapped,\n  assigned=﴾'__module__'﹐ '__name__'﹐ '__qualname__'﹐ '__doc__'﹐ '__annotations__'﹐ '__type_params__'﴿, updated=﴾'__dict__'﹐﴿)[function] Update a wrapper function to look like the wrapped function
functools.wraps(wrapped,\n  assigned=﴾'__module__'﹐ '__name__'﹐ '__qualname__'﹐ '__doc__'﹐ '__annotations__'﹐ '__type_params__'﴿, updated=﴾'__dict__'﹐﴿)[function] Decorator factory to apply update_wrapper() to a wrapper function
gc
gc.DEBUG_COLLECTABLE
gc.DEBUG_LEAK
gc.DEBUG_SAVEALL
gc.DEBUG_STATS
gc.DEBUG_UNCOLLECTABLE
gc.callbacks
gc.collect(generation=2)Run the garbage collector.
gc.disable()Disable automatic garbage collection.
gc.enable()Enable automatic garbage collection.
gc.freeze()Freeze all current tracked objects and ignore them for future collections.
gc.garbage
gc.get_count()Return a three-tuple of the current collection counts.
gc.get_debug()Get the garbage collection debugging flags.
gc.get_freeze_count()Return the number of objects in the permanent generation.
gc.get_objects(generation=None)Return a list of objects tracked by the collector (excluding the list returned).
gc.get_referents(*objs)get_referents(*objs) -> list\nReturn the list of objects that are directly referred to by objs.
gc.get_referrers(*objs)get_referrers(*objs) -> list\nReturn the list of objects that directly refer to any of objs.
gc.get_stats()Return a list of dictionaries containing per-generation statistics.
gc.get_threshold()Return the current collection thresholds.
gc.is_finalized(obj, /)Returns true if the object has been already finalized by the GC.
gc.is_tracked(obj, /)Returns true if the object is tracked by the garbage collector.
gc.isenabled()Returns true if automatic garbage collection is enabled.
gc.set_debug(flags, /)Set the garbage collection debugging flags.
gc.set_threshold(threshold0[, threshold1[, threshold2]])set_threshold(threshold0, [threshold1, threshold2]) -> None
gc.unfreeze()Unfreeze all objects in the permanent generation.
genericpath
genericpath.commonprefix(m)[function] Given a list of pathnames, returns the longest common leading component
genericpath.exists(path)[function] Test whether a path exists.  Returns False for broken symbolic links
genericpath.getatime(filename)[function] Return the last access time of a file, reported by os.stat().
genericpath.getctime(filename)[function] Return the metadata change time of a file, reported by os.stat().
genericpath.getmtime(filename)[function] Return the last modification time of a file, reported by os.stat().
genericpath.getsize(filename)[function] Return the size of a file, reported by os.stat().
genericpath.isdir(s)[function] Return true if the pathname refers to an existing directory.
genericpath.isfile(path)[function] Test whether a path is a regular file
genericpath.islink(path)[function] Test whether a path is a symbolic link
genericpath.samefile(f1, f2)[function] Test whether two pathnames reference the same actual file or directory
genericpath.sameopenfile(fp1, fp2)[function] Test whether two open file objects reference the same file
genericpath.samestat(s1, s2)[function] Test whether two stat buffers reference the same file
getattr(object, name[, default])Get a named attribute from an object.
getopt
getopt.GetoptError(msg, opt='')[class] Common base class for all non-exit exceptions.
getopt.error(msg, opt='')[class] Common base class for all non-exit exceptions.
getopt.getopt(args, shortopts, longopts=[])[function] getopt(args, options[, long_options]) -> opts, args
getopt.gnu_getopt(args, shortopts, longopts=[])[function] getopt(args, options[, long_options]) -> opts, args
getpass
getpass.GetPassWarning()[class] Base class for warnings generated by user code.
getpass.getpass(prompt='Password: ', stream=None)[function] Prompt for password with echo off, using Windows getwch().
getpass.getuser()[function] Get the username from the environment or password database.
gettext
gettext.Catalog(domain, localedir=None, languages=None, class_=None,\n  fallback=False)[function]
gettext.GNUTranslations(fp=None)[class]
gettext.NullTranslations(fp=None)[class]
gettext.bindtextdomain(domain, localedir=None)[function]
gettext.dgettext(domain, message)[function]
gettext.dngettext(domain, msgid1, msgid2, n)[function]
gettext.dnpgettext(domain, context, msgid1, msgid2, n)[function]
gettext.dpgettext(domain, context, message)[function]
gettext.find(domain, localedir=None, languages=None, all=False)[function]
gettext.gettext(message)[function]
gettext.install(domain, localedir=None, *, names=None)[function]
gettext.ngettext(msgid1, msgid2, n)[function]
gettext.npgettext(context, msgid1, msgid2, n)[function]
gettext.pgettext(context, message)[function]
gettext.textdomain(domain=None)[function]
gettext.translation(domain, localedir=None, languages=None, class_=None,\n  fallback=False)[function]
glob
glob.escape(pathname)[function] Escape all special characters.
glob.glob(pathname, *, root_dir=None, dir_fd=None, recursive=False,\n  include_hidden=False)[function] Return a list of paths matching a pathname pattern.
glob.iglob(pathname, *, root_dir=None, dir_fd=None, recursive=False,\n  include_hidden=False)[function] Return an iterator which yields the paths matching a pathname pattern.
global
globals()Return the dictionary containing the current scope's global variables.
graphlib
graphlib.CycleError()[class] Subclass of ValueError raised by TopologicalSorter.prepare if cycles\nexist in the working graph.
graphlib.TopologicalSorter(graph=None)[class] Provides functionality to topologically sort a graph of hashable nodes
gzip
gzip.BadGzipFile()[class] Exception raised in some cases for invalid gzip files.
gzip.GzipFile(filename=None, mode=None, compresslevel=9, fileobj=None,\n  mtime=None)[class] The GzipFile class simulates most of the methods of a file object with\nthe exception of the truncate() method.
gzip.compress(data, compresslevel=9, *, mtime=None)[function] Compress data in one shot and return the compressed string.
gzip.decompress(data)[function] Decompress a gzip compressed string in one shot.\nReturn the decompressed string.
gzip.open(filename, mode='rb', compresslevel=9, encoding=None, errors=None,\n  newline=None)[function] Open a gzip-compressed file in binary or text mode.
hasattr(obj, name, /)Return whether the object has an attribute with the given name.
hash(obj, /)Return the hash value for the given object.
hashlib
hashlib.algorithms_available
hashlib.algorithms_guaranteed
hashlib.blake2b(data=b'', /, *, digest_size=64, key=b'', salt=b'', person=b'',\n  fanout=1, depth=1, leaf_size=0, node_offset=0, node_depth=0, inner_size=0,\n  last_node=False, usedforsecurity=True)[class] Return a new BLAKE2b hash object.
hashlib.blake2s(data=b'', /, *, digest_size=32, key=b'', salt=b'', person=b'',\n  fanout=1, depth=1, leaf_size=0, node_offset=0, node_depth=0, inner_size=0,\n  last_node=False, usedforsecurity=True)[class] Return a new BLAKE2s hash object.
hashlib.file_digest(fileobj, digest, /, *, _bufsize=262144)[function] Hash the contents of a file-like object. Returns a digest object.
hashlib.md5(string=b'', *, usedforsecurity=True)Returns a md5 hash object; optionally initialized with a string
hashlib.new(name, data=b'', **kwargs)[function] new(name, data=b'') - Return a new hashing object using the named algorithm;\noptionally initialized with data (which must be a bytes-like object).
hashlib.pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None)Password based key derivation function 2 (PKCS #5 v2.0) with HMAC as pseudorandom function.
hashlib.sha1(string=b'', *, usedforsecurity=True)Returns a sha1 hash object; optionally initialized with a string
hashlib.sha224(string=b'', *, usedforsecurity=True)Returns a sha224 hash object; optionally initialized with a string
hashlib.sha256(string=b'', *, usedforsecurity=True)Returns a sha256 hash object; optionally initialized with a string
hashlib.sha384(string=b'', *, usedforsecurity=True)Returns a sha384 hash object; optionally initialized with a string
hashlib.sha3_224(string=b'', *, usedforsecurity=True)Returns a sha3-224 hash object; optionally initialized with a string
hashlib.sha3_256(string=b'', *, usedforsecurity=True)Returns a sha3-256 hash object; optionally initialized with a string
hashlib.sha3_384(string=b'', *, usedforsecurity=True)Returns a sha3-384 hash object; optionally initialized with a string
hashlib.sha3_512(string=b'', *, usedforsecurity=True)Returns a sha3-512 hash object; optionally initialized with a string
hashlib.sha512(string=b'', *, usedforsecurity=True)Returns a sha512 hash object; optionally initialized with a string
hashlib.shake_128(string=b'', *, usedforsecurity=True)Returns a shake-128 variable hash object; optionally initialized with a string
hashlib.shake_256(string=b'', *, usedforsecurity=True)Returns a shake-256 variable hash object; optionally initialized with a string
heapq
heapq.heapify(heap, /)Transform list into a heap, in-place, in O(len(heap)) time.
heapq.heappop(heap, /)Pop the smallest item off the heap, maintaining the heap invariant.
heapq.heappush(heap, item, /)Push item onto heap, maintaining the heap invariant.
heapq.heappushpop(heap, item, /)Push item on the heap, then pop and return the smallest item from the heap.
heapq.heapreplace(heap, item, /)Pop and return the current smallest value, and add the new item.
heapq.merge(*iterables, *, key=None, reverse=False)[function] Merge multiple sorted inputs into a single sorted output.
heapq.nlargest(n, iterable, key=None)[function] Find the n largest elements in a dataset.
heapq.nsmallest(n, iterable, key=None)[function] Find the n smallest elements in a dataset.
help(*args, **kwds)Define the builtin 'help'.
hex(number, /)Return the hexadecimal representation of an integer.
hmac
hmac.HMAC(key, msg=None, digestmod='')[class] RFC 2104 HMAC class.  Also complies with RFC 4231.
hmac.compare_digest(a, b, /)Return 'a == b'.
hmac.digest(key, msg, digest)[function] Fast inline implementation of HMAC.
hmac.digest_size
hmac.new(key, msg=None, digestmod='')[function] Create a new hashing object and return it.
hmac.trans_36
hmac.trans_5C
html
html.entities
html.entities.codepoint2name
html.entities.entitydefs
html.entities.html5
html.entities.name2codepoint
html.escape(s, quote=True)[function] Replace special characters "&", "<" and ">" to HTML-safe sequences.\nIf the optional flag quote is true (the default), the quotation mark\ncharacters, both double quote (") and single quote (') characters are also\ntranslated.
html.parser
html.parser.HTMLParser(*, convert_charrefs=True)[class] Find tags and other markup and call handler functions.
html.unescape(s)[function] Convert all named and numeric character references (e.g. &gt;, &#62;,\n&x3e;) in the string s to the corresponding unicode characters.\nThis function uses the rules defined by the HTML 5 standard\nfor both valid and invalid character references, and the list of\nHTML 5 named character references defined in html.entities.html5.
http
http.HTTPMethod(*values)[class] HTTP methods and descriptions
http.HTTPStatus(*values)[class] HTTP status codes and reason phrases
http.client
http.client.BadStatusLine(line)[class] Common base class for all non-exit exceptions.
http.client.CannotSendHeader()[class] Common base class for all non-exit exceptions.
http.client.CannotSendRequest()[class] Common base class for all non-exit exceptions.
http.client.HTTPConnection(host, port=None, timeout=<??>, source_address=None,\n  blocksize=8192)[class]
http.client.HTTPException()[class] Common base class for all non-exit exceptions.
http.client.HTTPResponse(sock, debuglevel=0, method=None, url=None)[class] Base class for buffered IO objects.
http.client.HTTPSConnection(host, port=None, *, timeout=<??>,\n  source_address=None, context=None, blocksize=8192)[class] This class allows communication via SSL.
http.client.ImproperConnectionState()[class] Common base class for all non-exit exceptions.
http.client.IncompleteRead(partial, expected=None)[class] Common base class for all non-exit exceptions.
http.client.InvalidURL()[class] Common base class for all non-exit exceptions.
http.client.LineTooLong(line_type)[class] Common base class for all non-exit exceptions.
http.client.NotConnected()[class] Common base class for all non-exit exceptions.
http.client.RemoteDisconnected(*pos, **kw)[class] Connection reset.
http.client.ResponseNotReady()[class] Common base class for all non-exit exceptions.
http.client.UnimplementedFileMode()[class] Common base class for all non-exit exceptions.
http.client.UnknownProtocol(version)[class] Common base class for all non-exit exceptions.
http.client.UnknownTransferEncoding()[class] Common base class for all non-exit exceptions.
http.client.error()[class] Common base class for all non-exit exceptions.
http.client.responses
http.cookiejar
http.cookiejar.Cookie(version, name, value, port, port_specified, domain,\n  domain_specified, domain_initial_dot, path, path_specified, secure, expires, discard, comment,\n  comment_url, rest, rfc2109=False)[class] HTTP Cookie.
http.cookiejar.CookieJar(policy=None)[class] Collection of HTTP cookies.
http.cookiejar.CookiePolicy()[class] Defines which cookies get accepted from and returned to server.
http.cookiejar.DefaultCookiePolicy(blocked_domains=None, allowed_domains=None,\n  netscape=True, rfc2965=False, rfc2109_as_netscape=None, hide_cookie2=False,\n  strict_domain=False, strict_rfc2965_unverifiable=True, strict_ns_unverifiable=False,\n  strict_ns_domain=0, strict_ns_set_initial_dollar=False, strict_ns_set_path=False,\n  secure_protocols=﴾'https'﹐ 'wss'﴿)[class] Implements the standard rules for accepting and returning cookies.
http.cookiejar.FileCookieJar(filename=None, delayload=False, policy=None)[class] CookieJar that can be loaded from and saved to a file.
http.cookiejar.LWPCookieJar(filename=None, delayload=False, policy=None)[class] The LWPCookieJar saves a sequence of "Set-Cookie3" lines.\n"Set-Cookie3" is the format used by the libwww-perl library, not known\nto be compatible with any browser, but which is easy to read and\ndoesn't lose information about RFC 2965 cookies.
http.cookiejar.LoadError()[class] Base class for I/O related errors.
http.cookiejar.MozillaCookieJar(filename=None, delayload=False, policy=None)[class] WARNING: you may want to backup your browser's cookies file if you use\nthis class to save cookies.  I *think* it works, but there have been\nbugs in the past!
http.cookies
http.cookies.BaseCookie(input=None)[class] A container class for a set of Morsels.
http.cookies.CookieError()[class] Common base class for all non-exit exceptions.
http.cookies.SimpleCookie(input=None)[class] SimpleCookie supports strings as cookie values.  When setting\nthe value using the dictionary assignment notation, SimpleCookie\ncalls the builtin str() to convert the value to a string.  Values\nreceived from HTTP are kept as strings.
http.server
http.server.BaseHTTPRequestHandler(request, client_address, server)[class] HTTP request handler base class.
http.server.CGIHTTPRequestHandler(*args, *, directory=None, **kwargs)[class] Complete HTTP server with GET, HEAD and POST commands.
http.server.HTTPServer(server_address, RequestHandlerClass,\n  bind_and_activate=True)[class] Base class for various socket-based server classes.
http.server.SimpleHTTPRequestHandler(*args, *, directory=None, **kwargs)[class] Simple HTTP request handler with GET and HEAD commands.
http.server.ThreadingHTTPServer(server_address, RequestHandlerClass,\n  bind_and_activate=True)[class] Mix-in class to handle each request in a new thread.
id(obj, /)Return the identity of an object.
idlelib
idlelib.testing
if
imaplib
imaplib.IMAP4(host='', port=143, timeout=None)[class] IMAP4 client class.
imaplib.IMAP4_SSL(host='', port=993, *, ssl_context=None, timeout=None)[class] IMAP4 client class over SSL connection
imaplib.IMAP4_stream(command)[class] IMAP4 client class over a stream
imaplib.Int2AP(num)[function] Convert integer to A-P string representation.
imaplib.Internaldate2tuple(resp)[function] Parse an IMAP4 INTERNALDATE string.
imaplib.ParseFlags(resp)[function] Convert IMAP4 flags response to python tuple.
imaplib.Time2Internaldate(date_time)[function] Convert date_time to IMAP4 INTERNALDATE representation.
imghdr
imghdr.what(file, h=None)[function] Return the type of image contained in a file or byte stream.
import
importlib
importlib.abc
importlib.abc.ExecutionLoader()[class] Abstract base class for loaders that wish to support the execution of\nmodules as scripts.
importlib.abc.FileLoader(fullname, path)[class] Abstract base class partially implementing the ResourceLoader and\nExecutionLoader ABCs.
importlib.abc.InspectLoader()[class] Abstract base class for loaders which support inspection about the\nmodules they can load.
importlib.abc.Loader()[class] Abstract base class for import loaders.
importlib.abc.MetaPathFinder()[class] Abstract base class for import finders on sys.meta_path.
importlib.abc.PathEntryFinder()[class] Abstract base class for path entry finders used by PathFinder.
importlib.abc.ResourceLoader()[class] Abstract base class for loaders which can return data from their\nback-end storage.
importlib.abc.SourceLoader()[class] Abstract base class for loading source code (and optionally any\ncorresponding bytecode).
importlib.import_module(name, package=None)[function] Import a module.
importlib.invalidate_caches()[function] Call the invalidate_caches() method on all meta path finders stored in\nsys.meta_path (where implemented).
importlib.machinery
importlib.machinery.BYTECODE_SUFFIXES
importlib.machinery.BuiltinImporter()[class] Meta path import for built-in modules.
importlib.machinery.DEBUG_BYTECODE_SUFFIXES
importlib.machinery.EXTENSION_SUFFIXES
importlib.machinery.ExtensionFileLoader(name, path)[class] Loader for extension modules.
importlib.machinery.FileFinder(path, *loader_details)[class] File-based finder.
importlib.machinery.FrozenImporter()[class] Meta path import for frozen modules.
importlib.machinery.ModuleSpec(name, loader, *, origin=None, loader_state=None,\n  is_package=None)[class] The specification for a module, used for loading.
importlib.machinery.NamespaceLoader(name, path, path_finder)[class]
importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES
importlib.machinery.PathFinder()[class] Meta path finder for sys.path and package __path__ attributes.
importlib.machinery.SOURCE_SUFFIXES
importlib.machinery.SourceFileLoader(fullname, path)[class] Concrete implementation of SourceLoader using the file system.
importlib.machinery.SourcelessFileLoader(fullname, path)[class] Loader which handles sourceless file imports.
importlib.machinery.WindowsRegistryFinder()[class] Meta path finder for modules declared in the Windows registry.
importlib.machinery.all_suffixes()[function] Returns a list of all recognized module suffixes for this process
importlib.reload(module)[function] Reload the module and return it.
importlib.resources
importlib.resources.Package(*args, **kwargs)
importlib.resources.Resource()[class] str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str
importlib.resources.ResourceReader()[class] Abstract base class for loaders to provide resource reading support.
importlib.resources.abc
importlib.resources.abc.ResourceReader()[class] Abstract base class for loaders to provide resource reading support.
importlib.resources.abc.Traversable(*args, **kwargs)[class] An object with a subset of pathlib.Path methods suitable for\ntraversing directories and opening files.
importlib.resources.abc.TraversableResources()[class] The required interface for providing traversable\nresources.
importlib.resources.as_file(path)[function] Given a Traversable object, return that object as a\npath on the local file system in a context manager.
importlib.resources.contents(package: Union[module﹐ str])[function] Return an iterable of entries in `package`.
importlib.resources.files(anchor: Union[module﹐ str﹐ NoneType] = None)[function] Get a Traversable resource for an anchor.
importlib.resources.is_resource(package: Union[module﹐ str], name: str)[function] True if `name` is a resource inside `package`.
importlib.resources.open_binary(package: Union[module﹐ str], resource: str)[function] Return a file-like object opened for binary reading of the resource.
importlib.resources.open_text(package: Union[module﹐ str], resource: str,\n  encoding: str = 'utf-8', errors: str = 'strict')[function] Return a file-like object opened for text reading of the resource.
importlib.resources.path(package: Union[module﹐ str], resource: str)[function] A context manager providing a file path object to the resource.
importlib.resources.read_binary(package: Union[module﹐ str], resource: str)[function] Return the binary contents of the resource.
importlib.resources.read_text(package: Union[module﹐ str], resource: str,\n  encoding: str = 'utf-8', errors: str = 'strict')[function] Return the decoded string of the resource.
importlib.util
importlib.util.LazyLoader(loader)[class] A loader that creates a module which defers loading until attribute access.
importlib.util.Loader()[class] Abstract base class for import loaders.
importlib.util.MAGIC_NUMBER
importlib.util._LazyModule(name, doc=None)[class] A subclass of the module type which triggers loading upon attribute access.
importlib.util._RAW_MAGIC_NUMBER
importlib.util._find_spec(name, path, target=None)[function] Find a module's spec.
importlib.util._find_spec_from_path(name, path=None)[function] Return the spec for the specified module.
importlib.util._incompatible_extension_module_restrictions(*, disable_check)[class] A context manager that can temporarily skip the compatibility check.
importlib.util._resolve_name(name, package, level)[function] Resolve a relative module name to an absolute one.
importlib.util.cache_from_source(path, debug_override=None, *,\n  optimization=None)[function] Given the path to a .py file, return the path to its .pyc file.
importlib.util.decode_source(source_bytes)[function] Decode bytes representing source code and return the string.
importlib.util.find_spec(name, package=None)[function] Return the spec for the specified module.
importlib.util.module_from_spec(spec)[function] Create a module based on the provided spec.
importlib.util.resolve_name(name, package)[function] Resolve a relative module name to an absolute one.
importlib.util.source_from_cache(path)[function] Given the path to a .pyc. file, return the path to its .py file.
importlib.util.source_hash(source_bytes)[function] Return the hash of *source_bytes* as used in hash-based pyc files.
importlib.util.spec_from_file_location(name, location=None, *, loader=None,\n  submodule_search_locations=<??>)[function] Return a module spec based on a file location.
importlib.util.spec_from_loader(name, loader, *, origin=None, is_package=None)[function] Return a module spec based on various loader methods.
in
input(prompt='', /)Read a string from standard input.  The trailing newline is stripped.
inspect
inspect.AGEN_CLOSED
inspect.AGEN_CREATED
inspect.AGEN_RUNNING
inspect.AGEN_SUSPENDED
inspect.ArgInfo(args, varargs, keywords, locals)[class] ArgInfo(args, varargs, keywords, locals)
inspect.Arguments(args, varargs, varkw)[class] Arguments(args, varargs, varkw)
inspect.Attribute(name, kind, defining_class, object)[class] Attribute(name, kind, defining_class, object)
inspect.BlockFinder()[class] Provide a tokeneater() method to detect the end of a code block.
inspect.BoundArguments(signature, arguments)[class] Result of `Signature.bind` call.  Holds the mapping of arguments\nto the function's parameters.
inspect.BufferFlags(*values)[class] Support for integer-based Flags
inspect.CORO_CLOSED
inspect.CORO_CREATED
inspect.CORO_RUNNING
inspect.CORO_SUSPENDED
inspect.CO_ASYNC_GENERATOR
inspect.CO_COROUTINE
inspect.CO_GENERATOR
inspect.CO_ITERABLE_COROUTINE
inspect.CO_NESTED
inspect.CO_NEWLOCALS
inspect.CO_NOFREE
inspect.CO_OPTIMIZED
inspect.CO_VARARGS
inspect.CO_VARKEYWORDS
inspect.ClassFoundException()[class] Common base class for all non-exit exceptions.
inspect.ClosureVars(nonlocals, globals, builtins, unbound)[class] ClosureVars(nonlocals, globals, builtins, unbound)
inspect.EndOfBlock()[class] Common base class for all non-exit exceptions.
inspect.FrameInfo(frame, filename, lineno, function, code_context, index, *,\n  positions=None)[class] _FrameInfo(frame, filename, lineno, function, code_context, index)
inspect.FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults,\n  annotations)[class] FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)
inspect.GEN_CLOSED
inspect.GEN_CREATED
inspect.GEN_RUNNING
inspect.GEN_SUSPENDED
inspect.Parameter(name, kind, *, default, annotation)[class] Represents a parameter in a function signature.
inspect.Signature(parameters=None, *, return_annotation,\n  __validate_parameters__=True)[class] A Signature object represents the overall signature of a function.\nIt stores a Parameter object for each parameter accepted by the\nfunction, as well as information specific to the function itself.
inspect.TPFLAGS_IS_ABSTRACT
inspect.Traceback(filename, lineno, function, code_context, index, *,\n  positions=None)[class] _Traceback(filename, lineno, function, code_context, index)
inspect.classify_class_attrs(cls)[function] Return list of attribute-descriptor tuples.
inspect.cleandoc(doc)[function] Clean up indentation from docstrings.
inspect.currentframe()[function] Return the frame of the caller or None if this is not possible.
inspect.findsource(object)[function] Return the entire source file and starting line number for an object.
inspect.formatannotation(annotation, base_module=None)[function]
inspect.formatannotationrelativeto(object)[function]
inspect.formatargvalues(args, varargs, varkw, locals, formatarg=<??>,\n  formatvarargs=<??>, formatvarkw=<??>, formatvalue=<??>)[function] Format an argument spec from the 4 values returned by getargvalues.
inspect.get_annotations(obj, *, globals=None, locals=None, eval_str=False)[function] Compute the annotations dict for an object.
inspect.getabsfile(object, _filename=None)[function] Return an absolute path to the source or compiled file for an object.
inspect.getargs(co)[function] Get information about the arguments accepted by a code object.
inspect.getargvalues(frame)[function] Get information about arguments passed into a particular frame.
inspect.getasyncgenlocals(agen)[function] Get the mapping of asynchronous generator local variables to their current\nvalues.
inspect.getasyncgenstate(agen)[function] Get current state of an asynchronous generator object.
inspect.getattr_static(obj, attr, default=<??>)[function] Retrieve attributes without triggering dynamic lookup via the\ndescriptor protocol,  __getattr__ or __getattribute__.
inspect.getblock(lines)[function] Extract the block of code at the top of the given list of lines.
inspect.getcallargs(func, /, *positional, **named)[function] Get the mapping of arguments to values.
inspect.getclasstree(classes, unique=False)[function] Arrange the given list of classes into a hierarchy of nested lists.
inspect.getclosurevars(func)[function] Get the mapping of free variables to their current values.
inspect.getcomments(object)[function] Get lines of comments immediately preceding an object's source code.
inspect.getcoroutinelocals(coroutine)[function] Get the mapping of coroutine local variables to their current values.
inspect.getcoroutinestate(coroutine)[function] Get current state of a coroutine object.
inspect.getdoc(object)[function] Get the documentation string for an object.
inspect.getfile(object)[function] Work out which source or compiled file an object was defined in.
inspect.getframeinfo(frame, context=1)[function] Get information about a frame or traceback object.
inspect.getfullargspec(func)[function] Get the names and default values of a callable object's parameters.
inspect.getgeneratorlocals(generator)[function] Get the mapping of generator local variables to their current values.
inspect.getgeneratorstate(generator)[function] Get current state of a generator-iterator.
inspect.getinnerframes(tb, context=1)[function] Get a list of records for a traceback's frame and all lower frames.
inspect.getlineno(frame)[function] Get the line number from a frame object, allowing for optimization.
inspect.getmembers(object, predicate=None)[function] Return all members of an object as (name, value) pairs sorted by name.\nOptionally, only return members that satisfy a given predicate.
inspect.getmembers_static(object, predicate=None)[function] Return all members of an object as (name, value) pairs sorted by name\nwithout triggering dynamic lookup via the descriptor protocol,\n__getattr__ or __getattribute__. Optionally, only return members that\nsatisfy a given predicate.
inspect.getmodule(object, _filename=None)[function] Return the module an object was defined in, or None if not found.
inspect.getmodulename(path)[function] Return the module name for a given file, or None.
inspect.getmro(cls)[function] Return tuple of base classes (including cls) in method resolution order.
inspect.getouterframes(frame, context=1)[function] Get a list of records for a frame and all higher (calling) frames.
inspect.getsource(object)[function] Return the text of the source code for an object.
inspect.getsourcefile(object)[function] Return the filename that can be used to locate an object's source.\nReturn None if no way can be identified to get the source.
inspect.getsourcelines(object)[function] Return a list of source lines and starting line number for an object.
inspect.indentsize(line)[function] Return the indent size, in spaces, at the start of a line of text.
inspect.isabstract(object)[function] Return true if the object is an abstract base class (ABC).
inspect.isasyncgen(object)[function] Return true if the object is an asynchronous generator.
inspect.isasyncgenfunction(obj)[function] Return true if the object is an asynchronous generator function.
inspect.isawaitable(object)[function] Return true if object can be passed to an ``await`` expression.
inspect.isbuiltin(object)[function] Return true if the object is a built-in function or method.
inspect.isclass(object)[function] Return true if the object is a class.
inspect.iscode(object)[function] Return true if the object is a code object.
inspect.iscoroutine(object)[function] Return true if the object is a coroutine.
inspect.iscoroutinefunction(obj)[function] Return true if the object is a coroutine function.
inspect.isdatadescriptor(object)[function] Return true if the object is a data descriptor.
inspect.isframe(object)[function] Return true if the object is a frame object.
inspect.isfunction(object)[function] Return true if the object is a user-defined function.
inspect.isgenerator(object)[function] Return true if the object is a generator.
inspect.isgeneratorfunction(obj)[function] Return true if the object is a user-defined generator function.
inspect.isgetsetdescriptor(object)[function] Return true if the object is a getset descriptor.
inspect.ismemberdescriptor(object)[function] Return true if the object is a member descriptor.
inspect.ismethod(object)[function] Return true if the object is an instance method.
inspect.ismethoddescriptor(object)[function] Return true if the object is a method descriptor.
inspect.ismethodwrapper(object)[function] Return true if the object is a method wrapper.
inspect.ismodule(object)[function] Return true if the object is a module.
inspect.isroutine(object)[function] Return true if the object is any kind of function or method.
inspect.istraceback(object)[function] Return true if the object is a traceback.
inspect.markcoroutinefunction(func)[function] Decorator to ensure callable is recognised as a coroutine function.
inspect.signature(obj, *, follow_wrapped=True, globals=None, locals=None,\n  eval_str=False)[function] Get a signature object for the passed callable.
inspect.stack(context=1)[function] Return a list of records for the stack above the caller's frame.
inspect.trace(context=1)[function] Return a list of records for the stack below the current exception.
inspect.unwrap(func, *, stop=None)[function] Get the object wrapped by *func*.
inspect.walktree(classes, children, parent)[function] Recursive helper function for getclasstree().
int([x])[class] int([x]) -> integer\nint(x, base=10) -> integer
int(x, base=10)[class] int([x]) -> integer\nint(x, base=10) -> integer
io
io.BlockingIOError()[class] I/O operation would block.
io.BufferedIOBase()[class] Base class for buffered IO objects.
io.BufferedRWPair(reader, writer, buffer_size=8192, /)[class] A buffered reader and writer object together.
io.BufferedRandom(raw, buffer_size=8192)[class] A buffered interface to random access streams.
io.BufferedReader(raw, buffer_size=8192)[class] Create a new buffered reader using the given readable raw IO object.
io.BufferedWriter(raw, buffer_size=8192)[class] A buffer for a writeable sequential RawIO object.
io.BytesIO(initial_bytes=b'')[class] Buffered I/O implementation using an in-memory bytes buffer.
io.FileIO(file, mode='r', closefd=True, opener=None)[class] Open a file.
io.IOBase()[class] The abstract base class for all I/O classes.
io.RawIOBase()[class] Base class for raw binary I/O.
io.SEEK_CUR
io.SEEK_END
io.SEEK_SET
io.StringIO(initial_value='', newline='\\n')[class] Text I/O implementation using an in-memory buffer.
io.TextIOBase()[class] Base class for text I/O.
io.TextIOWrapper(buffer, encoding=None, errors=None, newline=None,\n  line_buffering=False, write_through=False)[class] Character and line based layer over a BufferedIOBase object, buffer.
io.UnsupportedOperation()[class] Base class for I/O related errors.
io.open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None,\n  closefd=True, opener=None)Open file and return a stream.  Raise OSError upon failure.
io.open_code(path)Opens the provided file with the intent to import the contents.
ipaddress
ipaddress.AddressValueError()[class] A Value Error related to the address.
ipaddress.IPV4LENGTH
ipaddress.IPV6LENGTH
ipaddress.IPv4Address(address)[class] Represent and manipulate single IPv4 Addresses.
ipaddress.IPv4Interface(address)[class] Represent and manipulate single IPv4 Addresses.
ipaddress.IPv4Network(address, strict=True)[class] This class represents and manipulates 32-bit IPv4 network + addresses..
ipaddress.IPv6Address(address)[class] Represent and manipulate single IPv6 Addresses.
ipaddress.IPv6Interface(address)[class] Represent and manipulate single IPv6 Addresses.
ipaddress.IPv6Network(address, strict=True)[class] This class represents and manipulates 128-bit IPv6 networks.
ipaddress.NetmaskValueError()[class] A Value Error related to the netmask.
ipaddress.collapse_addresses(addresses)[function] Collapse a list of IP objects.
ipaddress.get_mixed_type_key(obj)[function] Return a key suitable for sorting between networks and addresses.
ipaddress.ip_address(address)[function] Take an IP string/int and return an object of the correct type.
ipaddress.ip_interface(address)[function] Take an IP string/int and return an object of the correct type.
ipaddress.ip_network(address, strict=True)[function] Take an IP string/int and return an object of the correct type.
ipaddress.summarize_address_range(first, last)[function] Summarize a network range given the first and last IP addresses.
ipaddress.v4_int_to_packed(address)[function] Represent an address as 4 packed bytes in network (big-endian) order.
ipaddress.v6_int_to_packed(address)[function] Represent an address as 16 packed bytes in network (big-endian) order.
is
isinstance(obj, class_or_tuple, /)Return whether an object is an instance of a class or of a subclass thereof.
issubclass(cls, class_or_tuple, /)Return whether 'cls' is derived from another class or is the same class.
iter(object[, sentinel])Get an iterator from an object.
itertools
itertools.accumulate(iterable, func=None, *, initial=None)[class] Return series of accumulated sums (or other binary function results).
itertools.batched(iterable, n)[class] Batch data into tuples of length n. The last batch may be shorter than n.
itertools.chain(*iterables)[class] chain(*iterables) --> chain object
itertools.combinations(iterable, r)[class] Return successive r-length combinations of elements in the iterable.
itertools.combinations_with_replacement(iterable, r)[class] Return successive r-length combinations of elements in the iterable allowing individual elements to have successive repeats.
itertools.compress(data, selectors)[class] Return data elements corresponding to true selector elements.
itertools.count(start=0, step=1)[class] Return a count object whose .__next__() method returns consecutive values.
itertools.cycle(iterable, /)[class] Return elements from the iterable until it is exhausted. Then repeat the sequence indefinitely.
itertools.dropwhile(predicate, iterable, /)[class] Drop items from the iterable while predicate(item) is true.
itertools.filterfalse(function, iterable, /)[class] Return those items of iterable for which function(item) is false.
itertools.groupby(iterable, key=None)[class] make an iterator that returns consecutive keys and groups from the iterable
itertools.islice(iterable, start, stop[, step])[class] islice(iterable, stop) --> islice object\nislice(iterable, start, stop[, step]) --> islice object
itertools.islice(iterable, stop)[class] islice(iterable, stop) --> islice object\nislice(iterable, start, stop[, step]) --> islice object
itertools.pairwise(iterable, /)[class] Return an iterator of overlapping pairs taken from the input iterator.
itertools.permutations(iterable, r=None)[class] Return successive r-length permutations of elements in the iterable.
itertools.product(*iterables, repeat=1)[class] product(*iterables, repeat=1) --> product object
itertools.repeat(object[, times])[class] repeat(object [,times]) -> create an iterator which returns the object\nfor the specified number of times.  If not specified, returns the object\nendlessly.
itertools.starmap(function, iterable, /)[class] Return an iterator whose values are returned from the function evaluated with an argument tuple taken from the given sequence.
itertools.takewhile(predicate, iterable, /)[class] Return successive entries from an iterable as long as the predicate evaluates to true for each entry.
itertools.tee(iterable, n=2, /)Returns a tuple of n independent iterators.
itertools.zip_longest(*iterables, fillvalue=None)[class] zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> zip_longest object
json
json.JSONDecodeError(msg, doc, pos)[class] Subclass of ValueError with the following additional properties:
json.JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None,\n  parse_constant=None, strict=True, object_pairs_hook=None)[class] Simple JSON <https://json.org> decoder
json.JSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True,\n  allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)[class] Extensible JSON <https://json.org> encoder for Python data structures.
json.decoder
json.decoder.JSONDecodeError(msg, doc, pos)[class] Subclass of ValueError with the following additional properties:
json.decoder.JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None,\n  parse_constant=None, strict=True, object_pairs_hook=None)[class] Simple JSON <https://json.org> decoder
json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True,\n  allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)[function] Serialize ``obj`` as a JSON formatted stream to ``fp`` (a\n``.write()``-supporting file-like object).
json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True,\n  allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)[function] Serialize ``obj`` to a JSON formatted ``str``.
json.encoder
json.encoder.ESCAPE
json.encoder.ESCAPE_ASCII
json.encoder.ESCAPE_DCT
json.encoder.HAS_UTF8
json.encoder.INFINITY
json.encoder.JSONEncoder(*, skipkeys=False, ensure_ascii=True,\n  check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)[class] Extensible JSON <https://json.org> encoder for Python data structures.
json.encoder._make_iterencode(markers, _default, _encoder, _indent, _floatstr,\n  _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, ValueError=<??>,\n  dict=<??>, float=<??>, id=<??>, int=<??>, isinstance=<??>, list=<??>, str=<??>,\n  tuple=<??>, _intstr=<??>)[function]
json.encoder.c_encode_basestring()encode_basestring(string) -> string
json.encoder.c_encode_basestring_ascii()encode_basestring_ascii(string) -> string
json.encoder.c_make_encoder()[class] _iterencode(obj, _current_indent_level) -> iterable
json.encoder.encode_basestring()encode_basestring(string) -> string
json.encoder.encode_basestring_ascii()encode_basestring_ascii(string) -> string
json.encoder.py_encode_basestring(s)[function] Return a JSON representation of a Python string
json.encoder.py_encode_basestring_ascii(s)[function] Return an ASCII-only JSON representation of a Python string
json.load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None,\n  parse_constant=None, object_pairs_hook=None, **kw)[function] Deserialize ``fp`` (a ``.read()``-supporting file-like object containing\na JSON document) to a Python object.
json.loads(s, *, cls=None, object_hook=None, parse_float=None, parse_int=None,\n  parse_constant=None, object_pairs_hook=None, **kw)[function] Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\ncontaining a JSON document) to a Python object.
json.scanner
json.scanner.make_scanner()[class] JSON scanner object
keyword
keyword.iskeyword(s)x.__contains__(y) <==> y in x.
keyword.issoftkeyword(s)x.__contains__(y) <==> y in x.
keyword.kwlist
keyword.softkwlist
lambda
len(obj, /)Return the number of items in a container.
lib2to3
license()interactive prompt objects for printing the license text, a list of\ncontributors and the copyright notice.
linecache
linecache.checkcache(filename=None)[function] Discard cache entries that are out of date.\n(This is not checked upon each call!)
linecache.clearcache()[function] Clear the cache entirely.
linecache.getline(filename, lineno, module_globals=None)[function] Get a line for a Python source file from the cache.\nUpdate the cache if it doesn't contain an entry for this file already.
linecache.lazycache(filename, module_globals)[function] Seed the cache for filename with module_globals.
list(iterable=﴾﴿, /)[class] Built-in mutable sequence.
locale
locale.CHAR_MAX
locale.Error()[class] Common base class for all non-exit exceptions.
locale.LC_ALL
locale.LC_COLLATE
locale.LC_CTYPE
locale.LC_MONETARY
locale.LC_NUMERIC
locale.LC_TIME
locale.atof(string, func=<??>)[function] Parses a string as a float according to the locale settings.
locale.atoi(string)[function] Converts a string to an integer according to the locale settings.
locale.currency(val, symbol=True, grouping=False, international=False)[function] Formats val according to the currency settings\nin the current locale.
locale.format_string(f, val, grouping=False, monetary=False)[function] Formats a string in the same way that the % formatting would use,\nbut takes the current locale into account.
locale.getdefaultlocale(envvars=﴾'LC_ALL'﹐ 'LC_CTYPE'﹐ 'LANG'﹐ 'LANGUAGE'﴿)[function] Tries to determine the default locale settings and returns\nthem as tuple (language code, encoding).
locale.getencoding()Get the current locale encoding.
locale.getlocale(category=2)[function] Returns the current setting for the given locale category as\ntuple (language code, encoding).
locale.getpreferredencoding(do_setlocale=True)[function] Return the charset that the user is likely using.
locale.localeconv()[function] Returns numeric and monetary locale-specific parameters.
locale.normalize(localename)[function] Returns a normalized locale code for the given locale\nname.
locale.resetlocale(category=0)[function] Sets the locale for category to the default setting.
locale.setlocale(category, locale=None)[function] Set the locale for the given category.  The locale can be\na string, an iterable of two strings (language code and encoding),\nor None.
locale.str(val)[function] Convert float to string, taking the locale into account.
locale.strcoll(os1, os2, /)Compares two strings according to the locale.
locale.strxfrm(string, /)Return a string that can be used as a key for locale-aware comparisons.
locals()Return a dictionary containing the current scope's local variables.
logging
logging.BASIC_FORMAT
logging.BufferingFormatter(linefmt=None)[class] A formatter suitable for formatting a number of records.
logging.CRITICAL
logging.DEBUG
logging.ERROR
logging.FATAL
logging.FileHandler(filename, mode='a', encoding=None, delay=False,\n  errors=None)[class] A handler class which writes formatted logging records to disk files.
logging.Filter(name='')[class] Filter instances are used to perform arbitrary filtering of LogRecords.
logging.Formatter(fmt=None, datefmt=None, style='%', validate=True, *,\n  defaults=None)[class] Formatter instances are used to convert a LogRecord to text.
logging.Handler(level=0)[class] Handler instances dispatch logging events to specific destinations.
logging.INFO
logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info,\n  func=None, sinfo=None, **kwargs)[class] A LogRecord instance represents an event being logged.
logging.Logger(name, level=0)[class] Instances of the Logger class represent a single logging channel. A\n"logging channel" indicates an area of an application. Exactly how an\n"area" is defined is up to the application developer. Since an\napplication can have any number of areas, logging channels are identified\nby a unique string. Application areas can be nested (e.g. an area\nof "input processing" might include sub-areas "read CSV files", "read\nXLS files" and "read Gnumeric files"). To cater for this natural nesting,\nchannel names are organized into a namespace hierarchy where levels are\nseparated by periods, much like the Java or Python package namespace. So\nin the instance given above, channel names might be "input" for the upper\nlevel, and "input.csv", "input.xls" and "input.gnu" for the sub-levels.\nThere is no arbitrary limit to the depth of nesting.
logging.LoggerAdapter(logger, extra=None)[class] An adapter for loggers which makes it easier to specify contextual\ninformation in logging output.
logging.NOTSET
logging.NullHandler(level=0)[class] This handler does nothing. It's intended to be used to avoid the\n"No handlers could be found for logger XXX" one-off warning. This is\nimportant for library code, which may contain code to log events. If a user\nof the library does not configure logging, the one-off warning might be\nproduced; to avoid this, the library developer simply needs to instantiate\na NullHandler and add it to the top-level logger of the library module or\npackage.
logging.StreamHandler(stream=None)[class] A handler class which writes logging records, appropriately formatted,\nto a stream. Note that this class does not close the stream, as\nsys.stdout or sys.stderr may be used.
logging.WARN
logging.WARNING
logging.addLevelName(level, levelName)[function] Associate 'levelName' with 'level'.
logging.basicConfig(**kwargs)[function] Do basic configuration for the logging system.
logging.captureWarnings(capture)[function] If capture is true, redirect all warnings to the logging package.\nIf capture is False, ensure that warnings are not redirected to logging\nbut to their original destinations.
logging.critical(msg, *args, **kwargs)[function] Log a message with severity 'CRITICAL' on the root logger. If the logger\nhas no handlers, call basicConfig() to add a console handler with a\npre-defined format.
logging.debug(msg, *args, **kwargs)[function] Log a message with severity 'DEBUG' on the root logger. If the logger has\nno handlers, call basicConfig() to add a console handler with a pre-defined\nformat.
logging.disable(level=50)[function] Disable all logging calls of severity 'level' and below.
logging.error(msg, *args, **kwargs)[function] Log a message with severity 'ERROR' on the root logger. If the logger has\nno handlers, call basicConfig() to add a console handler with a pre-defined\nformat.
logging.exception(msg, *args, *, exc_info=True, **kwargs)[function] Log a message with severity 'ERROR' on the root logger, with exception\ninformation. If the logger has no handlers, basicConfig() is called to add\na console handler with a pre-defined format.
logging.fatal(msg, *args, **kwargs)[function] Don't use this function, use critical() instead.
logging.getHandlerByName(name)[function] Get a handler with the specified *name*, or None if there isn't one with\nthat name.
logging.getHandlerNames()[function] Return all known handler names as an immutable set.
logging.getLevelName(level)[function] Return the textual or numeric representation of logging level 'level'.
logging.getLevelNamesMapping()[function]
logging.getLogRecordFactory()[function] Return the factory to be used when instantiating a log record.
logging.getLogger(name=None)[function] Return a logger with the specified name, creating it if necessary.
logging.getLoggerClass()[function] Return the class to be used when instantiating a logger.
logging.info(msg, *args, **kwargs)[function] Log a message with severity 'INFO' on the root logger. If the logger has\nno handlers, call basicConfig() to add a console handler with a pre-defined\nformat.
logging.lastResort
logging.log(level, msg, *args, **kwargs)[function] Log 'msg % args' with the integer severity 'level' on the root logger. If\nthe logger has no handlers, call basicConfig() to add a console handler\nwith a pre-defined format.
logging.makeLogRecord(dict)[function] Make a LogRecord whose attributes are defined by the specified dictionary,\nThis function is useful for converting a logging event received over\na socket connection (which is sent as a dictionary) into a LogRecord\ninstance.
logging.raiseExceptions
logging.setLogRecordFactory(factory)[function] Set the factory to be used when instantiating a log record.
logging.setLoggerClass(klass)[function] Set the class to be used when instantiating a logger. The class should\ndefine __init__() such that only a name argument is required, and the\n__init__() should call Logger.__init__()
logging.shutdown()[function] Perform any cleanup actions in the logging system (e.g. flushing\nbuffers).
logging.warn(msg, *args, **kwargs)[function]
logging.warning(msg, *args, **kwargs)[function] Log a message with severity 'WARNING' on the root logger. If the logger has\nno handlers, call basicConfig() to add a console handler with a pre-defined\nformat.
lzma
lzma.CHECK_CRC32
lzma.CHECK_CRC64
lzma.CHECK_ID_MAX
lzma.CHECK_NONE
lzma.CHECK_SHA256
lzma.CHECK_UNKNOWN
lzma.FILTER_ARM
lzma.FILTER_ARMTHUMB
lzma.FILTER_DELTA
lzma.FILTER_IA64
lzma.FILTER_LZMA1
lzma.FILTER_LZMA2
lzma.FILTER_POWERPC
lzma.FILTER_SPARC
lzma.FILTER_X86
lzma.FORMAT_ALONE
lzma.FORMAT_AUTO
lzma.FORMAT_RAW
lzma.FORMAT_XZ
lzma.LZMACompressor(format=FORMAT_XZ, check=-1, preset=None, filters=None)[class] LZMACompressor(format=FORMAT_XZ, check=-1, preset=None, filters=None)
lzma.LZMADecompressor(format=0, memlimit=None, filters=None)[class] Create a decompressor object for decompressing data incrementally.
lzma.LZMAError()[class] Call to liblzma failed.
lzma.LZMAFile(filename=None, mode='r', *, format=None, check=-1, preset=None,\n  filters=None)[class] A file object providing transparent LZMA (de)compression.
lzma.MF_BT2
lzma.MF_BT3
lzma.MF_BT4
lzma.MF_HC3
lzma.MF_HC4
lzma.MODE_FAST
lzma.MODE_NORMAL
lzma.PRESET_DEFAULT
lzma.PRESET_EXTREME
lzma.compress(data, format=1, check=-1, preset=None, filters=None)[function] Compress a block of data.
lzma.decompress(data, format=0, memlimit=None, filters=None)[function] Decompress a block of data.
lzma.is_check_supported(check_id, /)Test whether the given integrity check is supported.
lzma.open(filename, mode='rb', *, format=None, check=-1, preset=None,\n  filters=None, encoding=None, errors=None, newline=None)[function] Open an LZMA-compressed file in binary or text mode.
mailbox
mailbox.Babyl(path, factory=None, create=True)[class] An Rmail-style Babyl mailbox.
mailbox.BabylMessage(message=None)[class] Message with Babyl-specific properties.
mailbox.Error()[class] Raised for module-specific errors.
mailbox.ExternalClashError()[class] Another process caused an action to fail.
mailbox.FormatError()[class] A file appears to have an invalid format.
mailbox.MH(path, factory=None, create=True)[class] An MH mailbox.
mailbox.MHMessage(message=None)[class] Message with MH-specific properties.
mailbox.MMDF(path, factory=None, create=True)[class] An MMDF mailbox.
mailbox.MMDFMessage(message=None)[class] Message with MMDF-specific properties.
mailbox.Mailbox(path, factory=None, create=True)[class] A group of messages in a particular place.
mailbox.Maildir(dirname, factory=None, create=True)[class] A qmail-style Maildir mailbox.
mailbox.MaildirMessage(message=None)[class] Message with Maildir-specific properties.
mailbox.Message(message=None)[class] Message with mailbox-format-specific properties.
mailbox.NoSuchMailboxError()[class] The specified mailbox does not exist and won't be created.
mailbox.NotEmptyError()[class] The specified mailbox is not empty and deletion was requested.
mailbox.mbox(path, factory=None, create=True)[class] A classic mbox mailbox.
mailbox.mboxMessage(message=None)[class] Message with mbox-specific properties.
mailcap
mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=[])[function] Find a match for a mailcap entry.
mailcap.getcaps()[function] Return a dictionary containing the mailcap database.
map(function, iterable, ...)[class] map(func, *iterables) --> map object
marshal
marshal.dump(value, file, version=4, /)Write the value on the open file.
marshal.dumps(value, version=4, /)Return the bytes object that would be written to a file by dump(value, file).
marshal.load(file, /)Read one value from the open file and return it.
marshal.loads(bytes, /)Convert the bytes-like object to a value.
marshal.version
match
math
math.acos(x, /)Return the arc cosine (measured in radians) of x.
math.acosh(x, /)Return the inverse hyperbolic cosine of x.
math.asin(x, /)Return the arc sine (measured in radians) of x.
math.asinh(x, /)Return the inverse hyperbolic sine of x.
math.atan(x, /)Return the arc tangent (measured in radians) of x.
math.atan2(y, x, /)Return the arc tangent (measured in radians) of y/x.
math.atanh(x, /)Return the inverse hyperbolic tangent of x.
math.cbrt(x, /)Return the cube root of x.
math.ceil(x, /)Return the ceiling of x as an Integral.
math.comb(n, k, /)Number of ways to choose k items from n items without repetition and without order.
math.copysign(x, y, /)Return a float with the magnitude (absolute value) of x but the sign of y.
math.cos(x, /)Return the cosine of x (measured in radians).
math.cosh(x, /)Return the hyperbolic cosine of x.
math.degrees(x, /)Convert angle x from radians to degrees.
math.dist(p, q, /)Return the Euclidean distance between two points p and q.
math.e
math.erf(x, /)Error function at x.
math.erfc(x, /)Complementary error function at x.
math.exp(x, /)Return e raised to the power of x.
math.exp2(x, /)Return 2 raised to the power of x.
math.expm1(x, /)Return exp(x)-1.
math.fabs(x, /)Return the absolute value of the float x.
math.factorial(n, /)Find n!.
math.floor(x, /)Return the floor of x as an Integral.
math.fmod(x, y, /)Return fmod(x, y), according to platform C.
math.frexp(x, /)Return the mantissa and exponent of x, as pair (m, e).
math.fsum(seq, /)Return an accurate floating point sum of values in the iterable seq.
math.gamma(x, /)Gamma function at x.
math.gcd(*integers)Greatest Common Divisor.
math.hypot(*coordinates)hypot(*coordinates) -> value
math.inf
math.isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)Determine whether two floating point numbers are close in value.
math.isfinite(x, /)Return True if x is neither an infinity nor a NaN, and False otherwise.
math.isinf(x, /)Return True if x is a positive or negative infinity, and False otherwise.
math.isnan(x, /)Return True if x is a NaN (not a number), and False otherwise.
math.isqrt(n, /)Return the integer part of the square root of the input.
math.lcm(*integers)Least Common Multiple.
math.ldexp(x, i, /)Return x * (2**i).
math.lgamma(x, /)Natural logarithm of absolute value of Gamma function at x.
math.log(x[, base])log(x, [base=math.e])\nReturn the logarithm of x to the given base.
math.log10(x, /)Return the base 10 logarithm of x.
math.log1p(x, /)Return the natural logarithm of 1+x (base e).
math.log2(x, /)Return the base 2 logarithm of x.
math.modf(x, /)Return the fractional and integer parts of x.
math.nan
math.nextafter(x, y, /, *, steps=None)Return the floating-point value the given number of steps after x towards y.
math.perm(n, k=None, /)Number of ways to choose k items from n items without repetition and with order.
math.pi
math.pow(x, y, /)Return x**y (x to the power of y).
math.prod(iterable, /, *, start=1)Calculate the product of all the elements in the input iterable.
math.radians(x, /)Convert angle x from degrees to radians.
math.remainder(x, y, /)Difference between x and the closest integer multiple of y.
math.sin(x, /)Return the sine of x (measured in radians).
math.sinh(x, /)Return the hyperbolic sine of x.
math.sqrt(x, /)Return the square root of x.
math.sumprod(p, q, /)Return the sum of products of values from two iterables p and q.
math.tan(x, /)Return the tangent of x (measured in radians).
math.tanh(x, /)Return the hyperbolic tangent of x.
math.tau
math.trunc(x, /)Truncates the Real x to the nearest Integral toward 0.
math.ulp(x, /)Return the value of the least significant bit of the float x.
max(arg1, arg2, *args[, key])max(iterable, *[, default=obj, key=func]) -> value\nmax(arg1, arg2, *args, *[, key=func]) -> value
max(iterable, *[, key, default])max(iterable, *[, default=obj, key=func]) -> value\nmax(arg1, arg2, *args, *[, key=func]) -> value
memoryview(object)[class] Create a new memoryview object which references the given object.
mimetypes
mimetypes.MimeTypes(filenames=﴾﴿, strict=True)[class] MIME-types datastore.
mimetypes.add_type(type, ext, strict=True)[function] Add a mapping between a type and an extension.
mimetypes.common_types
mimetypes.encodings_map
mimetypes.guess_all_extensions(type, strict=True)[function] Guess the extensions for a file based on its MIME type.
mimetypes.guess_extension(type, strict=True)[function] Guess the extension for a file based on its MIME type.
mimetypes.guess_type(url, strict=True)[function] Guess the type of a file based on its URL.
mimetypes.init(files=None)[function]
mimetypes.inited
mimetypes.knownfiles
mimetypes.read_mime_types(file)[function]
mimetypes.suffix_map
mimetypes.types_map
min(arg1, arg2, *args[, key])min(iterable, *[, default=obj, key=func]) -> value\nmin(arg1, arg2, *args, *[, key=func]) -> value
min(iterable, *[, key, default])min(iterable, *[, default=obj, key=func]) -> value\nmin(arg1, arg2, *args, *[, key=func]) -> value
mmap
mmap.ACCESS_COPY
mmap.ACCESS_DEFAULT
mmap.ACCESS_READ
mmap.ACCESS_WRITE
mmap.ALLOCATIONGRANULARITY
mmap.PAGESIZE
mmap.error()[class] Base class for I/O related errors.
mmap.mmap(fileno, length, flags=MAP_SHARED, prot=PROT_WRITE|PROT_READ,\n  access=ACCESS_DEFAULT[, offset])[class] Windows: mmap(fileno, length[, tagname[, access[, offset]]])
mmap.mmap(fileno, length, tagname=None, access=ACCESS_DEFAULT[, offset])[class] Windows: mmap(fileno, length[, tagname[, access[, offset]]])
modulefinder
modulefinder.AddPackagePath(packagename, path)[function]
modulefinder.Module(name, file=None, path=None)[class]
modulefinder.ModuleFinder(path=None, debug=0, excludes=None,\n  replace_paths=None)[class]
modulefinder.ReplacePackage(oldname, newname)[function]
modulefinder._C_BUILTIN
modulefinder._C_EXTENSION
modulefinder._PKG_DIRECTORY
modulefinder._PY_COMPILED
modulefinder._PY_FROZEN
modulefinder._PY_SOURCE
modulefinder._SEARCH_ERROR
modulefinder._find_module(name, path=None)[function] An importlib reimplementation of imp.find_module (for our purposes).
modulefinder.packagePathMap
modulefinder.replacePackageMap
modulefinder.test()[function]
msilib
msilib.AMD64
msilib.Binary(fname)[class]
msilib.CAB(name)[class]
msilib.Control(dlg, name)[class]
msilib.CreateRecord(count, /)Return a new record object.
msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)[class]
msilib.Directory(db, cab, basedir, physical, _logical, default,\n  componentflags=None)[class]
msilib.FCICreate(cabname, files, /)Create a new CAB file.
msilib.Feature(db, id, title, desc, display, level=1, parent=None,\n  directory=None, attributes=0)[class]
msilib.MSICOLINFO_NAMES
msilib.MSICOLINFO_TYPES
msilib.MSIDBOPEN_CREATE
msilib.MSIDBOPEN_CREATEDIRECT
msilib.MSIDBOPEN_DIRECT
msilib.MSIDBOPEN_PATCHFILE
msilib.MSIDBOPEN_READONLY
msilib.MSIDBOPEN_TRANSACT
msilib.MSIError()[class] Common base class for all non-exit exceptions.
msilib.MSIMODIFY_ASSIGN
msilib.MSIMODIFY_DELETE
msilib.MSIMODIFY_INSERT
msilib.MSIMODIFY_INSERT_TEMPORARY
msilib.MSIMODIFY_MERGE
msilib.MSIMODIFY_REFRESH
msilib.MSIMODIFY_REPLACE
msilib.MSIMODIFY_SEEK
msilib.MSIMODIFY_UPDATE
msilib.MSIMODIFY_VALIDATE
msilib.MSIMODIFY_VALIDATE_DELETE
msilib.MSIMODIFY_VALIDATE_FIELD
msilib.MSIMODIFY_VALIDATE_NEW
msilib.OpenDatabase(path, persist, /)Return a new database object.
msilib.PID_APPNAME
msilib.PID_AUTHOR
msilib.PID_CHARCOUNT
msilib.PID_CODEPAGE
msilib.PID_COMMENTS
msilib.PID_CREATE_DTM
msilib.PID_KEYWORDS
msilib.PID_LASTAUTHOR
msilib.PID_LASTPRINTED
msilib.PID_LASTSAVE_DTM
msilib.PID_PAGECOUNT
msilib.PID_REVNUMBER
msilib.PID_SECURITY
msilib.PID_SUBJECT
msilib.PID_TEMPLATE
msilib.PID_TITLE
msilib.PID_WORDCOUNT
msilib.RadioButtonGroup(dlg, name, property)[class]
msilib.Table(name)[class]
msilib.UuidCreate()Return the string representation of a new unique identifier.
msilib.Win64
msilib.add_data(db, table, values)[function]
msilib.add_stream(db, name, path)[function]
msilib.add_tables(db, module)[function]
msilib.change_sequence(seq, action, seqno=<??>, cond=<??>)[function] Change the sequence number of an action in a sequence list
msilib.datasizemask
msilib.gen_uuid()[function]
msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion,\n  Manufacturer)[function]
msilib.knownbits
msilib.make_id(str)[function]
msilib.type_binary
msilib.type_key
msilib.type_localizable
msilib.type_long
msilib.type_nullable
msilib.type_short
msilib.type_string
msilib.type_valid
msilib.typemask
msvcrt
msvcrt.CRT_ASSEMBLY_VERSION
msvcrt.GetErrorMode()Wrapper around GetErrorMode.
msvcrt.LK_LOCK
msvcrt.LK_NBLCK
msvcrt.LK_NBRLCK
msvcrt.LK_RLCK
msvcrt.LK_UNLCK
msvcrt.SEM_FAILCRITICALERRORS
msvcrt.SEM_NOALIGNMENTFAULTEXCEPT
msvcrt.SEM_NOGPFAULTERRORBOX
msvcrt.SEM_NOOPENFILEERRORBOX
msvcrt.SetErrorMode(mode, /)Wrapper around SetErrorMode.
msvcrt.get_osfhandle(fd, /)Return the file handle for the file descriptor fd.
msvcrt.getch()Read a keypress and return the resulting character as a byte string.
msvcrt.getche()Similar to getch(), but the keypress will be echoed if possible.
msvcrt.getwch()Wide char variant of getch(), returning a Unicode value.
msvcrt.getwche()Wide char variant of getche(), returning a Unicode value.
msvcrt.heapmin()Minimize the malloc() heap.
msvcrt.kbhit()Return true if a keypress is waiting to be read.
msvcrt.locking(fd, mode, nbytes, /)Lock part of a file based on file descriptor fd from the C runtime.
msvcrt.open_osfhandle(handle, flags, /)Create a C runtime file descriptor from the file handle handle.
msvcrt.putch(char, /)Print the byte string char to the console without buffering.
msvcrt.putwch(unicode_char, /)Wide char variant of putch(), accepting a Unicode value.
msvcrt.setmode(fd, mode, /)Set the line-end translation mode for the file descriptor fd.
msvcrt.ungetch(char, /)Opposite of getch.
msvcrt.ungetwch(unicode_char, /)Wide char variant of ungetch(), accepting a Unicode value.
multiprocessing
multiprocessing.Array(typecode_or_type, size_or_initializer, *, lock=True)[method] Returns a synchronized shared array
multiprocessing.AuthenticationError()[class] Common base class for all non-exit exceptions.
multiprocessing.Barrier(parties, action=None, timeout=None)[method] Returns a barrier object
multiprocessing.BoundedSemaphore(value=1)[method] Returns a bounded semaphore object
multiprocessing.BufferTooShort()[class] Common base class for all non-exit exceptions.
multiprocessing.Condition(lock=None)[method] Returns a condition object
multiprocessing.Event()[method] Returns an event object
multiprocessing.JoinableQueue(maxsize=0)[method] Returns a queue object
multiprocessing.Lock()[method] Returns a non-recursive lock object
multiprocessing.Manager()[method] Returns a manager associated with a running server process
multiprocessing.Pipe(duplex=True)[method] Returns two connection object connected by a pipe
multiprocessing.Pool(processes=None, initializer=None, initargs=﴾﴿,\n  maxtasksperchild=None)[method] Returns a process pool object
multiprocessing.Process(group=None, target=None, name=None, args=﴾﴿, kwargs={},\n  *, daemon=None)[class] Process objects represent activity that is run in a separate process
multiprocessing.ProcessError()[class] Common base class for all non-exit exceptions.
multiprocessing.Queue(maxsize=0)[method] Returns a queue object
multiprocessing.RLock()[method] Returns a recursive lock object
multiprocessing.RawArray(typecode_or_type, size_or_initializer)[method] Returns a shared array
multiprocessing.RawValue(typecode_or_type, *args)[method] Returns a shared object
multiprocessing.Semaphore(value=1)[method] Returns a semaphore object
multiprocessing.SimpleQueue()[method] Returns a queue object
multiprocessing.TimeoutError()[class] Common base class for all non-exit exceptions.
multiprocessing.Value(typecode_or_type, *args, *, lock=True)[method] Returns a synchronized shared object
multiprocessing.active_children()[function] Return list of process objects corresponding to live child processes
multiprocessing.allow_connection_pickling()[method] Install support for sending connections and sockets\nbetween processes
multiprocessing.connection
multiprocessing.connection.Client(address, family=None, authkey=None)[function] Returns a connection to the address of a `Listener`
multiprocessing.connection.Listener(address=None, family=None, backlog=1,\n  authkey=None)[class] Returns a listener object.
multiprocessing.connection.Pipe(duplex=True)[function] Returns pair of connection objects at either end of a pipe
multiprocessing.connection.wait(object_list, timeout=None)[function] Wait till an object in object_list is ready/readable.
multiprocessing.context
multiprocessing.cpu_count()[method] Returns the number of CPUs in the system
multiprocessing.current_process()[function] Return process object representing the current process
multiprocessing.dummy
multiprocessing.dummy.Barrier(parties, action=None, timeout=None)[class] Implements a Barrier.
multiprocessing.dummy.BoundedSemaphore(value=1)[class] Implements a bounded semaphore.
multiprocessing.dummy.Condition(lock=None)[class] Class that implements a condition variable.
multiprocessing.dummy.Event()[class] Class implementing event objects.
multiprocessing.dummy.JoinableQueue(maxsize=0)[class] Create a queue object with a given maximum size.
multiprocessing.dummy.Lock()allocate_lock() -> lock object\n(allocate() is an obsolete synonym)
multiprocessing.dummy.Manager()[function]
multiprocessing.dummy.Pipe(duplex=True)[function]
multiprocessing.dummy.Pool(processes=None, initializer=None, initargs=﴾﴿)[function]
multiprocessing.dummy.Process(group=None, target=None, name=None, args=﴾﴿,\n  kwargs={})[class] A class that represents a thread of control.
multiprocessing.dummy.Queue(maxsize=0)[class] Create a queue object with a given maximum size.
multiprocessing.dummy.RLock(*args, **kwargs)[function] Factory function that returns a new reentrant lock.
multiprocessing.dummy.Semaphore(value=1)[class] This class implements semaphore objects.
multiprocessing.dummy.active_children()[function]
multiprocessing.dummy.connection
multiprocessing.dummy.connection.Client(address)[function]
multiprocessing.dummy.connection.Listener(address=None, family=None, backlog=1)[class]
multiprocessing.dummy.connection.Pipe(duplex=True)[function]
multiprocessing.dummy.current_process()[function] Return the current Thread object, corresponding to the caller's thread of control.
multiprocessing.dummy.freeze_support()[function]
multiprocessing.freeze_support()[method] Check whether this is a fake forked process in a frozen executable.\nIf so then run code specified by commandline and exit.
multiprocessing.get_all_start_methods()[method] Returns a list of the supported start methods, default first.
multiprocessing.get_context(method=None)[method]
multiprocessing.get_logger()[method] Return package logger -- if it does not already exist then\nit is created.
multiprocessing.get_start_method(allow_none=False)[method]
multiprocessing.heap
multiprocessing.heap.BufferWrapper(size)[class]
multiprocessing.log_to_stderr(level=None)[method] Turn on logging and add a handler which prints to stderr
multiprocessing.managers
multiprocessing.managers.BaseManager(address=None, authkey=None,\n  serializer='pickle', ctx=None, *, shutdown_timeout=1.0)[class] Base class for managers
multiprocessing.managers.BaseProxy(token, serializer, manager=None,\n  authkey=None, exposed=None, incref=True, manager_owned=False)[class] A base for proxies of shared objects
multiprocessing.managers.SharedMemoryManager(*args, **kwargs)[class] Like SyncManager but uses SharedMemoryServer instead of Server.
multiprocessing.managers.SyncManager(address=None, authkey=None,\n  serializer='pickle', ctx=None, *, shutdown_timeout=1.0)[class] Subclass of `BaseManager` which supports a number of shared object types.
multiprocessing.managers.Token(typeid, address, id)[class] Type to uniquely identify a shared object
multiprocessing.parent_process()[function] Return process object representing the parent process
multiprocessing.pool
multiprocessing.pool.Pool(processes=None, initializer=None, initargs=﴾﴿,\n  maxtasksperchild=None, context=None)[class] Class which supports an async version of applying functions to arguments.
multiprocessing.pool.ThreadPool(processes=None, initializer=None, initargs=﴾﴿)[class] Class which supports an async version of applying functions to arguments.
multiprocessing.process
multiprocessing.process.BaseProcess(group=None, target=None, name=None,\n  args=﴾﴿, kwargs={}, *, daemon=None)[class] Process objects represent activity that is run in a separate process
multiprocessing.process.active_children()[function] Return list of process objects corresponding to live child processes
multiprocessing.process.current_process()[function] Return process object representing the current process
multiprocessing.process.parent_process()[function] Return process object representing the parent process
multiprocessing.reduction
multiprocessing.reduction.DupHandle(handle, access, pid=None)[class] Picklable wrapper for a handle.
multiprocessing.reduction.ForkingPickler(*args)[class] Pickler subclass used by multiprocessing.
multiprocessing.reduction.dump(obj, file, protocol=None)[function] Replacement for pickle.dump() using ForkingPickler.
multiprocessing.reduction.duplicate(handle, target_process=None,\n  inheritable=False, *, source_process=None)[function] Duplicate a handle.  (target_process is a handle not a pid!)
multiprocessing.reduction.recv_handle(conn)[function] Receive a handle over a local connection.
multiprocessing.reduction.register(type, reduce)[method] Register a reduce function for a type.
multiprocessing.reduction.send_handle(conn, handle, destination_pid)[function] Send a handle over a local connection.
multiprocessing.reduction.steal_handle(source_pid, handle)[function] Steal a handle from process identified by source_pid.
multiprocessing.resource_tracker
multiprocessing.resource_tracker.ensure_running()[method] Make sure that resource tracker process is running.
multiprocessing.resource_tracker.register(name, rtype)[method] Register name of resource with resource tracker.
multiprocessing.resource_tracker.unregister(name, rtype)[method] Unregister name of resource with resource tracker.
multiprocessing.set_executable(executable)[method] Sets the path to a python.exe or pythonw.exe binary used to run\nchild processes instead of sys.executable when using the 'spawn'\nstart method.  Useful for people embedding Python.
multiprocessing.set_forkserver_preload(module_names)[method] Set list of module names to try to load in forkserver process.\nThis is really just a hint.
multiprocessing.set_start_method(method, force=False)[method]
multiprocessing.shared_memory
multiprocessing.shared_memory.ShareableList(sequence=None, *, name=None)[class] Pattern for a mutable list-like object shareable via a shared\nmemory block.  It differs from the built-in list type in that these\nlists can not change their overall length (i.e. no append, insert,\netc.)
multiprocessing.shared_memory.SharedMemory(name=None, create=False, size=0)[class] Creates a new shared memory block or attaches to an existing\nshared memory block.
multiprocessing.sharedctypes
multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer, *,\n  lock=True, ctx=None)[function] Return a synchronization wrapper for a RawArray
multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)[function] Returns a ctypes array allocated from shared memory
multiprocessing.sharedctypes.RawValue(typecode_or_type, *args)[function] Returns a ctypes object allocated from shared memory
multiprocessing.sharedctypes.Value(typecode_or_type, *args, *, lock=True,\n  ctx=None)[function] Return a synchronization wrapper for a Value
multiprocessing.sharedctypes.copy(obj)[function]
multiprocessing.sharedctypes.synchronized(obj, lock=None, ctx=None)[function]
multiprocessing.spawn
multiprocessing.spawn._main(fd, parent_sentinel)[function]
multiprocessing.spawn.freeze_support()[function] Run code for process object if this in not the main process
multiprocessing.spawn.get_command_line(**kwds)[function] Returns prefix of command line used for spawning a child process
multiprocessing.spawn.get_executable()[function]
multiprocessing.spawn.get_preparation_data(name)[function] Return info about parent needed by child to unpickle process object
multiprocessing.spawn.import_main_path(main_path)[function] Set sys.modules['__main__'] to module at main_path
multiprocessing.spawn.set_executable(exe)[function]
multiprocessing.util
multiprocessing.util.Finalize(obj, callback, args=﴾﴿, kwargs=None,\n  exitpriority=None)[class] Class which supports object finalization using weakrefs
multiprocessing.util.ForkAwareLocal()[class] Thread-local data
multiprocessing.util.ForkAwareThreadLock()[class]
multiprocessing.util.SUBDEBUG
multiprocessing.util.SUBWARNING
multiprocessing.util.close_all_fds_except(fds)[function]
multiprocessing.util.debug(msg, *args)[function]
multiprocessing.util.get_logger()[function] Returns logger used by multiprocessing
multiprocessing.util.get_temp_dir()[function]
multiprocessing.util.info(msg, *args)[function]
multiprocessing.util.is_exiting()[function] Returns true if the process is shutting down
multiprocessing.util.log_to_stderr(level=None)[function] Turn on logging and add a handler which prints to stderr
multiprocessing.util.register_after_fork(obj, func)[function]
multiprocessing.util.sub_debug(msg, *args)[function]
multiprocessing.util.sub_warning(msg, *args)[function]
netrc
netrc.NetrcParseError(msg, filename=None, lineno=None)[class] Exception raised on syntax errors in the .netrc file.
netrc.netrc(file=None)[class]
next(iterator[, default])Return the next item from the iterator.
nntplib
nntplib.NNTP(host, port=119, user=None, password=None, readermode=None,\n  usenetrc=False, timeout=<??>)[class]
nntplib.NNTPDataError(*args)[class] Error in response data
nntplib.NNTPError(*args)[class] Base class for all nntplib exceptions
nntplib.NNTPPermanentError(*args)[class] 5xx errors
nntplib.NNTPProtocolError(*args)[class] Response does not begin with [1-5]
nntplib.NNTPReplyError(*args)[class] Unexpected [123]xx reply
nntplib.NNTPTemporaryError(*args)[class] 4xx errors
nntplib.NNTP_SSL(host, port=563, user=None, password=None, ssl_context=None,\n  readermode=None, usenetrc=False, timeout=<??>)[class]
nntplib.decode_header(header_str)[function] Takes a unicode string representing a munged header value\nand decodes it as a (possibly non-ASCII) readable value.
nonlocal
not
nt
nt.DirEntry()[class]
nt.EX_OK
nt.F_OK
nt.O_APPEND
nt.O_BINARY
nt.O_CREAT
nt.O_EXCL
nt.O_NOINHERIT
nt.O_RANDOM
nt.O_RDONLY
nt.O_RDWR
nt.O_SEQUENTIAL
nt.O_SHORT_LIVED
nt.O_TEMPORARY
nt.O_TEXT
nt.O_TRUNC
nt.O_WRONLY
nt.P_DETACH
nt.P_NOWAIT
nt.P_NOWAITO
nt.P_OVERLAY
nt.P_WAIT
nt.R_OK
nt.TMP_MAX
nt.W_OK
nt.X_OK
nt.abort()Abort the interpreter immediately.
nt.access(path, mode, *, dir_fd=None, effective_ids=False,\n  follow_symlinks=True)Use the real uid/gid to test for access to a path.
nt.chdir(path)Change the current working directory to the specified path.
nt.chmod(path, mode, *, dir_fd=None, follow_symlinks=True)Change the access permissions of a file.
nt.close(fd)Close a file descriptor.
nt.closerange(fd_low, fd_high, /)Closes all file descriptors in [fd_low, fd_high), ignoring errors.
nt.cpu_count()Return the number of CPUs in the system; return None if indeterminable.
nt.device_encoding(fd)Return a string describing the encoding of a terminal's file descriptor.
nt.dup(fd, /)Return a duplicate of a file descriptor.
nt.dup2(fd, fd2, inheritable=True)Duplicate file descriptor.
nt.environ
nt.error()[class] Base class for I/O related errors.
nt.execv(path, argv, /)Execute an executable path with arguments, replacing current process.
nt.execve(path, argv, env)Execute an executable path with arguments, replacing current process.
nt.fspath(path)Return the file system path representation of the object.
nt.fstat(fd)Perform a stat system call on the given file descriptor.
nt.fsync(fd)Force write of fd to disk.
nt.ftruncate(fd, length, /)Truncate a file, specified by file descriptor, to a specific length.
nt.get_blocking(fd, /)Get the blocking mode of the file descriptor.
nt.get_handle_inheritable(handle, /)Get the close-on-exe flag of the specified file descriptor.
nt.get_inheritable(fd, /)Get the close-on-exe flag of the specified file descriptor.
nt.get_terminal_size()Return the size of the terminal window as (columns, lines).
nt.getcwd()Return a unicode string representing the current working directory.
nt.getcwdb()Return a bytes string representing the current working directory.
nt.getlogin()Return the actual login name.
nt.getpid()Return the current process id.
nt.getppid()Return the parent's process id.
nt.isatty(fd, /)Return True if the fd is connected to a terminal.
nt.kill(pid, signal, /)Kill a process with a signal.
nt.link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True)Create a hard link to a file.
nt.listdir(path=None)Return a list containing the names of the files in the directory.
nt.listdrives()Return a list containing the names of drives in the system.
nt.listmounts(volume)Return a list containing mount points for a particular volume.
nt.listvolumes()Return a list containing the volumes in the system.
nt.lseek(fd, position, whence, /)Set the position of a file descriptor.  Return the new position.
nt.lstat(path, *, dir_fd=None)Perform a stat system call on the given path, without following symbolic links.
nt.mkdir(path, mode=511, *, dir_fd=None)Create a directory.
nt.open(path, flags, mode=511, *, dir_fd=None)Open a file for low level IO.  Returns a file descriptor (integer).
nt.pipe()Create a pipe.
nt.putenv(name, value, /)Change or add an environment variable.
nt.read(fd, length, /)Read from a file descriptor.  Returns a bytes object.
nt.readlink(path, *, dir_fd=None)Return a string representing the path to which the symbolic link points.
nt.remove(path, *, dir_fd=None)Remove a file (same as unlink()).
nt.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)Rename a file or directory.
nt.replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None)Rename a file or directory, overwriting the destination.
nt.rmdir(path, *, dir_fd=None)Remove a directory.
nt.scandir(path=None)Return an iterator of DirEntry objects for given path.
nt.set_blocking(fd, blocking, /)Set the blocking mode of the specified file descriptor.
nt.set_handle_inheritable(handle, inheritable, /)Set the inheritable flag of the specified handle.
nt.set_inheritable(fd, inheritable, /)Set the inheritable flag of the specified file descriptor.
nt.spawnv(mode, path, argv, /)Execute the program specified by path in a new process.
nt.spawnve(mode, path, argv, env, /)Execute the program specified by path in a new process.
nt.startfile()Start a file with its associated application.
nt.stat(path, *, dir_fd=None, follow_symlinks=True)Perform a stat system call on the given path.
nt.stat_result(iterable=﴾﴿, /)[class] stat_result: Result from stat, fstat, or lstat.
nt.statvfs_result(iterable=﴾﴿, /)[class] statvfs_result: Result from statvfs or fstatvfs.
nt.strerror(code, /)Translate an error code to a message string.
nt.symlink(src, dst, target_is_directory=False, *, dir_fd=None)Create a symbolic link pointing to src named dst.
nt.system(command)Execute the command in a subshell.
nt.terminal_size(iterable=﴾﴿, /)[class] A tuple of (columns, lines) for holding terminal window size
nt.times()Return a collection containing process timing information.
nt.times_result(iterable=﴾﴿, /)[class] times_result: Result from os.times().
nt.truncate(path, length)Truncate a file, specified by path, to a specific length.
nt.umask(mask, /)Set the current numeric umask and return the previous umask.
nt.uname_result(iterable=﴾﴿, /)[class] uname_result: Result from os.uname().
nt.unlink(path, *, dir_fd=None)Remove a file (same as remove()).
nt.unsetenv(name, /)Delete an environment variable.
nt.urandom(size, /)Return a bytes object containing random bytes suitable for cryptographic use.
nt.utime()Set the access and modified time of path.
nt.waitpid(pid, options, /)Wait for completion of a given process.
nt.waitstatus_to_exitcode(status)Convert a wait status to an exit code.
nt.write(fd, data, /)Write a bytes object to a file descriptor.
ntpath
ntpath.abspath(path)[function] Return the absolute version of a path.
ntpath.altsep
ntpath.basename(p)[function] Returns the final component of a pathname
ntpath.commonpath(paths)[function] Given a sequence of path names, returns the longest common sub-path.
ntpath.commonprefix(m)[function] Given a list of pathnames, returns the longest common leading component
ntpath.curdir
ntpath.defpath
ntpath.devnull
ntpath.dirname(p)[function] Returns the directory component of a pathname
ntpath.exists(path)Test whether a path exists.  Returns False for broken symbolic links
ntpath.expanduser(path)[function] Expand ~ and ~user constructs.
ntpath.expandvars(path)[function] Expand shell variables of the forms $var, ${var} and %var%.
ntpath.extsep
ntpath.getatime(filename)[function] Return the last access time of a file, reported by os.stat().
ntpath.getctime(filename)[function] Return the metadata change time of a file, reported by os.stat().
ntpath.getmtime(filename)[function] Return the last modification time of a file, reported by os.stat().
ntpath.getsize(filename)[function] Return the size of a file, reported by os.stat().
ntpath.isabs(s)[function] Test whether a path is absolute
ntpath.isdir(path)Return true if the pathname refers to an existing directory.
ntpath.isfile(path)Test whether a path is a regular file
ntpath.isjunction(path)[function] Test whether a path is a junction
ntpath.islink(path)Test whether a path is a symbolic link
ntpath.ismount(path)[function] Test whether a path is a mount point (a drive root, the root of a\nshare, or a mounted volume)
ntpath.join(path, *paths)[function]
ntpath.lexists(path)[function] Test whether a path exists.  Returns True for broken symbolic links
ntpath.normcase(s)[function] Normalize case of pathname.
ntpath.normpath(path)[function] Normalize path, eliminating double slashes, etc.
ntpath.pardir
ntpath.pathsep
ntpath.realpath(path, *, strict=False)[function]
ntpath.relpath(path, start=None)[function] Return a relative version of a path
ntpath.samefile(f1, f2)[function] Test whether two pathnames reference the same actual file or directory
ntpath.sameopenfile(fp1, fp2)[function] Test whether two open file objects reference the same file
ntpath.samestat(s1, s2)[function] Test whether two stat buffers reference the same file
ntpath.sep
ntpath.split(p)[function] Split a pathname.
ntpath.splitdrive(p)[function] Split a pathname into drive/UNC sharepoint and relative path specifiers.\nReturns a 2-tuple (drive_or_unc, path); either part may be empty.
ntpath.splitext(p)[function] Split the extension from a pathname.
ntpath.splitroot(p)[function] Split a pathname into drive, root and tail. The drive is defined\nexactly as in splitdrive(). On Windows, the root may be a single path\nseparator or an empty string. The tail contains anything after the root.\nFor example:
ntpath.supports_unicode_filenames
nturl2path
nturl2path.pathname2url(p)[function] OS-specific conversion from a file system path to a relative URL\nof the 'file' scheme; not recommended for general use.
nturl2path.url2pathname(url)[function] OS-specific conversion from a relative URL of the 'file' scheme\nto a file system path; not recommended for general use.
numbers
numbers.Complex()[class] Complex defines the operations that work on the builtin complex type.
numbers.Integral()[class] Integral adds methods that work on integral numbers.
numbers.Number()[class] All numbers inherit from this class.
numbers.Rational()[class] .numerator and .denominator should be in lowest terms.
numbers.Real()[class] To Complex, Real adds the operations that work on real numbers.
object()[class] The base class of the class hierarchy.
oct(number, /)Return the octal representation of an integer.
opcode
opcode.EXTENDED_ARG
opcode.HAVE_ARGUMENT
opcode.cmp_op
opcode.hasarg
opcode.hascompare
opcode.hasconst
opcode.hasexc
opcode.hasfree
opcode.hasjabs
opcode.hasjrel
opcode.haslocal
opcode.hasname
opcode.opmap
opcode.opname
opcode.stack_effect(opcode, oparg=None, /, *, jump=None)Compute the stack effect of the opcode.
open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None,\n  closefd=True, opener=None)Open file and return a stream.  Raise OSError upon failure.
operator
operator.abs(a, /)Same as abs(a).
operator.add(a, b, /)Same as a + b.
operator.and_(a, b, /)Same as a & b.
operator.attrgetter(attr, /, *attrs)[class] Return a callable object that fetches the given attribute(s) from its operand.\nAfter f = attrgetter('name'), the call f(r) returns r.name.\nAfter g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).\nAfter h = attrgetter('name.first', 'name.last'), the call h(r) returns\n(r.name.first, r.name.last).
operator.call(obj, /, *args, **kwargs)Same as obj(*args, **kwargs).
operator.concat(a, b, /)Same as a + b, for a and b sequences.
operator.contains(a, b, /)Same as b in a (note reversed operands).
operator.countOf(a, b, /)Return the number of items in a which are, or which equal, b.
operator.delitem(a, b, /)Same as del a[b].
operator.eq(a, b, /)Same as a == b.
operator.floordiv(a, b, /)Same as a // b.
operator.ge(a, b, /)Same as a >= b.
operator.getitem(a, b, /)Same as a[b].
operator.gt(a, b, /)Same as a > b.
operator.iadd(a, b, /)Same as a += b.
operator.iand(a, b, /)Same as a &= b.
operator.iconcat(a, b, /)Same as a += b, for a and b sequences.
operator.ifloordiv(a, b, /)Same as a //= b.
operator.ilshift(a, b, /)Same as a <<= b.
operator.imatmul(a, b, /)Same as a @= b.
operator.imod(a, b, /)Same as a %= b.
operator.imul(a, b, /)Same as a *= b.
operator.index(a, /)Same as a.__index__()
operator.indexOf(a, b, /)Return the first index of b in a.
operator.inv(a, /)Same as ~a.
operator.invert(a, /)Same as ~a.
operator.ior(a, b, /)Same as a |= b.
operator.ipow(a, b, /)Same as a **= b.
operator.irshift(a, b, /)Same as a >>= b.
operator.is_(a, b, /)Same as a is b.
operator.is_not(a, b, /)Same as a is not b.
operator.isub(a, b, /)Same as a -= b.
operator.itemgetter(item, /, *items)[class] Return a callable object that fetches the given item(s) from its operand.\nAfter f = itemgetter(2), the call f(r) returns r[2].\nAfter g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])
operator.itruediv(a, b, /)Same as a /= b.
operator.ixor(a, b, /)Same as a ^= b.
operator.le(a, b, /)Same as a <= b.
operator.length_hint(obj, default=0, /)Return an estimate of the number of items in obj.
operator.lshift(a, b, /)Same as a << b.
operator.lt(a, b, /)Same as a < b.
operator.matmul(a, b, /)Same as a @ b.
operator.methodcaller(name, /, *args, **kwargs)[class] Return a callable object that calls the given method on its operand.\nAfter f = methodcaller('name'), the call f(r) returns r.name().\nAfter g = methodcaller('name', 'date', foo=1), the call g(r) returns\nr.name('date', foo=1).
operator.mod(a, b, /)Same as a % b.
operator.mul(a, b, /)Same as a * b.
operator.ne(a, b, /)Same as a != b.
operator.neg(a, /)Same as -a.
operator.not_(a, /)Same as not a.
operator.or_(a, b, /)Same as a | b.
operator.pos(a, /)Same as +a.
operator.pow(a, b, /)Same as a ** b.
operator.rshift(a, b, /)Same as a >> b.
operator.setitem(a, b, c, /)Same as a[b] = c.
operator.sub(a, b, /)Same as a - b.
operator.truediv(a, b, /)Same as a / b.
operator.truth(a, /)Return True if a is true, False otherwise.
operator.xor(a, b, /)Same as a ^ b.
optparse
optparse.BadOptionError(opt_str)[class] Raised if an invalid option is seen on the command line.
optparse.HelpFormatter(indent_increment, max_help_position, width, short_first)[class] Abstract base class for formatting option help.  OptionParser\ninstances should use one of the HelpFormatter subclasses for\nformatting help; by default IndentedHelpFormatter is used.
optparse.IndentedHelpFormatter(indent_increment=2, max_help_position=24,\n  width=None, short_first=1)[class] Format help with indented section bodies.
optparse.OptParseError(msg)[class] Common base class for all non-exit exceptions.
optparse.Option(*opts, **attrs)[class] Instance attributes:\n  _short_opts : [string]\n  _long_opts : [string]
optparse.OptionConflictError(msg, option)[class] Raised if conflicting options are added to an OptionParser.
optparse.OptionContainer(option_class, conflict_handler, description)[class] Abstract base class.
optparse.OptionError(msg, option)[class] Raised if an Option instance is created with invalid or\ninconsistent arguments.
optparse.OptionGroup(parser, title, description=None)[class] Abstract base class.
optparse.OptionParser(usage=None, option_list=None, option_class=<??>,\n  version=None, conflict_handler='error', description=None, formatter=None,\n  add_help_option=True, prog=None, epilog=None)[class] Class attributes:\n  standard_option_list : [Option]\n    list of standard options that will be accepted by all instances\n    of this parser class (intended to be overridden by subclasses).
optparse.OptionValueError(msg)[class] Raised if an invalid option value is encountered on the command\nline.
optparse.SUPPRESS_HELP
optparse.SUPPRESS_USAGE
optparse.TitledHelpFormatter(indent_increment=0, max_help_position=24,\n  width=None, short_first=0)[class] Format help with underlined section headers.
optparse.Values(defaults=None)[class]
optparse.check_choice(option, opt, value)[function]
optparse.make_option(*opts, **attrs)[class] Instance attributes:\n  _short_opts : [string]\n  _long_opts : [string]
or
ord(c, /)Return the Unicode code point for a one-character string.
os
os.DirEntry()[class]
os.EX_OK
os.F_OK
os.GenericAlias()[class] Represent a PEP 585 generic type
os.Mapping()[class] A Mapping is a generic container for associating key/value\npairs.
os.MutableMapping()[class] A MutableMapping is a generic container for associating\nkey/value pairs.
os.O_APPEND
os.O_BINARY
os.O_CREAT
os.O_EXCL
os.O_NOINHERIT
os.O_RANDOM
os.O_RDONLY
os.O_RDWR
os.O_SEQUENTIAL
os.O_SHORT_LIVED
os.O_TEMPORARY
os.O_TEXT
os.O_TRUNC
os.O_WRONLY
os.P_DETACH
os.P_NOWAIT
os.P_NOWAITO
os.P_OVERLAY
os.P_WAIT
os.PathLike()[class] Abstract base class for implementing the file system path protocol.
os.R_OK
os.SEEK_CUR
os.SEEK_END
os.SEEK_SET
os.TMP_MAX
os.W_OK
os.X_OK
os._exit(status)Exit to the system with specified status, without normal exit processing.
os.abort()Abort the interpreter immediately.
os.access(path, mode, *, dir_fd=None, effective_ids=False,\n  follow_symlinks=True)Use the real uid/gid to test for access to a path.
os.add_dll_directory(path)[function] Add a path to the DLL search path.
os.altsep
os.chdir(path)Change the current working directory to the specified path.
os.chmod(path, mode, *, dir_fd=None, follow_symlinks=True)Change the access permissions of a file.
os.close(fd)Close a file descriptor.
os.closerange(fd_low, fd_high, /)Closes all file descriptors in [fd_low, fd_high), ignoring errors.
os.cpu_count()Return the number of CPUs in the system; return None if indeterminable.
os.curdir
os.defpath
os.device_encoding(fd)Return a string describing the encoding of a terminal's file descriptor.
os.devnull
os.dup(fd, /)Return a duplicate of a file descriptor.
os.dup2(fd, fd2, inheritable=True)Duplicate file descriptor.
os.environ
os.error()[class] Base class for I/O related errors.
os.execl(file, *args)[function] execl(file, *args)
os.execle(file, *args)[function] execle(file, *args, env)
os.execlp(file, *args)[function] execlp(file, *args)
os.execlpe(file, *args)[function] execlpe(file, *args, env)
os.execv(path, argv, /)Execute an executable path with arguments, replacing current process.
os.execve(path, argv, env)Execute an executable path with arguments, replacing current process.
os.execvp(file, args)[function] execvp(file, args)
os.execvpe(file, args, env)[function] execvpe(file, args, env)
os.extsep
os.fdopen(fd, mode='r', buffering=-1, encoding=None, *args, **kwargs)[function]
os.fsdecode(filename)[function] Decode filename (an os.PathLike, bytes, or str) from the filesystem\nencoding with 'surrogateescape' error handler, return str unchanged. On\nWindows, use 'strict' error handler if the file system encoding is\n'mbcs' (which is the default encoding).
os.fsencode(filename)[function] Encode filename (an os.PathLike, bytes, or str) to the filesystem\nencoding with 'surrogateescape' error handler, return bytes unchanged.\nOn Windows, use 'strict' error handler if the file system encoding is\n'mbcs' (which is the default encoding).
os.fspath(path)Return the file system path representation of the object.
os.fstat(fd)Perform a stat system call on the given file descriptor.
os.fsync(fd)Force write of fd to disk.
os.ftruncate(fd, length, /)Truncate a file, specified by file descriptor, to a specific length.
os.get_blocking(fd, /)Get the blocking mode of the file descriptor.
os.get_exec_path(env=None)[function] Returns the sequence of directories that will be searched for the\nnamed executable (similar to a shell) when launching a process.
os.get_handle_inheritable(handle, /)Get the close-on-exe flag of the specified file descriptor.
os.get_inheritable(fd, /)Get the close-on-exe flag of the specified file descriptor.
os.get_terminal_size(fd=STDOUT_FILENO)Return the size of the terminal window as (columns, lines).
os.getcwd()Return a unicode string representing the current working directory.
os.getcwdb()Return a bytes string representing the current working directory.
os.getenv(key, default=None)[function] Get an environment variable, return None if it doesn't exist.\nThe optional second argument can specify an alternate default.\nkey, default and the result are str.
os.getlogin()Return the actual login name.
os.getpid()Return the current process id.
os.getppid()Return the parent's process id.
os.isatty(fd, /)Return True if the fd is connected to a terminal.
os.kill(pid, signal, /)Kill a process with a signal.
os.linesep
os.link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True)Create a hard link to a file.
os.listdir(path=None)Return a list containing the names of the files in the directory.
os.listdrives()Return a list containing the names of drives in the system.
os.listmounts(volume)Return a list containing mount points for a particular volume.
os.listvolumes()Return a list containing the volumes in the system.
os.lseek(fd, position, whence, /)Set the position of a file descriptor.  Return the new position.
os.lstat(path, *, dir_fd=None)Perform a stat system call on the given path, without following symbolic links.
os.makedirs(name, mode=511, exist_ok=False)[function] makedirs(name [, mode=0o777][, exist_ok=False])
os.mkdir(path, mode=511, *, dir_fd=None)Create a directory.
os.name
os.open(path, flags, mode=511, *, dir_fd=None)Open a file for low level IO.  Returns a file descriptor (integer).
os.pardir
os.path
os.path.abspath(path)[function] Return the absolute version of a path.
os.path.altsep
os.path.basename(p)[function] Returns the final component of a pathname
os.path.commonpath(paths)[function] Given a sequence of path names, returns the longest common sub-path.
os.path.commonprefix(m)[function] Given a list of pathnames, returns the longest common leading component
os.path.curdir
os.path.defpath
os.path.devnull
os.path.dirname(p)[function] Returns the directory component of a pathname
os.path.exists(path)Test whether a path exists.  Returns False for broken symbolic links
os.path.expanduser(path)[function] Expand ~ and ~user constructs.
os.path.expandvars(path)[function] Expand shell variables of the forms $var, ${var} and %var%.
os.path.extsep
os.path.getatime(filename)[function] Return the last access time of a file, reported by os.stat().
os.path.getctime(filename)[function] Return the metadata change time of a file, reported by os.stat().
os.path.getmtime(filename)[function] Return the last modification time of a file, reported by os.stat().
os.path.getsize(filename)[function] Return the size of a file, reported by os.stat().
os.path.isabs(s)[function] Test whether a path is absolute
os.path.isdir(path)Return true if the pathname refers to an existing directory.
os.path.isfile(path)Test whether a path is a regular file
os.path.isjunction(path)[function] Test whether a path is a junction
os.path.islink(path)Test whether a path is a symbolic link
os.path.ismount(path)[function] Test whether a path is a mount point (a drive root, the root of a\nshare, or a mounted volume)
os.path.join(path, *paths)[function]
os.path.lexists(path)[function] Test whether a path exists.  Returns True for broken symbolic links
os.path.normcase(s)[function] Normalize case of pathname.
os.path.normpath(path)[function] Normalize path, eliminating double slashes, etc.
os.path.pardir
os.path.pathsep
os.path.realpath(path, *, strict=False)[function]
os.path.relpath(path, start=None)[function] Return a relative version of a path
os.path.samefile(f1, f2)[function] Test whether two pathnames reference the same actual file or directory
os.path.sameopenfile(fp1, fp2)[function] Test whether two open file objects reference the same file
os.path.samestat(s1, s2)[function] Test whether two stat buffers reference the same file
os.path.sep
os.path.split(p)[function] Split a pathname.
os.path.splitdrive(p)[function] Split a pathname into drive/UNC sharepoint and relative path specifiers.\nReturns a 2-tuple (drive_or_unc, path); either part may be empty.
os.path.splitext(p)[function] Split the extension from a pathname.
os.path.splitroot(p)[function] Split a pathname into drive, root and tail. The drive is defined\nexactly as in splitdrive(). On Windows, the root may be a single path\nseparator or an empty string. The tail contains anything after the root.\nFor example:
os.path.supports_unicode_filenames
os.pathsep
os.pipe()Create a pipe.
os.popen(cmd, mode='r', buffering=-1)[function]
os.putenv(name, value, /)Change or add an environment variable.
os.read(fd, length, /)Read from a file descriptor.  Returns a bytes object.
os.readlink(path, *, dir_fd=None)Return a string representing the path to which the symbolic link points.
os.remove(path, *, dir_fd=None)Remove a file (same as unlink()).
os.removedirs(name)[function] removedirs(name)
os.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)Rename a file or directory.
os.renames(old, new)[function] renames(old, new)
os.replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None)Rename a file or directory, overwriting the destination.
os.rmdir(path, *, dir_fd=None)Remove a directory.
os.scandir(path=None)Return an iterator of DirEntry objects for given path.
os.sep
os.set_blocking(fd, blocking, /)Set the blocking mode of the specified file descriptor.
os.set_handle_inheritable(handle, inheritable, /)Set the inheritable flag of the specified handle.
os.set_inheritable(fd, inheritable, /)Set the inheritable flag of the specified file descriptor.
os.spawnl(mode, file, *args)[function] spawnl(mode, file, *args) -> integer
os.spawnle(mode, file, *args)[function] spawnle(mode, file, *args, env) -> integer
os.spawnv(mode, path, argv, /)Execute the program specified by path in a new process.
os.spawnve(mode, path, argv, env, /)Execute the program specified by path in a new process.
os.startfile(path[, operation])Start a file with its associated application.
os.stat(path, *, dir_fd=None, follow_symlinks=True)Perform a stat system call on the given path.
os.stat_result(iterable=﴾﴿, /)[class] stat_result: Result from stat, fstat, or lstat.
os.statvfs_result(iterable=﴾﴿, /)[class] statvfs_result: Result from statvfs or fstatvfs.
os.strerror(code, /)Translate an error code to a message string.
os.supports_bytes_environ
os.supports_dir_fd
os.supports_effective_ids
os.supports_fd
os.supports_follow_symlinks
os.symlink(src, dst, target_is_directory=False, *, dir_fd=None)Create a symbolic link pointing to src named dst.
os.system(command)Execute the command in a subshell.
os.terminal_size(iterable=﴾﴿, /)[class] A tuple of (columns, lines) for holding terminal window size
os.times()Return a collection containing process timing information.
os.times_result(iterable=﴾﴿, /)[class] times_result: Result from os.times().
os.truncate(path, length)Truncate a file, specified by path, to a specific length.
os.umask(mask, /)Set the current numeric umask and return the previous umask.
os.uname_result(iterable=﴾﴿, /)[class] uname_result: Result from os.uname().
os.unlink(path, *, dir_fd=None)Remove a file (same as remove()).
os.unsetenv(name, /)Delete an environment variable.
os.urandom(size, /)Return a bytes object containing random bytes suitable for cryptographic use.
os.utime(path, times=None, *, [ns, ]dir_fd=None, follow_symlinks=True)Set the access and modified time of path.
os.waitpid(pid, options, /)Wait for completion of a given process.
os.waitstatus_to_exitcode(status)Convert a wait status to an exit code.
os.walk(top, topdown=True, onerror=None, followlinks=False)[function] Directory tree generator.
os.write(fd, data, /)Write a bytes object to a file descriptor.
pass
pathlib
pathlib.Path(*args, **kwargs)[class] PurePath subclass that can make system calls.
pathlib.PosixPath(*args, **kwargs)[class] Path subclass for non-Windows systems.
pathlib.PurePath(*args, **kwargs)[class] Base class for manipulating paths without I/O.
pathlib.PurePosixPath(*args, **kwargs)[class] PurePath subclass for non-Windows systems.
pathlib.PureWindowsPath(*args, **kwargs)[class] PurePath subclass for Windows systems.
pathlib.WindowsPath(*args, **kwargs)[class] Path subclass for Windows systems.
pdb
pdb.Pdb(completekey='tab', stdin=None, stdout=None, skip=None, nosigint=False,\n  readrc=True)[class] Generic Python debugger base class.
pdb.help()[function]
pdb.pm()[function] Enter post-mortem debugging of the traceback found in sys.last_traceback.
pdb.post_mortem(t=None)[function] Enter post-mortem debugging of the given *traceback* object.
pdb.run(statement, globals=None, locals=None)[function] Execute the *statement* (given as a string or a code object)\nunder debugger control.
pdb.runcall(*args, **kwds)[function] Call the function (a function or method object, not a string)\nwith the given arguments.
pdb.runctx(statement, globals, locals)[function]
pdb.runeval(expression, globals=None, locals=None)[function] Evaluate the *expression* (given as a string or a code object)\nunder debugger control.
pdb.set_trace(*, header=None)[function] Enter the debugger at the calling stack frame.
pickle
pickle.ADDITEMS
pickle.APPEND
pickle.APPENDS
pickle.BINBYTES
pickle.BINBYTES8
pickle.BINFLOAT
pickle.BINGET
pickle.BININT
pickle.BININT1
pickle.BININT2
pickle.BINPERSID
pickle.BINPUT
pickle.BINSTRING
pickle.BINUNICODE
pickle.BINUNICODE8
pickle.BUILD
pickle.BYTEARRAY8
pickle.DEFAULT_PROTOCOL
pickle.DICT
pickle.DUP
pickle.EMPTY_DICT
pickle.EMPTY_LIST
pickle.EMPTY_SET
pickle.EMPTY_TUPLE
pickle.EXT1
pickle.EXT2
pickle.EXT4
pickle.FALSE
pickle.FLOAT
pickle.FRAME
pickle.FROZENSET
pickle.GET
pickle.GLOBAL
pickle.HIGHEST_PROTOCOL
pickle.INST
pickle.INT
pickle.LIST
pickle.LONG
pickle.LONG1
pickle.LONG4
pickle.LONG_BINGET
pickle.LONG_BINPUT
pickle.MARK
pickle.MEMOIZE
pickle.NEWFALSE
pickle.NEWOBJ
pickle.NEWOBJ_EX
pickle.NEWTRUE
pickle.NEXT_BUFFER
pickle.NONE
pickle.OBJ
pickle.PERSID
pickle.POP
pickle.POP_MARK
pickle.PROTO
pickle.PUT
pickle.PickleBuffer(buffer)[class] Wrapper for potentially out-of-band buffers
pickle.PickleError()[class] Common base class for all non-exit exceptions.
pickle.Pickler(file, protocol=None, fix_imports=True, buffer_callback=None)[class] This takes a binary file for writing a pickle data stream.
pickle.PicklingError()[class] Common base class for all non-exit exceptions.
pickle.READONLY_BUFFER
pickle.REDUCE
pickle.SETITEM
pickle.SETITEMS
pickle.SHORT_BINBYTES
pickle.SHORT_BINSTRING
pickle.SHORT_BINUNICODE
pickle.STACK_GLOBAL
pickle.STOP
pickle.STRING
pickle.TRUE
pickle.TUPLE
pickle.TUPLE1
pickle.TUPLE2
pickle.TUPLE3
pickle.UNICODE
pickle.Unpickler(file, *, fix_imports=True, encoding='ASCII', errors='strict',\n  buffers=﴾﴿)[class] This takes a binary file for reading a pickle data stream.
pickle.UnpicklingError()[class] Common base class for all non-exit exceptions.
pickle.dump(obj, file, protocol=None, *, fix_imports=True,\n  buffer_callback=None)Write a pickled representation of obj to the open file object file.
pickle.dumps(obj, protocol=None, *, fix_imports=True, buffer_callback=None)Return the pickled representation of the object as a bytes object.
pickle.load(file, *, fix_imports=True, encoding='ASCII', errors='strict',\n  buffers=﴾﴿)Read and return an object from the pickle data stored in a file.
pickle.loads(data, /, *, fix_imports=True, encoding='ASCII', errors='strict',\n  buffers=﴾﴿)Read and return an object from the given pickle data.
pickletools
pickletools.dis(pickle, out=None, memo=None, indentlevel=4, annotate=0)[function] Produce a symbolic disassembly of a pickle.
pickletools.genops(pickle)[function] Generate all the opcodes in a pickle.
pickletools.optimize(p)[function] Optimize a pickle string by removing unused PUT opcodes
pipes
pipes.Template()[class] Class representing a pipeline template.
pkgutil
pkgutil.ModuleInfo(module_finder, name, ispkg)[class] A namedtuple with minimal info about a module.
pkgutil.extend_path(path, name)[function] Extend a package's path.
pkgutil.find_loader(fullname)[function] Find a "loader" object for fullname
pkgutil.get_data(package, resource)[function] Get a resource from a package.
pkgutil.get_importer(path_item)[function] Retrieve a finder for the given path item
pkgutil.get_loader(module_or_name)[function] Get a "loader" object for module_or_name
pkgutil.iter_importers(fullname='')[function] Yield finders for the given module name
pkgutil.iter_modules(path=None, prefix='')[function] Yields ModuleInfo for all submodules on path,\nor, if path is None, all top-level modules on sys.path.
pkgutil.read_code(stream)[function]
pkgutil.walk_packages(path=None, prefix='', onerror=None)[function] Yields ModuleInfo for all modules recursively\non path, or, if path is None, all accessible modules.
platform
platform.architecture(executable=sys.executable, bits='', linkage='')[function] Queries the given executable (defaults to the Python interpreter\nbinary) for various architecture information.
platform.freedesktop_os_release()[function] Return operation system identification from freedesktop.org os-release
platform.java_ver(release='', vendor='', vminfo=﴾''﹐ ''﹐ ''﴿,\n  osinfo=﴾''﹐ ''﹐ ''﴿)[function] Version interface for Jython.
platform.libc_ver(executable=None, lib='', version='', chunksize=16384)[function] Tries to determine the libc version that the file executable\n(which defaults to the Python interpreter) is linked against.
platform.mac_ver(release='', versioninfo=﴾''﹐ ''﹐ ''﴿, machine='')[function] Get macOS version information and return it as tuple (release,\nversioninfo, machine) with versioninfo being a tuple (version,\ndev_stage, non_release_version).
platform.machine()[function] Returns the machine type, e.g. 'i386'
platform.node()[function] Returns the computer's network name (which may not be fully\nqualified)
platform.platform(aliased=False, terse=False)[function] Returns a single string identifying the underlying platform\nwith as much useful information as possible (but no more :).
platform.processor()[function] Returns the (true) processor name, e.g. 'amdk6'
platform.python_branch()[function] Returns a string identifying the Python implementation\nbranch.
platform.python_build()[function] Returns a tuple (buildno, builddate) stating the Python\nbuild number and date as strings.
platform.python_compiler()[function] Returns a string identifying the compiler used for compiling\nPython.
platform.python_implementation()[function] Returns a string identifying the Python implementation.
platform.python_revision()[function] Returns a string identifying the Python implementation\nrevision.
platform.python_version()[function] Returns the Python version as string 'major.minor.patchlevel'
platform.python_version_tuple()[function] Returns the Python version as tuple (major, minor, patchlevel)\nof strings.
platform.release()[function] Returns the system's release, e.g. '2.2.0' or 'NT'
platform.system()[function] Returns the system/OS name, e.g. 'Linux', 'Windows' or 'Java'.
platform.system_alias(system, release, version)[function] Returns (system, release, version) aliased to common\nmarketing names used for some systems.
platform.uname()[function] Fairly portable uname interface. Returns a tuple\nof strings (system, node, release, version, machine, processor)\nidentifying the underlying platform.
platform.uname_result(system, node, release, version, machine)[class] A uname_result that's largely compatible with a\nsimple namedtuple except that 'processor' is\nresolved late and cached to avoid calling "uname"\nexcept when needed.
platform.version()[function] Returns the system's release version, e.g. '#3 on degas'
platform.win32_edition()[function]
platform.win32_is_iot()[function]
platform.win32_ver(release='', version='', csd='', ptype='')[function]
plistlib
plistlib.FMT_BINARY
plistlib.FMT_XML
plistlib.InvalidFileException(message='Invalid file')[class] Inappropriate argument value (of correct type).
plistlib.UID(data)[class]
plistlib.dump(value, fp, *, fmt=<??>, sort_keys=True, skipkeys=False)[function] Write 'value' to a .plist file. 'fp' should be a writable,\nbinary file object.
plistlib.dumps(value, *, fmt=<??>, skipkeys=False, sort_keys=True)[function] Return a bytes object with the contents for a .plist file.
plistlib.load(fp, *, fmt=None, dict_type=<??>)[function] Read a .plist file. 'fp' should be a readable and binary file object.\nReturn the unpacked root object (which usually is a dictionary).
plistlib.loads(value, *, fmt=None, dict_type=<??>)[function] Read a .plist file from a bytes object.\nReturn the unpacked root object (which usually is a dictionary).
poplib
poplib.POP3(host, port=110, timeout=<??>)[class] This class supports both the minimal and optional command sets.\nArguments can be strings or integers (where appropriate)\n(e.g.: retr(1) and retr('1') both work equally well.
poplib.POP3_SSL(host, port=995, *, timeout=<??>, context=None)[class] POP3 client class over SSL connection
poplib.error_proto()[class] Common base class for all non-exit exceptions.
posixpath
posixpath.abspath(path)[function] Return an absolute path.
posixpath.altsep
posixpath.basename(p)[function] Returns the final component of a pathname
posixpath.commonpath(paths)[function] Given a sequence of path names, returns the longest common sub-path.
posixpath.commonprefix(m)[function] Given a list of pathnames, returns the longest common leading component
posixpath.curdir
posixpath.defpath
posixpath.devnull
posixpath.dirname(p)[function] Returns the directory component of a pathname
posixpath.exists(path)[function] Test whether a path exists.  Returns False for broken symbolic links
posixpath.expanduser(path)[function] Expand ~ and ~user constructions.  If user or $HOME is unknown,\ndo nothing.
posixpath.expandvars(path)[function] Expand shell variables of form $var and ${var}.  Unknown variables\nare left unchanged.
posixpath.extsep
posixpath.getatime(filename)[function] Return the last access time of a file, reported by os.stat().
posixpath.getctime(filename)[function] Return the metadata change time of a file, reported by os.stat().
posixpath.getmtime(filename)[function] Return the last modification time of a file, reported by os.stat().
posixpath.getsize(filename)[function] Return the size of a file, reported by os.stat().
posixpath.isabs(s)[function] Test whether a path is absolute
posixpath.isdir(s)[function] Return true if the pathname refers to an existing directory.
posixpath.isfile(path)[function] Test whether a path is a regular file
posixpath.isjunction(path)[function] Test whether a path is a junction\nJunctions are not a part of posix semantics
posixpath.islink(path)[function] Test whether a path is a symbolic link
posixpath.ismount(path)[function] Test whether a path is a mount point
posixpath.join(a, *p)[function] Join two or more pathname components, inserting '/' as needed.\nIf any component is an absolute path, all previous path components\nwill be discarded.  An empty last part will result in a path that\nends with a separator.
posixpath.lexists(path)[function] Test whether a path exists.  Returns True for broken symbolic links
posixpath.normcase(s)[function] Normalize case of pathname.  Has no effect under Posix
posixpath.normpath(path)[function] Normalize path, eliminating double slashes, etc.
posixpath.pardir
posixpath.pathsep
posixpath.realpath(filename, *, strict=False)[function] Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path.
posixpath.relpath(path, start=None)[function] Return a relative version of a path
posixpath.samefile(f1, f2)[function] Test whether two pathnames reference the same actual file or directory
posixpath.sameopenfile(fp1, fp2)[function] Test whether two open file objects reference the same file
posixpath.samestat(s1, s2)[function] Test whether two stat buffers reference the same file
posixpath.sep
posixpath.split(p)[function] Split a pathname.  Returns tuple "(head, tail)" where "tail" is\neverything after the final slash.  Either part may be empty.
posixpath.splitdrive(p)[function] Split a pathname into drive and path. On Posix, drive is always\nempty.
posixpath.splitext(p)[function] Split the extension from a pathname.
posixpath.splitroot(p)[function] Split a pathname into drive, root and tail. On Posix, drive is always\nempty; the root may be empty, a single slash, or two slashes. The tail\ncontains anything after the root. For example:
posixpath.supports_unicode_filenames
pow(base, exp, mod=None)Equivalent to base**exp with 2 arguments or base**exp % mod with 3 arguments
pprint
pprint.PrettyPrinter(indent=1, width=80, depth=None, stream=None, *,\n  compact=False, sort_dicts=True, underscore_numbers=False)[class]
pprint.isreadable(object)[function] Determine if saferepr(object) is readable by eval().
pprint.isrecursive(object)[function] Determine if object requires a recursive representation.
pprint.pformat(object, indent=1, width=80, depth=None, *, compact=False,\n  sort_dicts=True, underscore_numbers=False)[function] Format a Python object into a pretty-printed representation.
pprint.pp(object, *args, *, sort_dicts=False, **kwargs)[function] Pretty-print a Python object
pprint.pprint(object, stream=None, indent=1, width=80, depth=None, *,\n  compact=False, sort_dicts=True, underscore_numbers=False)[function] Pretty-print a Python object to a stream [default is sys.stdout].
pprint.saferepr(object)[function] Version of repr() which can handle recursive data structures.
print(*args, *, sep=' ', end='\\n', file=None, flush=False)Prints the values to a stream, or to sys.stdout by default.
profile
profile.Profile(timer=None, bias=None)[class] Profiler class.
profile.run(statement, filename=None, sort=-1)[function] Run statement under profiler optionally saving results in filename
profile.runctx(statement, globals, locals, filename=None, sort=-1)[function] Run statement under profiler, supplying your own globals and locals,\noptionally saving results in filename.
property(fget=None, fset=None, fdel=None, doc=None)[class] Property attribute.
pstats
pstats.FunctionProfile(ncalls: str, tottime: float, percall_tottime: float,\n  cumtime: float, percall_cumtime: float, file_name: str, line_number: int)[class] FunctionProfile(ncalls: str, tottime: float, percall_tottime: float, cumtime: float, percall_cumtime: float, file_name: str, line_number: int)
pstats.SortKey(*values)[class] An enumeration.
pstats.Stats(*args, *, stream=None)[class] This class is used for creating reports from data generated by the\nProfile class.  It is a "friend" of that class, and imports data either\nby direct access to members of Profile class, or by reading in a dictionary\nthat was emitted (via marshal) from the Profile class.
pstats.StatsProfile(total_tt: float,\n  func_profiles: Dict[str﹐ pstats.FunctionProfile])[class] Class for keeping track of an item in inventory.
py_compile
py_compile.PyCompileError(exc_type, exc_value, file, msg='')[class] Exception raised when an error occurs while attempting to\ncompile the file.
py_compile.PycInvalidationMode(*values)[class] Create a collection of name/value pairs.
py_compile.compile(file, cfile=None, dfile=None, doraise=False, optimize=-1,\n  invalidation_mode=None, quiet=0)[function] Byte-compile one Python source file to Python bytecode.
py_compile.main()[function]
pyclbr
pyclbr.Class(module, name, super_, file, lineno, parent=None, *,\n  end_lineno=None)[class] Information about a Python class.
pyclbr.Function(module, name, file, lineno, parent=None, is_async=False, *,\n  end_lineno=None)[class] Information about a Python function, including methods.
pyclbr.readmodule(module, path=None)[function] Return Class objects for the top-level classes in module.
pyclbr.readmodule_ex(module, path=None)[function] Return a dictionary with all functions and classes in module.
pydoc
pydoc.help(request=<??>)
pyexpat
pyexpat.EXPAT_VERSION
pyexpat.ErrorString(code, /)Returns string error for given number.
pyexpat.ExpatError()[class] Common base class for all non-exit exceptions.
pyexpat.ParserCreate(encoding=None, namespace_separator=None)Return a new XML parser object.
pyexpat.XMLParserType()[class] XML parser
pyexpat.XML_PARAM_ENTITY_PARSING_ALWAYS
pyexpat.XML_PARAM_ENTITY_PARSING_NEVER
pyexpat.XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE
pyexpat.error()[class] Common base class for all non-exit exceptions.
pyexpat.errors
pyexpat.errors.XML_ERROR_ABORTED
pyexpat.errors.XML_ERROR_AMPLIFICATION_LIMIT_BREACH
pyexpat.errors.XML_ERROR_ASYNC_ENTITY
pyexpat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF
pyexpat.errors.XML_ERROR_BAD_CHAR_REF
pyexpat.errors.XML_ERROR_BINARY_ENTITY_REF
pyexpat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING
pyexpat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE
pyexpat.errors.XML_ERROR_ENTITY_DECLARED_IN_PE
pyexpat.errors.XML_ERROR_EXTERNAL_ENTITY_HANDLING
pyexpat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD
pyexpat.errors.XML_ERROR_FINISHED
pyexpat.errors.XML_ERROR_INCOMPLETE_PE
pyexpat.errors.XML_ERROR_INCORRECT_ENCODING
pyexpat.errors.XML_ERROR_INVALID_ARGUMENT
pyexpat.errors.XML_ERROR_INVALID_TOKEN
pyexpat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT
pyexpat.errors.XML_ERROR_MISPLACED_XML_PI
pyexpat.errors.XML_ERROR_NOT_STANDALONE
pyexpat.errors.XML_ERROR_NOT_SUSPENDED
pyexpat.errors.XML_ERROR_NO_BUFFER
pyexpat.errors.XML_ERROR_NO_ELEMENTS
pyexpat.errors.XML_ERROR_NO_MEMORY
pyexpat.errors.XML_ERROR_PARAM_ENTITY_REF
pyexpat.errors.XML_ERROR_PARTIAL_CHAR
pyexpat.errors.XML_ERROR_PUBLICID
pyexpat.errors.XML_ERROR_RECURSIVE_ENTITY_REF
pyexpat.errors.XML_ERROR_RESERVED_NAMESPACE_URI
pyexpat.errors.XML_ERROR_RESERVED_PREFIX_XML
pyexpat.errors.XML_ERROR_RESERVED_PREFIX_XMLNS
pyexpat.errors.XML_ERROR_SUSPENDED
pyexpat.errors.XML_ERROR_SUSPEND_PE
pyexpat.errors.XML_ERROR_SYNTAX
pyexpat.errors.XML_ERROR_TAG_MISMATCH
pyexpat.errors.XML_ERROR_TEXT_DECL
pyexpat.errors.XML_ERROR_UNBOUND_PREFIX
pyexpat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION
pyexpat.errors.XML_ERROR_UNCLOSED_TOKEN
pyexpat.errors.XML_ERROR_UNDECLARING_PREFIX
pyexpat.errors.XML_ERROR_UNDEFINED_ENTITY
pyexpat.errors.XML_ERROR_UNEXPECTED_STATE
pyexpat.errors.XML_ERROR_UNKNOWN_ENCODING
pyexpat.errors.XML_ERROR_XML_DECL
pyexpat.errors.codes
pyexpat.errors.messages
pyexpat.expat_CAPI
pyexpat.features
pyexpat.model
pyexpat.model.XML_CQUANT_NONE
pyexpat.model.XML_CQUANT_OPT
pyexpat.model.XML_CQUANT_PLUS
pyexpat.model.XML_CQUANT_REP
pyexpat.model.XML_CTYPE_ANY
pyexpat.model.XML_CTYPE_CHOICE
pyexpat.model.XML_CTYPE_EMPTY
pyexpat.model.XML_CTYPE_MIXED
pyexpat.model.XML_CTYPE_NAME
pyexpat.model.XML_CTYPE_SEQ
pyexpat.native_encoding
pyexpat.version_info
queue
queue.Empty()[class] Exception raised by Queue.get(block=0)/get_nowait().
queue.Full()[class] Exception raised by Queue.put(block=0)/put_nowait().
queue.LifoQueue(maxsize=0)[class] Variant of Queue that retrieves most recently added entries first.
queue.PriorityQueue(maxsize=0)[class] Variant of Queue that retrieves open entries in priority order (lowest first).
queue.Queue(maxsize=0)[class] Create a queue object with a given maximum size.
queue.SimpleQueue()[class] Simple, unbounded, reentrant FIFO queue.
quit(code=None)
quopri
quopri.decode(input, output, header=False)[function] Read 'input', apply quoted-printable decoding, and write to 'output'.\n'input' and 'output' are binary file objects.\nIf 'header' is true, decode underscore as space (per RFC 1522).
quopri.decodestring(s, header=False)[function]
quopri.encode(input, output, quotetabs, header=False)[function] Read 'input', apply quoted-printable encoding, and write to 'output'.
quopri.encodestring(s, quotetabs=False, header=False)[function]
raise
random
random.Random(x=None)[class] Random number generator base class used by bound module functions.
random.SystemRandom(x=None)[class] Alternate random number generator using sources provided\nby the operating system (such as /dev/urandom on Unix or\nCryptGenRandom on Windows).
random.betavariate(alpha, beta)[method] Beta distribution.
random.binomialvariate(n=1, p=0.5)[method] Binomial random variable.
random.choice(seq)[method] Choose a random element from a non-empty sequence.
random.choices(population, weights=None, *, cum_weights=None, k=1)[method] Return a k sized list of population elements chosen with replacement.
random.expovariate(lambd=1.0)[method] Exponential distribution.
random.gammavariate(alpha, beta)[method] Gamma distribution.  Not the gamma function!
random.gauss(mu=0.0, sigma=1.0)[method] Gaussian distribution.
random.getrandbits(k, /)getrandbits(k) -> x.  Generates an int with k random bits.
random.getstate()[method] Return internal state; can be passed to setstate() later.
random.lognormvariate(mu, sigma)[method] Log normal distribution.
random.normalvariate(mu=0.0, sigma=1.0)[method] Normal distribution.
random.paretovariate(alpha)[method] Pareto distribution.  alpha is the shape parameter.
random.randbytes(n)[method] Generate n random bytes.
random.randint(a, b)[method] Return random integer in range [a, b], including both end points.
random.random()random() -> x in the interval [0, 1).
random.randrange(start, stop=None, step=1)[method] Choose a random item from range(stop) or range(start, stop[, step]).
random.sample(population, k, *, counts=None)[method] Chooses k unique random elements from a population sequence.
random.seed(a=None, version=2)[method] Initialize internal state from a seed.
random.setstate(state)[method] Restore internal state from object returned by getstate().
random.shuffle(x)[method] Shuffle list x in place, and return None.
random.triangular(low=0.0, high=1.0, mode=None)[method] Triangular distribution.
random.uniform(a, b)[method] Get a random number in the range [a, b) or [a, b] depending on rounding.
random.vonmisesvariate(mu, kappa)[method] Circular data distribution.
random.weibullvariate(alpha, beta)[method] Weibull distribution.
range(start, stop[, step])[class] range(stop) -> range object\nrange(start, stop[, step]) -> range object
range(stop)[class] range(stop) -> range object\nrange(start, stop[, step]) -> range object
re
re.A
re.ASCII
re.DOTALL
re.I
re.IGNORECASE
re.L
re.LOCALE
re.M
re.MULTILINE
re.Match()[class] The result of re.match() and re.search().\nMatch objects always have a boolean value of True.
re.NOFLAG
re.Pattern()[class] Compiled regular expression object.
re.RegexFlag(*values)[class] An enumeration.
re.S
re.U
re.UNICODE
re.VERBOSE
re.X
re.compile(pattern, flags=0)[function] Compile a regular expression pattern, returning a Pattern object.
re.error(msg, pattern=None, pos=None)[class] Exception raised for invalid regular expressions.
re.escape(pattern)[function] Escape special characters in a string.
re.findall(pattern, string, flags=0)[function] Return a list of all non-overlapping matches in the string.
re.finditer(pattern, string, flags=0)[function] Return an iterator over all non-overlapping matches in the\nstring.  For each match, the iterator returns a Match object.
re.fullmatch(pattern, string, flags=0)[function] Try to apply the pattern to all of the string, returning\na Match object, or None if no match was found.
re.match(pattern, string, flags=0)[function] Try to apply the pattern at the start of the string, returning\na Match object, or None if no match was found.
re.purge()[function] Clear the regular expression caches
re.search(pattern, string, flags=0)[function] Scan through string looking for a match to the pattern, returning\na Match object, or None if no match was found.
re.split(pattern, string, maxsplit=0, flags=0)[function] Split the source string by the occurrences of the pattern,\nreturning a list containing the resulting substrings.  If\ncapturing parentheses are used in pattern, then the text of all\ngroups in the pattern are also returned as part of the resulting\nlist.  If maxsplit is nonzero, at most maxsplit splits occur,\nand the remainder of the string is returned as the final element\nof the list.
re.sub(pattern, repl, string, count=0, flags=0)[function] Return the string obtained by replacing the leftmost\nnon-overlapping occurrences of the pattern in string by the\nreplacement repl.  repl can be either a string or a callable;\nif a string, backslash escapes in it are processed.  If it is\na callable, it's passed the Match object and must return\na replacement string to be used.
re.subn(pattern, repl, string, count=0, flags=0)[function] Return a 2-tuple containing (new_string, number).\nnew_string is the string obtained by replacing the leftmost\nnon-overlapping occurrences of the pattern in the source\nstring by the replacement repl.  number is the number of\nsubstitutions that were made. repl can be either a string or a\ncallable; if a string, backslash escapes in it are processed.\nIf it is a callable, it's passed the Match object and must\nreturn a replacement string to be used.
re.template(pattern, flags=0)[function] Compile a template pattern, returning a Pattern object, deprecated
repr(obj, /)Return the canonical string representation of the object.
reprlib
reprlib.Repr(*, maxlevel=6, maxtuple=6, maxlist=6, maxarray=5, maxdict=4,\n  maxset=6, maxfrozenset=6, maxdeque=6, maxstring=30, maxlong=40, maxother=30,\n  fillvalue='...', indent=None)[class]
reprlib.recursive_repr(fillvalue='...')[function] Decorator to make a repr function return fillvalue for a recursive call
reprlib.repr(x)[method]
return
reversed(sequence, /)[class] Return a reverse iterator over the values of the given sequence.
rlcompleter
rlcompleter.Completer(namespace=None)[class]
round(number, ndigits=None)Round a number to a given precision in decimal digits.
runpy
runpy.run_module(mod_name, init_globals=None, run_name=None, alter_sys=False)[function] Execute a module's code without importing it.
runpy.run_path(path_name, init_globals=None, run_name=None)[function] Execute code located at the specified filesystem location.
sched
sched.scheduler(timefunc=<??>, delayfunc=<??>)[class]
secrets
secrets.SystemRandom(x=None)[class] Alternate random number generator using sources provided\nby the operating system (such as /dev/urandom on Unix or\nCryptGenRandom on Windows).
secrets.choice(seq)[method] Choose a random element from a non-empty sequence.
secrets.compare_digest(a, b, /)Return 'a == b'.
secrets.randbelow(exclusive_upper_bound)[function] Return a random int in the range [0, n).
secrets.randbits(k)[method] getrandbits(k) -> x.  Generates an int with k random bits.
secrets.token_bytes(nbytes=None)[function] Return a random byte string containing *nbytes* bytes.
secrets.token_hex(nbytes=None)[function] Return a random text string, in hexadecimal.
secrets.token_urlsafe(nbytes=None)[function] Return a random URL-safe text string, in Base64 encoding.
select
select.error()[class] Base class for I/O related errors.
select.select(rlist, wlist, xlist, timeout=None, /)Wait until one or more file descriptors are ready for some kind of I/O.
selectors
selectors.ABCMeta(name, bases, namespace, /, **kwargs)[class] Metaclass for defining Abstract Base Classes (ABCs).
selectors.BaseSelector()[class] Selector abstract base class.
selectors.DefaultSelector()[class] Select-based selector.
selectors.EVENT_READ
selectors.EVENT_WRITE
selectors.Mapping()[class] A Mapping is a generic container for associating key/value\npairs.
selectors.SelectSelector()[class] Select-based selector.
selectors.SelectorKey(fileobj, fd, events, data)[class] SelectorKey(fileobj, fd, events, data)
selectors.abstractmethod(funcobj)[function] A decorator indicating abstract methods.
selectors.namedtuple(typename, field_names, *, rename=False, defaults=None,\n  module=None)[function] Returns a new subclass of tuple with named fields.
set([iterable])[class] set() -> new empty set object\nset(iterable) -> new set object
setattr(obj, name, value, /)Sets the named attribute on the given object to the specified value.
shelve
shelve.BsdDbShelf(dict, protocol=None, writeback=False, keyencoding='utf-8')[class] Shelf implementation using the "BSD" db interface.
shelve.DbfilenameShelf(filename, flag='c', protocol=None, writeback=False)[class] Shelf implementation using the "dbm" generic dbm interface.
shelve.Shelf(dict, protocol=None, writeback=False, keyencoding='utf-8')[class] Base class for shelf implementations.
shelve.open(filename, flag='c', protocol=None, writeback=False)[function] Open a persistent dictionary for reading and writing.
shlex
shlex.join(split_command)[function] Return a shell-escaped string from *split_command*.
shlex.quote(s)[function] Return a shell-escaped version of the string *s*.
shlex.shlex(instream=None, infile=None, posix=False, punctuation_chars=False)[class] A lexical analyzer class for simple shell-like syntaxes.
shlex.split(s, comments=False, posix=True)[function] Split the string *s* using shell-like syntax.
shutil
shutil.Error()[class] Base class for I/O related errors.
shutil.ExecError()[class] Raised when a command could not be executed
shutil.SameFileError()[class] Raised when source and destination are the same file.
shutil.SpecialFileError()[class] Raised when trying to do a kind of operation (e.g. copying) which is\nnot supported on a special file (e.g. a named pipe)
shutil.chown(path, user=None, group=None)[function] Change owner user and group of the given path.
shutil.copy(src, dst, *, follow_symlinks=True)[function] Copy data and mode bits ("cp src dst"). Return the file's destination.
shutil.copy2(src, dst, *, follow_symlinks=True)[function] Copy data and metadata. Return the file's destination.
shutil.copyfile(src, dst, *, follow_symlinks=True)[function] Copy data from src to dst in the most efficient way possible.
shutil.copyfileobj(fsrc, fdst, length=0)[function] copy data from file-like object fsrc to file-like object fdst
shutil.copymode(src, dst, *, follow_symlinks=True)[function] Copy mode bits from src to dst.
shutil.copystat(src, dst, *, follow_symlinks=True)[function] Copy file metadata
shutil.copytree(src, dst, symlinks=False, ignore=None, copy_function=<??>,\n  ignore_dangling_symlinks=False, dirs_exist_ok=False)[function] Recursively copy a directory tree and return the destination directory.
shutil.disk_usage(path)[function] Return disk usage statistics about the given path.
shutil.get_archive_formats()[function] Returns a list of supported formats for archiving and unarchiving.
shutil.get_terminal_size(fallback=﴾80﹐ 24﴿)[function] Get the size of the terminal window.
shutil.get_unpack_formats()[function] Returns a list of supported formats for unpacking.
shutil.ignore_patterns(*patterns)[function] Function that can be used as copytree() ignore parameter.
shutil.make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0,\n  dry_run=0, owner=None, group=None, logger=None)[function] Create an archive file (eg. zip or tar).
shutil.move(src, dst, copy_function=<??>)[function] Recursively move a file or directory to another location. This is\nsimilar to the Unix "mv" command. Return the file or directory's\ndestination.
shutil.register_archive_format(name, function, extra_args=None, description='')[function] Registers an archive format.
shutil.register_unpack_format(name, extensions, function, extra_args=None,\n  description='')[function] Registers an unpack format.
shutil.rmtree(path, ignore_errors=False, onerror=None, *, onexc=None,\n  dir_fd=None)[function] Recursively delete a directory tree.
shutil.unpack_archive(filename, extract_dir=None, format=None, *, filter=None)[function] Unpack an archive.
shutil.unregister_archive_format(name)[function]
shutil.unregister_unpack_format(name)[function] Removes the pack format from the registry.
shutil.which(cmd, mode=1, path=None)[function] Given a command, mode, and a PATH string, return the path which\nconforms to the given mode on the PATH, or None if there is no such\nfile.
signal
signal.CTRL_BREAK_EVENT
signal.CTRL_C_EVENT
signal.Handlers(*values)[class] An enumeration.
signal.NSIG
signal.SIGABRT
signal.SIGBREAK
signal.SIGFPE
signal.SIGILL
signal.SIGINT
signal.SIGSEGV
signal.SIGTERM
signal.SIG_DFL
signal.SIG_IGN
signal.Signals(*values)[class] An enumeration.
signal.default_int_handler(signalnum, frame, /)The default handler for SIGINT installed by Python.
signal.getsignal(signalnum)[function] Return the current action for the given signal.
signal.raise_signal(signalnum, /)Send a signal to the executing process.
signal.set_wakeup_fd(fd, *, warn_on_full_buffer=True)set_wakeup_fd(fd, *, warn_on_full_buffer=True) -> fd
signal.signal(signalnum, handler)[function] Set the action for the given signal.
signal.strsignal(signalnum, /)Return the system description of the given signal.
signal.valid_signals()[function] Return a set of valid signal numbers on this platform.
site
site.ENABLE_USER_SITE
site.PREFIXES
site.USER_BASE
site.USER_SITE
site.abs_paths()[function] Set all module __file__ and __cached__ attributes to an absolute path
site.addpackage(sitedir, name, known_paths)[function] Process a .pth file within the site-packages directory:\nFor each line in the file, either combine it with sitedir to a path\nand add that to known_paths, or execute it if it starts with 'import '.
site.addsitedir(sitedir, known_paths=None)[function] Add 'sitedir' argument to sys.path if missing and handle .pth files in\n'sitedir'
site.addsitepackages(known_paths, prefixes=None)[function] Add site-packages to sys.path
site.addusersitepackages(known_paths)[function] Add a per user site-package to sys.path
site.check_enableusersite()[function] Check if user site directory is safe for inclusion
site.enablerlcompleter()[function] Enable default readline configuration on interactive prompts, by\nregistering a sys.__interactivehook__.
site.execsitecustomize()[function] Run custom site specific code, if available.
site.execusercustomize()[function] Run custom user specific code, if available.
site.getsitepackages(prefixes=None)[function] Returns a list containing all global site-packages directories.
site.getuserbase()[function] Returns the `user base` directory path.
site.getusersitepackages()[function] Returns the user-specific site-packages directory path.
site.main()[function] Add standard site-specific directories to the module search path.
site.makepath(*paths)[function]
site.removeduppaths()[function] Remove duplicate entries from sys.path along with making them\nabsolute
site.setcopyright()[function] Set 'copyright' and 'credits' in builtins
site.sethelper()[function]
site.setquit()[function] Define new builtins 'quit' and 'exit'.
site.venv(known_paths)[function]
slice(start, stop[, step])[class] slice(stop)\nslice(start, stop[, step])
slice(stop)[class] slice(stop)\nslice(start, stop[, step])
smtplib
smtplib.SMTP(host='', port=0, local_hostname=None, timeout=<??>,\n  source_address=None)[class] This class manages a connection to an SMTP or ESMTP server.\nSMTP Objects:\n    SMTP objects have the following attributes:\n        helo_resp\n            This is the message given by the server in response to the\n            most recent HELO command.
smtplib.SMTPAuthenticationError(code, msg)[class] Authentication error.
smtplib.SMTPConnectError(code, msg)[class] Error during connection establishment.
smtplib.SMTPDataError(code, msg)[class] The SMTP server didn't accept the data.
smtplib.SMTPException()[class] Base class for all exceptions raised by this module.
smtplib.SMTPHeloError(code, msg)[class] The server refused our HELO reply.
smtplib.SMTPNotSupportedError()[class] The command or option is not supported by the SMTP server.
smtplib.SMTPRecipientsRefused(recipients)[class] All recipient addresses refused.
smtplib.SMTPResponseException(code, msg)[class] Base class for all exceptions that include an SMTP error code.
smtplib.SMTPSenderRefused(code, msg, sender)[class] Sender address refused.
smtplib.SMTPServerDisconnected()[class] Not connected to any SMTP server.
smtplib.SMTP_SSL(host='', port=0, local_hostname=None, *, timeout=<??>,\n  source_address=None, context=None)[class] This is a subclass derived from SMTP that connects over an SSL\nencrypted socket (to use this class you need a socket module that was\ncompiled with SSL support). If host is not specified, '' (the local\nhost) is used. If port is omitted, the standard SMTP-over-SSL port\n(465) is used.  local_hostname and source_address have the same meaning\nas they do in the SMTP class.  context also optional, can contain a\nSSLContext.
smtplib.quoteaddr(addrstring)[function] Quote a subset of the email addresses defined by RFC 821.
smtplib.quotedata(data)[function] Quote data for email.
sndhdr
sndhdr.what(filename)[function] Guess the type of a sound file.
sndhdr.whathdr(filename)[function] Recognize sound headers.
socket
socket.AF_APPLETALK
socket.AF_BLUETOOTH
socket.AF_DECnet
socket.AF_HYPERV
socket.AF_INET
socket.AF_INET6
socket.AF_IPX
socket.AF_IRDA
socket.AF_LINK
socket.AF_SNA
socket.AF_UNSPEC
socket.AI_ADDRCONFIG
socket.AI_ALL
socket.AI_CANONNAME
socket.AI_NUMERICHOST
socket.AI_NUMERICSERV
socket.AI_PASSIVE
socket.AI_V4MAPPED
socket.AddressFamily(*values)[class] An enumeration.
socket.BDADDR_ANY
socket.BDADDR_LOCAL
socket.BTPROTO_RFCOMM
socket.CAPI
socket.EAI_AGAIN
socket.EAI_BADFLAGS
socket.EAI_FAIL
socket.EAI_FAMILY
socket.EAI_MEMORY
socket.EAI_NODATA
socket.EAI_NONAME
socket.EAI_SERVICE
socket.EAI_SOCKTYPE
socket.HVSOCKET_ADDRESS_FLAG_PASSTHRU
socket.HVSOCKET_CONNECTED_SUSPEND
socket.HVSOCKET_CONNECT_TIMEOUT
socket.HVSOCKET_CONNECT_TIMEOUT_MAX
socket.HV_GUID_BROADCAST
socket.HV_GUID_CHILDREN
socket.HV_GUID_LOOPBACK
socket.HV_GUID_PARENT
socket.HV_GUID_WILDCARD
socket.HV_GUID_ZERO
socket.HV_PROTOCOL_RAW
socket.INADDR_ALLHOSTS_GROUP
socket.INADDR_ANY
socket.INADDR_BROADCAST
socket.INADDR_LOOPBACK
socket.INADDR_MAX_LOCAL_GROUP
socket.INADDR_NONE
socket.INADDR_UNSPEC_GROUP
socket.IPPORT_RESERVED
socket.IPPORT_USERRESERVED
socket.IPPROTO_AH
socket.IPPROTO_CBT
socket.IPPROTO_DSTOPTS
socket.IPPROTO_EGP
socket.IPPROTO_ESP
socket.IPPROTO_FRAGMENT
socket.IPPROTO_GGP
socket.IPPROTO_HOPOPTS
socket.IPPROTO_ICLFXBM
socket.IPPROTO_ICMP
socket.IPPROTO_ICMPV6
socket.IPPROTO_IDP
socket.IPPROTO_IGMP
socket.IPPROTO_IGP
socket.IPPROTO_IP
socket.IPPROTO_IPV4
socket.IPPROTO_IPV6
socket.IPPROTO_L2TP
socket.IPPROTO_MAX
socket.IPPROTO_ND
socket.IPPROTO_NONE
socket.IPPROTO_PGM
socket.IPPROTO_PIM
socket.IPPROTO_PUP
socket.IPPROTO_RAW
socket.IPPROTO_RDP
socket.IPPROTO_ROUTING
socket.IPPROTO_SCTP
socket.IPPROTO_ST
socket.IPPROTO_TCP
socket.IPPROTO_UDP
socket.IPV6_CHECKSUM
socket.IPV6_DONTFRAG
socket.IPV6_HOPLIMIT
socket.IPV6_HOPOPTS
socket.IPV6_JOIN_GROUP
socket.IPV6_LEAVE_GROUP
socket.IPV6_MULTICAST_HOPS
socket.IPV6_MULTICAST_IF
socket.IPV6_MULTICAST_LOOP
socket.IPV6_PKTINFO
socket.IPV6_RECVRTHDR
socket.IPV6_RECVTCLASS
socket.IPV6_RTHDR
socket.IPV6_TCLASS
socket.IPV6_UNICAST_HOPS
socket.IPV6_V6ONLY
socket.IP_ADD_MEMBERSHIP
socket.IP_ADD_SOURCE_MEMBERSHIP
socket.IP_BLOCK_SOURCE
socket.IP_DROP_MEMBERSHIP
socket.IP_DROP_SOURCE_MEMBERSHIP
socket.IP_HDRINCL
socket.IP_MULTICAST_IF
socket.IP_MULTICAST_LOOP
socket.IP_MULTICAST_TTL
socket.IP_OPTIONS
socket.IP_PKTINFO
socket.IP_RECVDSTADDR
socket.IP_RECVTOS
socket.IP_TOS
socket.IP_TTL
socket.IP_UNBLOCK_SOURCE
socket.MSG_BCAST
socket.MSG_CTRUNC
socket.MSG_DONTROUTE
socket.MSG_ERRQUEUE
socket.MSG_MCAST
socket.MSG_OOB
socket.MSG_PEEK
socket.MSG_TRUNC
socket.MSG_WAITALL
socket.NI_DGRAM
socket.NI_MAXHOST
socket.NI_MAXSERV
socket.NI_NAMEREQD
socket.NI_NOFQDN
socket.NI_NUMERICHOST
socket.NI_NUMERICSERV
socket.RCVALL_MAX
socket.RCVALL_OFF
socket.RCVALL_ON
socket.RCVALL_SOCKETLEVELONLY
socket.SHUT_RD
socket.SHUT_RDWR
socket.SHUT_WR
socket.SIO_KEEPALIVE_VALS
socket.SIO_LOOPBACK_FAST_PATH
socket.SIO_RCVALL
socket.SOCK_DGRAM
socket.SOCK_RAW
socket.SOCK_RDM
socket.SOCK_SEQPACKET
socket.SOCK_STREAM
socket.SOL_IP
socket.SOL_SOCKET
socket.SOL_TCP
socket.SOL_UDP
socket.SOMAXCONN
socket.SO_ACCEPTCONN
socket.SO_BROADCAST
socket.SO_DEBUG
socket.SO_DONTROUTE
socket.SO_ERROR
socket.SO_EXCLUSIVEADDRUSE
socket.SO_KEEPALIVE
socket.SO_LINGER
socket.SO_OOBINLINE
socket.SO_RCVBUF
socket.SO_RCVLOWAT
socket.SO_RCVTIMEO
socket.SO_REUSEADDR
socket.SO_SNDBUF
socket.SO_SNDLOWAT
socket.SO_SNDTIMEO
socket.SO_TYPE
socket.SO_USELOOPBACK
socket.SocketKind(*values)[class] An enumeration.
socket.SocketType()[class] socket(family=AF_INET, type=SOCK_STREAM, proto=0) -> socket object\nsocket(family=-1, type=-1, proto=-1, fileno=None) -> socket object
socket.TCP_MAXSEG
socket.TCP_NODELAY
socket.close(fd)close(integer) -> None
socket.create_connection(address, timeout=<??>, source_address=None, *,\n  all_errors=False)[function] Connect to *address* and return the socket object.
socket.create_server(address, *, family=<??>, backlog=None, reuse_port=False,\n  dualstack_ipv6=False)[function] Convenience function which creates a SOCK_STREAM type socket\nbound to *address* (a 2-tuple (host, port)) and return the socket\nobject.
socket.dup()dup(integer) -> integer
socket.error()[class] Base class for I/O related errors.
socket.errorTab
socket.fromfd(fd, family, type, proto=0)[function] fromfd(fd, family, type[, proto]) -> socket object
socket.fromshare(info)[function] fromshare(info) -> socket object
socket.gaierror()[class] Base class for I/O related errors.
socket.getaddrinfo(host, port, family=0, type=0, proto=0, flags=0)[function] Resolve host and port into list of address info entries.
socket.getdefaulttimeout()getdefaulttimeout() -> timeout
socket.getfqdn(name='')[function] Get fully qualified domain name from name.
socket.gethostbyaddr(ip_address)gethostbyaddr(host) -> (name, aliaslist, addresslist)
socket.gethostbyname(hostname)gethostbyname(host) -> address
socket.gethostbyname_ex(hostname)gethostbyname_ex(host) -> (name, aliaslist, addresslist)
socket.gethostname()gethostname() -> string
socket.getnameinfo(sockaddr﹐ flags)getnameinfo(sockaddr, flags) --> (host, port)
socket.getprotobyname(protocolname)getprotobyname(name) -> integer
socket.getservbyname(servicename[, protocolname])getservbyname(servicename[, protocolname]) -> integer
socket.getservbyport(port[, protocolname])getservbyport(port[, protocolname]) -> string
socket.has_dualstack_ipv6()[function] Return True if the platform supports creating a SOCK_STREAM socket\nwhich can handle both AF_INET and AF_INET6 (IPv4 / IPv6) connections.
socket.has_ipv6
socket.herror()[class] Base class for I/O related errors.
socket.htonl(x)htonl(integer) -> integer
socket.htons(x)htons(integer) -> integer
socket.if_indextoname(if_index)if_indextoname(if_index)
socket.if_nameindex()if_nameindex()
socket.if_nametoindex(if_name)if_nametoindex(if_name)
socket.inet_aton(ip_string)inet_aton(string) -> bytes giving packed 32-bit IP representation
socket.inet_ntoa(packed_ip)inet_ntoa(packed_ip) -> ip_address_string
socket.inet_ntop(address_family, packed_ip)inet_ntop(af, packed_ip) -> string formatted IP address
socket.inet_pton(address_family, ip_string)inet_pton(af, ip) -> packed IP address string
socket.ntohl(x)ntohl(integer) -> integer
socket.ntohs(x)ntohs(integer) -> integer
socket.setdefaulttimeout(timeout)setdefaulttimeout(timeout)
socket.socket(family=-1, type=-1, proto=-1, fileno=None)[class] A subclass of _socket.socket adding the makefile() method.
socket.socketpair(family=<??>, type=<??>, proto=0)[function] socketpair([family[, type[, proto]]]) -> (socket object, socket object)\nCreate a pair of socket objects from the sockets returned by the platform\nsocketpair() function.\nThe arguments are the same as for socket() except the default family is AF_UNIX\nif defined on the platform; otherwise, the default is AF_INET.
socket.timeout()[class] Timeout expired.
socketserver
socketserver.BaseRequestHandler(request, client_address, server)[class] Base class for request handler classes.
socketserver.BaseServer(server_address, RequestHandlerClass)[class] Base class for server classes.
socketserver.DatagramRequestHandler(request, client_address, server)[class] Define self.rfile and self.wfile for datagram sockets.
socketserver.StreamRequestHandler(request, client_address, server)[class] Define self.rfile and self.wfile for stream sockets.
socketserver.TCPServer(server_address, RequestHandlerClass,\n  bind_and_activate=True)[class] Base class for various socket-based server classes.
socketserver.ThreadingMixIn()[class] Mix-in class to handle each request in a new thread.
socketserver.ThreadingTCPServer(server_address, RequestHandlerClass,\n  bind_and_activate=True)[class] Mix-in class to handle each request in a new thread.
socketserver.ThreadingUDPServer(server_address, RequestHandlerClass,\n  bind_and_activate=True)[class] Mix-in class to handle each request in a new thread.
socketserver.UDPServer(server_address, RequestHandlerClass,\n  bind_and_activate=True)[class] UDP server class.
sorted(iterable, /, *, key=None, reverse=False)Return a new list containing all items from the iterable in ascending order.
sqlite3
sqlite3.Binary(object)[class] Create a new memoryview object which references the given object.
sqlite3.Blob()[class]
sqlite3.Connection()[class] SQLite database connection object.
sqlite3.Cursor()[class] SQLite database cursor class.
sqlite3.DataError()[class] Common base class for all non-exit exceptions.
sqlite3.DatabaseError()[class] Common base class for all non-exit exceptions.
sqlite3.Date()[class] date(year, month, day) --> date object
sqlite3.DateFromTicks(ticks)[function]
sqlite3.Error()[class] Common base class for all non-exit exceptions.
sqlite3.IntegrityError()[class] Common base class for all non-exit exceptions.
sqlite3.InterfaceError()[class] Common base class for all non-exit exceptions.
sqlite3.InternalError()[class] Common base class for all non-exit exceptions.
sqlite3.LEGACY_TRANSACTION_CONTROL
sqlite3.NotSupportedError()[class] Common base class for all non-exit exceptions.
sqlite3.OperationalError()[class] Common base class for all non-exit exceptions.
sqlite3.PARSE_COLNAMES
sqlite3.PARSE_DECLTYPES
sqlite3.PrepareProtocol()[class] PEP 246 style object adaption protocol type.
sqlite3.ProgrammingError()[class] Common base class for all non-exit exceptions.
sqlite3.Row()[class]
sqlite3.SQLITE_ABORT
sqlite3.SQLITE_ABORT_ROLLBACK
sqlite3.SQLITE_ALTER_TABLE
sqlite3.SQLITE_ANALYZE
sqlite3.SQLITE_ATTACH
sqlite3.SQLITE_AUTH
sqlite3.SQLITE_AUTH_USER
sqlite3.SQLITE_BUSY
sqlite3.SQLITE_BUSY_RECOVERY
sqlite3.SQLITE_BUSY_SNAPSHOT
sqlite3.SQLITE_BUSY_TIMEOUT
sqlite3.SQLITE_CANTOPEN
sqlite3.SQLITE_CANTOPEN_CONVPATH
sqlite3.SQLITE_CANTOPEN_DIRTYWAL
sqlite3.SQLITE_CANTOPEN_FULLPATH
sqlite3.SQLITE_CANTOPEN_ISDIR
sqlite3.SQLITE_CANTOPEN_NOTEMPDIR
sqlite3.SQLITE_CANTOPEN_SYMLINK
sqlite3.SQLITE_CONSTRAINT
sqlite3.SQLITE_CONSTRAINT_CHECK
sqlite3.SQLITE_CONSTRAINT_COMMITHOOK
sqlite3.SQLITE_CONSTRAINT_FOREIGNKEY
sqlite3.SQLITE_CONSTRAINT_FUNCTION
sqlite3.SQLITE_CONSTRAINT_NOTNULL
sqlite3.SQLITE_CONSTRAINT_PINNED
sqlite3.SQLITE_CONSTRAINT_PRIMARYKEY
sqlite3.SQLITE_CONSTRAINT_ROWID
sqlite3.SQLITE_CONSTRAINT_TRIGGER
sqlite3.SQLITE_CONSTRAINT_UNIQUE
sqlite3.SQLITE_CONSTRAINT_VTAB
sqlite3.SQLITE_CORRUPT
sqlite3.SQLITE_CORRUPT_INDEX
sqlite3.SQLITE_CORRUPT_SEQUENCE
sqlite3.SQLITE_CORRUPT_VTAB
sqlite3.SQLITE_CREATE_INDEX
sqlite3.SQLITE_CREATE_TABLE
sqlite3.SQLITE_CREATE_TEMP_INDEX
sqlite3.SQLITE_CREATE_TEMP_TABLE
sqlite3.SQLITE_CREATE_TEMP_TRIGGER
sqlite3.SQLITE_CREATE_TEMP_VIEW
sqlite3.SQLITE_CREATE_TRIGGER
sqlite3.SQLITE_CREATE_VIEW
sqlite3.SQLITE_CREATE_VTABLE
sqlite3.SQLITE_DBCONFIG_DEFENSIVE
sqlite3.SQLITE_DBCONFIG_DQS_DDL
sqlite3.SQLITE_DBCONFIG_DQS_DML
sqlite3.SQLITE_DBCONFIG_ENABLE_FKEY
sqlite3.SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER
sqlite3.SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION
sqlite3.SQLITE_DBCONFIG_ENABLE_QPSG
sqlite3.SQLITE_DBCONFIG_ENABLE_TRIGGER
sqlite3.SQLITE_DBCONFIG_ENABLE_VIEW
sqlite3.SQLITE_DBCONFIG_LEGACY_ALTER_TABLE
sqlite3.SQLITE_DBCONFIG_LEGACY_FILE_FORMAT
sqlite3.SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE
sqlite3.SQLITE_DBCONFIG_RESET_DATABASE
sqlite3.SQLITE_DBCONFIG_TRIGGER_EQP
sqlite3.SQLITE_DBCONFIG_TRUSTED_SCHEMA
sqlite3.SQLITE_DBCONFIG_WRITABLE_SCHEMA
sqlite3.SQLITE_DELETE
sqlite3.SQLITE_DENY
sqlite3.SQLITE_DETACH
sqlite3.SQLITE_DONE
sqlite3.SQLITE_DROP_INDEX
sqlite3.SQLITE_DROP_TABLE
sqlite3.SQLITE_DROP_TEMP_INDEX
sqlite3.SQLITE_DROP_TEMP_TABLE
sqlite3.SQLITE_DROP_TEMP_TRIGGER
sqlite3.SQLITE_DROP_TEMP_VIEW
sqlite3.SQLITE_DROP_TRIGGER
sqlite3.SQLITE_DROP_VIEW
sqlite3.SQLITE_DROP_VTABLE
sqlite3.SQLITE_EMPTY
sqlite3.SQLITE_ERROR
sqlite3.SQLITE_ERROR_MISSING_COLLSEQ
sqlite3.SQLITE_ERROR_RETRY
sqlite3.SQLITE_ERROR_SNAPSHOT
sqlite3.SQLITE_FORMAT
sqlite3.SQLITE_FULL
sqlite3.SQLITE_FUNCTION
sqlite3.SQLITE_IGNORE
sqlite3.SQLITE_INSERT
sqlite3.SQLITE_INTERNAL
sqlite3.SQLITE_INTERRUPT
sqlite3.SQLITE_IOERR
sqlite3.SQLITE_IOERR_ACCESS
sqlite3.SQLITE_IOERR_AUTH
sqlite3.SQLITE_IOERR_BEGIN_ATOMIC
sqlite3.SQLITE_IOERR_BLOCKED
sqlite3.SQLITE_IOERR_CHECKRESERVEDLOCK
sqlite3.SQLITE_IOERR_CLOSE
sqlite3.SQLITE_IOERR_COMMIT_ATOMIC
sqlite3.SQLITE_IOERR_CONVPATH
sqlite3.SQLITE_IOERR_CORRUPTFS
sqlite3.SQLITE_IOERR_DATA
sqlite3.SQLITE_IOERR_DELETE
sqlite3.SQLITE_IOERR_DELETE_NOENT
sqlite3.SQLITE_IOERR_DIR_CLOSE
sqlite3.SQLITE_IOERR_DIR_FSYNC
sqlite3.SQLITE_IOERR_FSTAT
sqlite3.SQLITE_IOERR_FSYNC
sqlite3.SQLITE_IOERR_GETTEMPPATH
sqlite3.SQLITE_IOERR_LOCK
sqlite3.SQLITE_IOERR_MMAP
sqlite3.SQLITE_IOERR_NOMEM
sqlite3.SQLITE_IOERR_RDLOCK
sqlite3.SQLITE_IOERR_READ
sqlite3.SQLITE_IOERR_ROLLBACK_ATOMIC
sqlite3.SQLITE_IOERR_SEEK
sqlite3.SQLITE_IOERR_SHMLOCK
sqlite3.SQLITE_IOERR_SHMMAP
sqlite3.SQLITE_IOERR_SHMOPEN
sqlite3.SQLITE_IOERR_SHMSIZE
sqlite3.SQLITE_IOERR_SHORT_READ
sqlite3.SQLITE_IOERR_TRUNCATE
sqlite3.SQLITE_IOERR_UNLOCK
sqlite3.SQLITE_IOERR_VNODE
sqlite3.SQLITE_IOERR_WRITE
sqlite3.SQLITE_LIMIT_ATTACHED
sqlite3.SQLITE_LIMIT_COLUMN
sqlite3.SQLITE_LIMIT_COMPOUND_SELECT
sqlite3.SQLITE_LIMIT_EXPR_DEPTH
sqlite3.SQLITE_LIMIT_FUNCTION_ARG
sqlite3.SQLITE_LIMIT_LENGTH
sqlite3.SQLITE_LIMIT_LIKE_PATTERN_LENGTH
sqlite3.SQLITE_LIMIT_SQL_LENGTH
sqlite3.SQLITE_LIMIT_TRIGGER_DEPTH
sqlite3.SQLITE_LIMIT_VARIABLE_NUMBER
sqlite3.SQLITE_LIMIT_VDBE_OP
sqlite3.SQLITE_LIMIT_WORKER_THREADS
sqlite3.SQLITE_LOCKED
sqlite3.SQLITE_LOCKED_SHAREDCACHE
sqlite3.SQLITE_LOCKED_VTAB
sqlite3.SQLITE_MISMATCH
sqlite3.SQLITE_MISUSE
sqlite3.SQLITE_NOLFS
sqlite3.SQLITE_NOMEM
sqlite3.SQLITE_NOTADB
sqlite3.SQLITE_NOTFOUND
sqlite3.SQLITE_NOTICE
sqlite3.SQLITE_NOTICE_RECOVER_ROLLBACK
sqlite3.SQLITE_NOTICE_RECOVER_WAL
sqlite3.SQLITE_OK
sqlite3.SQLITE_OK_LOAD_PERMANENTLY
sqlite3.SQLITE_OK_SYMLINK
sqlite3.SQLITE_PERM
sqlite3.SQLITE_PRAGMA
sqlite3.SQLITE_PROTOCOL
sqlite3.SQLITE_RANGE
sqlite3.SQLITE_READ
sqlite3.SQLITE_READONLY
sqlite3.SQLITE_READONLY_CANTINIT
sqlite3.SQLITE_READONLY_CANTLOCK
sqlite3.SQLITE_READONLY_DBMOVED
sqlite3.SQLITE_READONLY_DIRECTORY
sqlite3.SQLITE_READONLY_RECOVERY
sqlite3.SQLITE_READONLY_ROLLBACK
sqlite3.SQLITE_RECURSIVE
sqlite3.SQLITE_REINDEX
sqlite3.SQLITE_ROW
sqlite3.SQLITE_SAVEPOINT
sqlite3.SQLITE_SCHEMA
sqlite3.SQLITE_SELECT
sqlite3.SQLITE_TOOBIG
sqlite3.SQLITE_TRANSACTION
sqlite3.SQLITE_UPDATE
sqlite3.SQLITE_WARNING
sqlite3.SQLITE_WARNING_AUTOINDEX
sqlite3.Time()[class] time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object
sqlite3.TimeFromTicks(ticks)[function]
sqlite3.Timestamp()[class] datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
sqlite3.TimestampFromTicks(ticks)[function]
sqlite3.Warning()[class] Common base class for all non-exit exceptions.
sqlite3._deprecated_names
sqlite3._deprecated_version
sqlite3._deprecated_version_info
sqlite3.adapt()Adapt given object to given protocol.
sqlite3.adapters
sqlite3.apilevel
sqlite3.complete_statement(statement)Checks if a string contains a complete SQL statement.
sqlite3.connect(database[, timeout, detect_types, isolation_level,\n  check_same_thread, factory, cached_statements, uri])Opens a connection to the SQLite database file database.
sqlite3.converters
sqlite3.enable_callback_tracebacks(enable, /)Enable or disable callback functions throwing errors to stderr.
sqlite3.paramstyle
sqlite3.register_adapter(type, adapter, /)Register a function to adapt Python objects to SQLite values.
sqlite3.register_converter(typename, converter, /)Register a function to convert SQLite values to Python objects.
sqlite3.sqlite_version
sqlite3.sqlite_version_info
sqlite3.threadsafety
sre_compile
sre_compile.ANY
sre_compile.ANY_ALL
sre_compile.ASSERT
sre_compile.ASSERT_NOT
sre_compile.AT
sre_compile.ATCODES
sre_compile.ATOMIC_GROUP
sre_compile.AT_BEGINNING
sre_compile.AT_BEGINNING_LINE
sre_compile.AT_BEGINNING_STRING
sre_compile.AT_BOUNDARY
sre_compile.AT_END
sre_compile.AT_END_LINE
sre_compile.AT_END_STRING
sre_compile.AT_LOCALE
sre_compile.AT_LOC_BOUNDARY
sre_compile.AT_LOC_NON_BOUNDARY
sre_compile.AT_MULTILINE
sre_compile.AT_NON_BOUNDARY
sre_compile.AT_UNICODE
sre_compile.AT_UNI_BOUNDARY
sre_compile.AT_UNI_NON_BOUNDARY
sre_compile.BIGCHARSET
sre_compile.BRANCH
sre_compile.CATEGORY
sre_compile.CATEGORY_DIGIT
sre_compile.CATEGORY_LINEBREAK
sre_compile.CATEGORY_LOC_NOT_WORD
sre_compile.CATEGORY_LOC_WORD
sre_compile.CATEGORY_NOT_DIGIT
sre_compile.CATEGORY_NOT_LINEBREAK
sre_compile.CATEGORY_NOT_SPACE
sre_compile.CATEGORY_NOT_WORD
sre_compile.CATEGORY_SPACE
sre_compile.CATEGORY_UNI_DIGIT
sre_compile.CATEGORY_UNI_LINEBREAK
sre_compile.CATEGORY_UNI_NOT_DIGIT
sre_compile.CATEGORY_UNI_NOT_LINEBREAK
sre_compile.CATEGORY_UNI_NOT_SPACE
sre_compile.CATEGORY_UNI_NOT_WORD
sre_compile.CATEGORY_UNI_SPACE
sre_compile.CATEGORY_UNI_WORD
sre_compile.CATEGORY_WORD
sre_compile.CHARSET
sre_compile.CHCODES
sre_compile.CH_LOCALE
sre_compile.CH_UNICODE
sre_compile.FAILURE
sre_compile.GROUPREF
sre_compile.GROUPREF_EXISTS
sre_compile.GROUPREF_IGNORE
sre_compile.GROUPREF_LOC_IGNORE
sre_compile.GROUPREF_UNI_IGNORE
sre_compile.IN
sre_compile.INFO
sre_compile.IN_IGNORE
sre_compile.IN_LOC_IGNORE
sre_compile.IN_UNI_IGNORE
sre_compile.JUMP
sre_compile.LITERAL
sre_compile.LITERAL_IGNORE
sre_compile.LITERAL_LOC_IGNORE
sre_compile.LITERAL_UNI_IGNORE
sre_compile.MAGIC
sre_compile.MARK
sre_compile.MAXCODE
sre_compile.MAXGROUPS
sre_compile.MAXREPEAT
sre_compile.MAX_REPEAT
sre_compile.MAX_UNTIL
sre_compile.MIN_REPEAT
sre_compile.MIN_REPEAT_ONE
sre_compile.MIN_UNTIL
sre_compile.NEGATE
sre_compile.NOT_LITERAL
sre_compile.NOT_LITERAL_IGNORE
sre_compile.NOT_LITERAL_LOC_IGNORE
sre_compile.NOT_LITERAL_UNI_IGNORE
sre_compile.OPCODES
sre_compile.OP_IGNORE
sre_compile.OP_LOCALE_IGNORE
sre_compile.OP_UNICODE_IGNORE
sre_compile.POSSESSIVE_REPEAT
sre_compile.POSSESSIVE_REPEAT_ONE
sre_compile.RANGE
sre_compile.RANGE_UNI_IGNORE
sre_compile.REPEAT
sre_compile.REPEAT_ONE
sre_compile.SRE_FLAG_ASCII
sre_compile.SRE_FLAG_DEBUG
sre_compile.SRE_FLAG_DOTALL
sre_compile.SRE_FLAG_IGNORECASE
sre_compile.SRE_FLAG_LOCALE
sre_compile.SRE_FLAG_MULTILINE
sre_compile.SRE_FLAG_TEMPLATE
sre_compile.SRE_FLAG_UNICODE
sre_compile.SRE_FLAG_VERBOSE
sre_compile.SRE_INFO_CHARSET
sre_compile.SRE_INFO_LITERAL
sre_compile.SRE_INFO_PREFIX
sre_compile.SUBPATTERN
sre_compile.SUCCESS
sre_compile._ASSERT_CODES
sre_compile._BITS_TRANS
sre_compile._CODEBITS
sre_compile._EXTRA_CASES
sre_compile._LITERAL_CODES
sre_compile._REPEATING_CODES
sre_compile._SUCCESS_CODES
sre_compile._UNIT_CODES
sre_compile._bytes_to_codes(b)[function]
sre_compile._code(p, flags)[function]
sre_compile._combine_flags(flags, add_flags, del_flags, TYPE_FLAGS=292)[function]
sre_compile._compile(code, pattern, flags)[function]
sre_compile._compile_charset(charset, flags, code)[function]
sre_compile._compile_info(code, pattern, flags)[function]
sre_compile._generate_overlap_table(prefix)[function] Generate an overlap table for the following prefix.\nAn overlap table is a table of the same size as the prefix which\ninforms about the potential self-overlap for each index in the prefix:\n- if overlap[i] == 0, prefix[i:] can't overlap prefix[0:...]\n- if overlap[i] == k with 0 < k <= i, prefix[i-k+1:i+1] overlaps with\n  prefix[0:k]
sre_compile._get_charset_prefix(pattern, flags)[function]
sre_compile._get_iscased(flags)[function]
sre_compile._get_literal_prefix(pattern, flags)[function]
sre_compile._hex_code(code)[function]
sre_compile._mk_bitmap(bits, _CODEBITS=32, _int=<??>)[function]
sre_compile._optimize_charset(charset, iscased=None, fixup=None, fixes=None)[function]
sre_compile._simple(p)[function]
sre_compile.compile(p, flags=0)[function]
sre_compile.dis(code)[function]
sre_compile.error(msg, pattern=None, pos=None)[class] Exception raised for invalid regular expressions.
sre_compile.isstring(obj)[function]
sre_constants
sre_constants.ANY
sre_constants.ANY_ALL
sre_constants.ASSERT
sre_constants.ASSERT_NOT
sre_constants.AT
sre_constants.ATCODES
sre_constants.ATOMIC_GROUP
sre_constants.AT_BEGINNING
sre_constants.AT_BEGINNING_LINE
sre_constants.AT_BEGINNING_STRING
sre_constants.AT_BOUNDARY
sre_constants.AT_END
sre_constants.AT_END_LINE
sre_constants.AT_END_STRING
sre_constants.AT_LOCALE
sre_constants.AT_LOC_BOUNDARY
sre_constants.AT_LOC_NON_BOUNDARY
sre_constants.AT_MULTILINE
sre_constants.AT_NON_BOUNDARY
sre_constants.AT_UNICODE
sre_constants.AT_UNI_BOUNDARY
sre_constants.AT_UNI_NON_BOUNDARY
sre_constants.BIGCHARSET
sre_constants.BRANCH
sre_constants.CATEGORY
sre_constants.CATEGORY_DIGIT
sre_constants.CATEGORY_LINEBREAK
sre_constants.CATEGORY_LOC_NOT_WORD
sre_constants.CATEGORY_LOC_WORD
sre_constants.CATEGORY_NOT_DIGIT
sre_constants.CATEGORY_NOT_LINEBREAK
sre_constants.CATEGORY_NOT_SPACE
sre_constants.CATEGORY_NOT_WORD
sre_constants.CATEGORY_SPACE
sre_constants.CATEGORY_UNI_DIGIT
sre_constants.CATEGORY_UNI_LINEBREAK
sre_constants.CATEGORY_UNI_NOT_DIGIT
sre_constants.CATEGORY_UNI_NOT_LINEBREAK
sre_constants.CATEGORY_UNI_NOT_SPACE
sre_constants.CATEGORY_UNI_NOT_WORD
sre_constants.CATEGORY_UNI_SPACE
sre_constants.CATEGORY_UNI_WORD
sre_constants.CATEGORY_WORD
sre_constants.CHARSET
sre_constants.CHCODES
sre_constants.CH_LOCALE
sre_constants.CH_UNICODE
sre_constants.FAILURE
sre_constants.GROUPREF
sre_constants.GROUPREF_EXISTS
sre_constants.GROUPREF_IGNORE
sre_constants.GROUPREF_LOC_IGNORE
sre_constants.GROUPREF_UNI_IGNORE
sre_constants.IN
sre_constants.INFO
sre_constants.IN_IGNORE
sre_constants.IN_LOC_IGNORE
sre_constants.IN_UNI_IGNORE
sre_constants.JUMP
sre_constants.LITERAL
sre_constants.LITERAL_IGNORE
sre_constants.LITERAL_LOC_IGNORE
sre_constants.LITERAL_UNI_IGNORE
sre_constants.MAGIC
sre_constants.MARK
sre_constants.MAXGROUPS
sre_constants.MAXREPEAT
sre_constants.MAX_REPEAT
sre_constants.MAX_UNTIL
sre_constants.MIN_REPEAT
sre_constants.MIN_REPEAT_ONE
sre_constants.MIN_UNTIL
sre_constants.NEGATE
sre_constants.NOT_LITERAL
sre_constants.NOT_LITERAL_IGNORE
sre_constants.NOT_LITERAL_LOC_IGNORE
sre_constants.NOT_LITERAL_UNI_IGNORE
sre_constants.OPCODES
sre_constants.OP_IGNORE
sre_constants.OP_LOCALE_IGNORE
sre_constants.OP_UNICODE_IGNORE
sre_constants.POSSESSIVE_REPEAT
sre_constants.POSSESSIVE_REPEAT_ONE
sre_constants.RANGE
sre_constants.RANGE_UNI_IGNORE
sre_constants.REPEAT
sre_constants.REPEAT_ONE
sre_constants.SRE_FLAG_ASCII
sre_constants.SRE_FLAG_DEBUG
sre_constants.SRE_FLAG_DOTALL
sre_constants.SRE_FLAG_IGNORECASE
sre_constants.SRE_FLAG_LOCALE
sre_constants.SRE_FLAG_MULTILINE
sre_constants.SRE_FLAG_TEMPLATE
sre_constants.SRE_FLAG_UNICODE
sre_constants.SRE_FLAG_VERBOSE
sre_constants.SRE_INFO_CHARSET
sre_constants.SRE_INFO_LITERAL
sre_constants.SRE_INFO_PREFIX
sre_constants.SUBPATTERN
sre_constants.SUCCESS
sre_constants._NamedIntConstant(value, name)[class] int([x]) -> integer\nint(x, base=10) -> integer
sre_constants._makecodes(*names)[function]
sre_constants.error(msg, pattern=None, pos=None)[class] Exception raised for invalid regular expressions.
sre_parse
sre_parse.ANY
sre_parse.ANY_ALL
sre_parse.ASCIILETTERS
sre_parse.ASSERT
sre_parse.ASSERT_NOT
sre_parse.AT
sre_parse.ATCODES
sre_parse.ATOMIC_GROUP
sre_parse.AT_BEGINNING
sre_parse.AT_BEGINNING_LINE
sre_parse.AT_BEGINNING_STRING
sre_parse.AT_BOUNDARY
sre_parse.AT_END
sre_parse.AT_END_LINE
sre_parse.AT_END_STRING
sre_parse.AT_LOCALE
sre_parse.AT_LOC_BOUNDARY
sre_parse.AT_LOC_NON_BOUNDARY
sre_parse.AT_MULTILINE
sre_parse.AT_NON_BOUNDARY
sre_parse.AT_UNICODE
sre_parse.AT_UNI_BOUNDARY
sre_parse.AT_UNI_NON_BOUNDARY
sre_parse.BIGCHARSET
sre_parse.BRANCH
sre_parse.CATEGORIES
sre_parse.CATEGORY
sre_parse.CATEGORY_DIGIT
sre_parse.CATEGORY_LINEBREAK
sre_parse.CATEGORY_LOC_NOT_WORD
sre_parse.CATEGORY_LOC_WORD
sre_parse.CATEGORY_NOT_DIGIT
sre_parse.CATEGORY_NOT_LINEBREAK
sre_parse.CATEGORY_NOT_SPACE
sre_parse.CATEGORY_NOT_WORD
sre_parse.CATEGORY_SPACE
sre_parse.CATEGORY_UNI_DIGIT
sre_parse.CATEGORY_UNI_LINEBREAK
sre_parse.CATEGORY_UNI_NOT_DIGIT
sre_parse.CATEGORY_UNI_NOT_LINEBREAK
sre_parse.CATEGORY_UNI_NOT_SPACE
sre_parse.CATEGORY_UNI_NOT_WORD
sre_parse.CATEGORY_UNI_SPACE
sre_parse.CATEGORY_UNI_WORD
sre_parse.CATEGORY_WORD
sre_parse.CHARSET
sre_parse.CHCODES
sre_parse.CH_LOCALE
sre_parse.CH_UNICODE
sre_parse.DIGITS
sre_parse.ESCAPES
sre_parse.FAILURE
sre_parse.FLAGS
sre_parse.GLOBAL_FLAGS
sre_parse.GROUPREF
sre_parse.GROUPREF_EXISTS
sre_parse.GROUPREF_IGNORE
sre_parse.GROUPREF_LOC_IGNORE
sre_parse.GROUPREF_UNI_IGNORE
sre_parse.HEXDIGITS
sre_parse.IN
sre_parse.INFO
sre_parse.IN_IGNORE
sre_parse.IN_LOC_IGNORE
sre_parse.IN_UNI_IGNORE
sre_parse.JUMP
sre_parse.LITERAL
sre_parse.LITERAL_IGNORE
sre_parse.LITERAL_LOC_IGNORE
sre_parse.LITERAL_UNI_IGNORE
sre_parse.MAGIC
sre_parse.MARK
sre_parse.MAXGROUPS
sre_parse.MAXREPEAT
sre_parse.MAX_REPEAT
sre_parse.MAX_UNTIL
sre_parse.MIN_REPEAT
sre_parse.MIN_REPEAT_ONE
sre_parse.MIN_UNTIL
sre_parse.NEGATE
sre_parse.NOT_LITERAL
sre_parse.NOT_LITERAL_IGNORE
sre_parse.NOT_LITERAL_LOC_IGNORE
sre_parse.NOT_LITERAL_UNI_IGNORE
sre_parse.OCTDIGITS
sre_parse.OPCODES
sre_parse.OP_IGNORE
sre_parse.OP_LOCALE_IGNORE
sre_parse.OP_UNICODE_IGNORE
sre_parse.POSSESSIVE_REPEAT
sre_parse.POSSESSIVE_REPEAT_ONE
sre_parse.RANGE
sre_parse.RANGE_UNI_IGNORE
sre_parse.REPEAT
sre_parse.REPEAT_CHARS
sre_parse.REPEAT_ONE
sre_parse.SPECIAL_CHARS
sre_parse.SRE_FLAG_ASCII
sre_parse.SRE_FLAG_DEBUG
sre_parse.SRE_FLAG_DOTALL
sre_parse.SRE_FLAG_IGNORECASE
sre_parse.SRE_FLAG_LOCALE
sre_parse.SRE_FLAG_MULTILINE
sre_parse.SRE_FLAG_TEMPLATE
sre_parse.SRE_FLAG_UNICODE
sre_parse.SRE_FLAG_VERBOSE
sre_parse.SRE_INFO_CHARSET
sre_parse.SRE_INFO_LITERAL
sre_parse.SRE_INFO_PREFIX
sre_parse.SUBPATTERN
sre_parse.SUCCESS
sre_parse.State()[class]
sre_parse.SubPattern(state, data=None)[class]
sre_parse.TYPE_FLAGS
sre_parse.Tokenizer(string)[class]
sre_parse.WHITESPACE
sre_parse._REPEATCODES
sre_parse._UNITCODES
sre_parse._class_escape(source, escape)[function]
sre_parse._escape(source, escape, state)[function]
sre_parse._parse(source, state, verbose, nested, first=False)[function]
sre_parse._parse_flags(source, state, char)[function]
sre_parse._parse_sub(source, state, verbose, nested)[function]
sre_parse._uniq(items)[function]
sre_parse.error(msg, pattern=None, pos=None)[class] Exception raised for invalid regular expressions.
sre_parse.fix_flags(src, flags)[function]
sre_parse.parse(str, flags=0, state=None)[function]
sre_parse.parse_template(source, pattern)[function]
ssl
ssl.ALERT_DESCRIPTION_ACCESS_DENIED
ssl.ALERT_DESCRIPTION_BAD_CERTIFICATE
ssl.ALERT_DESCRIPTION_BAD_CERTIFICATE_HASH_VALUE
ssl.ALERT_DESCRIPTION_BAD_CERTIFICATE_STATUS_RESPONSE
ssl.ALERT_DESCRIPTION_BAD_RECORD_MAC
ssl.ALERT_DESCRIPTION_CERTIFICATE_EXPIRED
ssl.ALERT_DESCRIPTION_CERTIFICATE_REVOKED
ssl.ALERT_DESCRIPTION_CERTIFICATE_UNKNOWN
ssl.ALERT_DESCRIPTION_CERTIFICATE_UNOBTAINABLE
ssl.ALERT_DESCRIPTION_CLOSE_NOTIFY
ssl.ALERT_DESCRIPTION_DECODE_ERROR
ssl.ALERT_DESCRIPTION_DECOMPRESSION_FAILURE
ssl.ALERT_DESCRIPTION_DECRYPT_ERROR
ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE
ssl.ALERT_DESCRIPTION_ILLEGAL_PARAMETER
ssl.ALERT_DESCRIPTION_INSUFFICIENT_SECURITY
ssl.ALERT_DESCRIPTION_INTERNAL_ERROR
ssl.ALERT_DESCRIPTION_NO_RENEGOTIATION
ssl.ALERT_DESCRIPTION_PROTOCOL_VERSION
ssl.ALERT_DESCRIPTION_RECORD_OVERFLOW
ssl.ALERT_DESCRIPTION_UNEXPECTED_MESSAGE
ssl.ALERT_DESCRIPTION_UNKNOWN_CA
ssl.ALERT_DESCRIPTION_UNKNOWN_PSK_IDENTITY
ssl.ALERT_DESCRIPTION_UNRECOGNIZED_NAME
ssl.ALERT_DESCRIPTION_UNSUPPORTED_CERTIFICATE
ssl.ALERT_DESCRIPTION_UNSUPPORTED_EXTENSION
ssl.ALERT_DESCRIPTION_USER_CANCELLED
ssl.AlertDescription(*values)[class] An enumeration.
ssl.CERT_NONE
ssl.CERT_OPTIONAL
ssl.CERT_REQUIRED
ssl.CHANNEL_BINDING_TYPES
ssl.CertificateError()[class] A certificate could not be verified.
ssl.DER_cert_to_PEM_cert(der_cert_bytes)[function] Takes a certificate in binary DER format and returns the\nPEM version of it as a string.
ssl.DefaultVerifyPaths(cafile, capath, openssl_cafile_env, openssl_cafile,\n  openssl_capath_env, openssl_capath)[class] DefaultVerifyPaths(cafile, capath, openssl_cafile_env, openssl_cafile, openssl_capath_env, openssl_capath)
ssl.HAS_ALPN
ssl.HAS_ECDH
ssl.HAS_NEVER_CHECK_COMMON_NAME
ssl.HAS_NPN
ssl.HAS_SNI
ssl.HAS_SSLv2
ssl.HAS_SSLv3
ssl.HAS_TLSv1
ssl.HAS_TLSv1_1
ssl.HAS_TLSv1_2
ssl.HAS_TLSv1_3
ssl.MemoryBIO()[class]
ssl.OPENSSL_VERSION
ssl.OPENSSL_VERSION_INFO
ssl.OPENSSL_VERSION_NUMBER
ssl.OP_ALL
ssl.OP_CIPHER_SERVER_PREFERENCE
ssl.OP_ENABLE_KTLS
ssl.OP_ENABLE_MIDDLEBOX_COMPAT
ssl.OP_IGNORE_UNEXPECTED_EOF
ssl.OP_LEGACY_SERVER_CONNECT
ssl.OP_NO_COMPRESSION
ssl.OP_NO_RENEGOTIATION
ssl.OP_NO_SSLv2
ssl.OP_NO_SSLv3
ssl.OP_NO_TICKET
ssl.OP_NO_TLSv1
ssl.OP_NO_TLSv1_1
ssl.OP_NO_TLSv1_2
ssl.OP_NO_TLSv1_3
ssl.OP_SINGLE_DH_USE
ssl.OP_SINGLE_ECDH_USE
ssl.Options(*values)[class] An enumeration.
ssl.PEM_FOOTER
ssl.PEM_HEADER
ssl.PEM_cert_to_DER_cert(pem_cert_string)[function] Takes a certificate in ASCII PEM format and returns the\nDER-encoded version of it as a byte sequence
ssl.PROTOCOL_SSLv23
ssl.PROTOCOL_TLS
ssl.PROTOCOL_TLS_CLIENT
ssl.PROTOCOL_TLS_SERVER
ssl.PROTOCOL_TLSv1
ssl.PROTOCOL_TLSv1_1
ssl.PROTOCOL_TLSv1_2
ssl.Purpose(*values)[class] SSLContext purpose flags with X509v3 Extended Key Usage objects
ssl.RAND_add(string, entropy, /)Mix string into the OpenSSL PRNG state.
ssl.RAND_bytes(n, /)Generate n cryptographically strong pseudo-random bytes.
ssl.RAND_status()Returns True if the OpenSSL PRNG has been seeded with enough data and False if not.
ssl.SOCK_STREAM
ssl.SOL_SOCKET
ssl.SO_TYPE
ssl.SSLCertVerificationError()[class] A certificate could not be verified.
ssl.SSLContext(protocol=None, *args, **kwargs)[class] An SSLContext holds various SSL-related configuration options and\ndata, such as certificates and possibly a private key.
ssl.SSLEOFError()[class] SSL/TLS connection terminated abruptly.
ssl.SSLError()[class] An error occurred in the SSL implementation.
ssl.SSLErrorNumber(*values)[class] An enumeration.
ssl.SSLObject(*args, **kwargs)[class] This class implements an interface on top of a low-level SSL object as\nimplemented by OpenSSL. This object captures the state of an SSL connection\nbut does not provide any network IO itself. IO needs to be performed\nthrough separate "BIO" objects which are OpenSSL's IO abstraction layer.
ssl.SSLSession()[class]
ssl.SSLSocket(*args, **kwargs)[class] This class implements a subtype of socket.socket that wraps\nthe underlying OS socket in an SSL context when necessary, and\nprovides read and write methods over that channel.
ssl.SSLSyscallError()[class] System error when attempting SSL operation.
ssl.SSLWantReadError()[class] Non-blocking SSL socket needs to read more data\nbefore the requested operation can be completed.
ssl.SSLWantWriteError()[class] Non-blocking SSL socket needs to write more data\nbefore the requested operation can be completed.
ssl.SSLZeroReturnError()[class] SSL/TLS session closed cleanly.
ssl.SSL_ERROR_EOF
ssl.SSL_ERROR_INVALID_ERROR_CODE
ssl.SSL_ERROR_SSL
ssl.SSL_ERROR_SYSCALL
ssl.SSL_ERROR_WANT_CONNECT
ssl.SSL_ERROR_WANT_READ
ssl.SSL_ERROR_WANT_WRITE
ssl.SSL_ERROR_WANT_X509_LOOKUP
ssl.SSL_ERROR_ZERO_RETURN
ssl.TLSVersion(*values)[class] An enumeration.
ssl.VERIFY_ALLOW_PROXY_CERTS
ssl.VERIFY_CRL_CHECK_CHAIN
ssl.VERIFY_CRL_CHECK_LEAF
ssl.VERIFY_DEFAULT
ssl.VERIFY_X509_PARTIAL_CHAIN
ssl.VERIFY_X509_STRICT
ssl.VERIFY_X509_TRUSTED_FIRST
ssl.VerifyFlags(*values)[class] An enumeration.
ssl.VerifyMode(*values)[class] An enumeration.
ssl.cert_time_to_seconds(cert_time)[function] Return the time in seconds since the Epoch, given the timestring\nrepresenting the "notBefore" or "notAfter" date from a certificate\nin ``"%b %d %H:%M:%S %Y %Z"`` strptime format (C locale).
ssl.create_connection(address, timeout=<??>, source_address=None, *,\n  all_errors=False)[function] Connect to *address* and return the socket object.
ssl.create_default_context(purpose=<??>, *, cafile=None, capath=None,\n  cadata=None)[function] Create a SSLContext object with default settings.
ssl.enum_certificates(store_name)Retrieve certificates from Windows' cert store.
ssl.enum_crls(store_name)Retrieve CRLs from Windows' cert store.
ssl.get_default_verify_paths()[function] Return paths to default cafile and capath.
ssl.get_protocol_name(protocol_code)[function]
ssl.get_server_certificate(addr, ssl_version=<??>, ca_certs=None, timeout=<??>)[function] Retrieve the certificate from the server at the specified address,\nand return it as a PEM-encoded string.\nIf 'ca_certs' is specified, validate the server cert against it.\nIf 'ssl_version' is specified, use it in the connection attempt.\nIf 'timeout' is specified, use it in the connection attempt.
ssl.namedtuple(typename, field_names, *, rename=False, defaults=None,\n  module=None)[function] Returns a new subclass of tuple with named fields.
ssl.socket(family=-1, type=-1, proto=-1, fileno=None)[class] A subclass of _socket.socket adding the makefile() method.
ssl.socket_error()[class] Base class for I/O related errors.
stat
stat.FILE_ATTRIBUTE_ARCHIVE
stat.FILE_ATTRIBUTE_COMPRESSED
stat.FILE_ATTRIBUTE_DEVICE
stat.FILE_ATTRIBUTE_DIRECTORY
stat.FILE_ATTRIBUTE_ENCRYPTED
stat.FILE_ATTRIBUTE_HIDDEN
stat.FILE_ATTRIBUTE_INTEGRITY_STREAM
stat.FILE_ATTRIBUTE_NORMAL
stat.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED
stat.FILE_ATTRIBUTE_NO_SCRUB_DATA
stat.FILE_ATTRIBUTE_OFFLINE
stat.FILE_ATTRIBUTE_READONLY
stat.FILE_ATTRIBUTE_REPARSE_POINT
stat.FILE_ATTRIBUTE_SPARSE_FILE
stat.FILE_ATTRIBUTE_SYSTEM
stat.FILE_ATTRIBUTE_TEMPORARY
stat.FILE_ATTRIBUTE_VIRTUAL
stat.IO_REPARSE_TAG_APPEXECLINK
stat.IO_REPARSE_TAG_MOUNT_POINT
stat.IO_REPARSE_TAG_SYMLINK
stat.SF_APPEND
stat.SF_ARCHIVED
stat.SF_IMMUTABLE
stat.SF_NOUNLINK
stat.SF_SNAPSHOT
stat.ST_ATIME
stat.ST_CTIME
stat.ST_DEV
stat.ST_GID
stat.ST_INO
stat.ST_MODE
stat.ST_MTIME
stat.ST_NLINK
stat.ST_SIZE
stat.ST_UID
stat.S_ENFMT
stat.S_IEXEC
stat.S_IFBLK
stat.S_IFCHR
stat.S_IFDIR
stat.S_IFDOOR
stat.S_IFIFO
stat.S_IFLNK
stat.S_IFMT(mode)Return the portion of the file's mode that describes the file type.
stat.S_IFPORT
stat.S_IFREG
stat.S_IFSOCK
stat.S_IFWHT
stat.S_IMODE(mode)Return the portion of the file's mode that can be set by os.chmod().
stat.S_IREAD
stat.S_IRGRP
stat.S_IROTH
stat.S_IRUSR
stat.S_IRWXG
stat.S_IRWXO
stat.S_IRWXU
stat.S_ISBLK(mode)S_ISBLK(mode) -> bool
stat.S_ISCHR(mode)S_ISCHR(mode) -> bool
stat.S_ISDIR(mode)S_ISDIR(mode) -> bool
stat.S_ISDOOR(mode)S_ISDOOR(mode) -> bool
stat.S_ISFIFO(mode)S_ISFIFO(mode) -> bool
stat.S_ISGID
stat.S_ISLNK(mode)S_ISLNK(mode) -> bool
stat.S_ISPORT(mode)S_ISPORT(mode) -> bool
stat.S_ISREG(mode)S_ISREG(mode) -> bool
stat.S_ISSOCK(mode)S_ISSOCK(mode) -> bool
stat.S_ISUID
stat.S_ISVTX
stat.S_ISWHT(mode)S_ISWHT(mode) -> bool
stat.S_IWGRP
stat.S_IWOTH
stat.S_IWRITE
stat.S_IWUSR
stat.S_IXGRP
stat.S_IXOTH
stat.S_IXUSR
stat.UF_APPEND
stat.UF_COMPRESSED
stat.UF_HIDDEN
stat.UF_IMMUTABLE
stat.UF_NODUMP
stat.UF_NOUNLINK
stat.UF_OPAQUE
stat.filemode(mode)Convert a file's mode to a string of the form '-rwxrwxrwx'
staticmethod(function)[class] staticmethod(function) -> method
statistics
statistics.NormalDist(mu=0.0, sigma=1.0)[class] Normal distribution of a random variable
statistics.StatisticsError()[class] Inappropriate argument value (of correct type).
statistics.correlation(x, y, /, *, method='linear')[function] Pearson's correlation coefficient
statistics.covariance(x, y, /)[function] Covariance
statistics.fmean(data, weights=None)[function] Convert data to floats and compute the arithmetic mean.
statistics.geometric_mean(data)[function] Convert data to floats and compute the geometric mean.
statistics.harmonic_mean(data, weights=None)[function] Return the harmonic mean of data.
statistics.linear_regression(x, y, /, *, proportional=False)[function] Slope and intercept for simple linear regression.
statistics.mean(data)[function] Return the sample arithmetic mean of data.
statistics.median(data)[function] Return the median (middle value) of numeric data.
statistics.median_grouped(data, interval=1.0)[function] Estimates the median for numeric data binned around the midpoints\nof consecutive, fixed-width intervals.
statistics.median_high(data)[function] Return the high median of data.
statistics.median_low(data)[function] Return the low median of numeric data.
statistics.mode(data)[function] Return the most common data point from discrete or nominal data.
statistics.multimode(data)[function] Return a list of the most frequently occurring values.
statistics.pstdev(data, mu=None)[function] Return the square root of the population variance.
statistics.pvariance(data, mu=None)[function] Return the population variance of ``data``.
statistics.quantiles(data, *, n=4, method='exclusive')[function] Divide *data* into *n* continuous intervals with equal probability.
statistics.stdev(data, xbar=None)[function] Return the square root of the sample variance.
statistics.variance(data, xbar=None)[function] Return the sample variance of data.
str(object='')[class] str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str
str(object=b'', encoding='utf-8', errors='strict')[class] str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str
string
string.Formatter()[class]
string.Template(template)[class] A string class for supporting $-substitutions.
string.ascii_letters
string.ascii_lowercase
string.ascii_uppercase
string.capwords(s, sep=None)[function] capwords(s [,sep]) -> string
string.digits
string.hexdigits
string.octdigits
string.printable
string.punctuation
string.whitespace
stringprep
stringprep.b1_set
stringprep.b3_exceptions
stringprep.c22_specials
stringprep.c6_set
stringprep.c7_set
stringprep.c8_set
stringprep.c9_set
stringprep.in_table_a1(code)[function]
stringprep.in_table_b1(code)[function]
stringprep.in_table_c11(code)[function]
stringprep.in_table_c11_c12(code)[function]
stringprep.in_table_c12(code)[function]
stringprep.in_table_c21(code)[function]
stringprep.in_table_c21_c22(code)[function]
stringprep.in_table_c22(code)[function]
stringprep.in_table_c3(code)[function]
stringprep.in_table_c4(code)[function]
stringprep.in_table_c5(code)[function]
stringprep.in_table_c6(code)[function]
stringprep.in_table_c7(code)[function]
stringprep.in_table_c8(code)[function]
stringprep.in_table_c9(code)[function]
stringprep.in_table_d1(code)[function]
stringprep.in_table_d2(code)[function]
stringprep.map_table_b2(a)[function]
stringprep.map_table_b3(code)[function]
stringprep.unicodedata
struct
struct.Struct(format)[class] Struct(fmt) --> compiled struct object
struct.calcsize(format, /)Return size in bytes of the struct described by the format string.
struct.error()[class] Common base class for all non-exit exceptions.
struct.iter_unpack(format, buffer, /)Return an iterator yielding tuples unpacked from the given bytes.
struct.pack(format, v1, v2, ...)pack(format, v1, v2, ...) -> bytes
struct.pack_into(format, buffer, offset, v1, v2, ...)pack_into(format, buffer, offset, v1, v2, ...)
struct.unpack(format, buffer, /)Return a tuple containing values unpacked according to the format string.
struct.unpack_from(format, /, buffer, offset=0)Return a tuple containing values unpacked according to the format string.
subprocess
subprocess.ABOVE_NORMAL_PRIORITY_CLASS
subprocess.BELOW_NORMAL_PRIORITY_CLASS
subprocess.CREATE_BREAKAWAY_FROM_JOB
subprocess.CREATE_DEFAULT_ERROR_MODE
subprocess.CREATE_NEW_CONSOLE
subprocess.CREATE_NEW_PROCESS_GROUP
subprocess.CREATE_NO_WINDOW
subprocess.CalledProcessError(returncode, cmd, output=None, stderr=None)[class] Raised when run() is called with check=True and the process\nreturns a non-zero exit status.
subprocess.CompletedProcess(args, returncode, stdout=None, stderr=None)[class] A process that has finished running.
subprocess.DETACHED_PROCESS
subprocess.DEVNULL
subprocess.HIGH_PRIORITY_CLASS
subprocess.IDLE_PRIORITY_CLASS
subprocess.NORMAL_PRIORITY_CLASS
subprocess.PIPE
subprocess.Popen(args, bufsize=-1, executable=None, stdin=None, stdout=None,\n  stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None,\n  universal_newlines=None, startupinfo=None, creationflags=0, restore_signals=True,\n  start_new_session=False, pass_fds=﴾﴿, *, user=None, group=None, extra_groups=None, encoding=None,\n  errors=None, text=None, umask=-1, pipesize=-1, process_group=None)[class] Execute a child program in a new process.
subprocess.REALTIME_PRIORITY_CLASS
subprocess.STARTF_USESHOWWINDOW
subprocess.STARTF_USESTDHANDLES
subprocess.STARTUPINFO(*, dwFlags=0, hStdInput=None, hStdOutput=None,\n  hStdError=None, wShowWindow=0, lpAttributeList=None)[class]
subprocess.STDOUT
subprocess.STD_ERROR_HANDLE
subprocess.STD_INPUT_HANDLE
subprocess.STD_OUTPUT_HANDLE
subprocess.SW_HIDE
subprocess.SubprocessError()[class] Common base class for all non-exit exceptions.
subprocess.TimeoutExpired(cmd, timeout, output=None, stderr=None)[class] This exception is raised when the timeout expires while waiting for a\nchild process.
subprocess.call(*popenargs, *, timeout=None, **kwargs)[function] Run command with arguments.  Wait for command to complete or\ntimeout, then return the returncode attribute.
subprocess.check_call(*popenargs, **kwargs)[function] Run command with arguments.  Wait for command to complete.  If\nthe exit code was zero then return, otherwise raise\nCalledProcessError.  The CalledProcessError object will have the\nreturn code in the returncode attribute.
subprocess.check_output(*popenargs, *, timeout=None, **kwargs)[function] Run command with arguments and return its output.
subprocess.getoutput(cmd, *, encoding=None, errors=None)[function] Return output (stdout or stderr) of executing cmd in a shell.
subprocess.getstatusoutput(cmd, *, encoding=None, errors=None)[function] Return (exitcode, output) of executing cmd in a shell.
subprocess.run(*popenargs, *, input=None, capture_output=False, timeout=None,\n  check=False, **kwargs)[function] Run command with arguments and return a CompletedProcess instance.
sum(iterable, /, start=0)Return the sum of a 'start' value (default: 0) plus an iterable of numbers
sunau
sunau.AUDIO_FILE_ENCODING_ADPCM_G721
sunau.AUDIO_FILE_ENCODING_ADPCM_G722
sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3
sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5
sunau.AUDIO_FILE_ENCODING_ALAW_8
sunau.AUDIO_FILE_ENCODING_DOUBLE
sunau.AUDIO_FILE_ENCODING_FLOAT
sunau.AUDIO_FILE_ENCODING_LINEAR_16
sunau.AUDIO_FILE_ENCODING_LINEAR_24
sunau.AUDIO_FILE_ENCODING_LINEAR_32
sunau.AUDIO_FILE_ENCODING_LINEAR_8
sunau.AUDIO_FILE_ENCODING_MULAW_8
sunau.AUDIO_FILE_MAGIC
sunau.AUDIO_UNKNOWN_SIZE
sunau.Au_read(f)[class]
sunau.Au_write(f)[class]
sunau.Error()[class] Common base class for all non-exit exceptions.
sunau.namedtuple(typename, field_names, *, rename=False, defaults=None,\n  module=None)[function] Returns a new subclass of tuple with named fields.
sunau.open(f, mode=None)[function]
super([type[, object-or-type]])[class] super() -> same as super(__class__, <first argument>)\nsuper(type) -> unbound super object\nsuper(type, obj) -> bound super object; requires isinstance(obj, type)\nsuper(type, type2) -> bound super object; requires issubclass(type2, type)\nTypical use to call a cooperative superclass method:\nclass C(B):\n    def meth(self, arg):\n        super().meth(arg)\nThis works for class methods too:\nclass C(B):\n    @classmethod\n    def cmeth(cls, arg):\n        super().cmeth(arg)
symtable
symtable.Class(raw_table, filename)[class]
symtable.Function(raw_table, filename)[class]
symtable.Symbol(name, flags, namespaces=None, *, module_scope=False)[class]
symtable.SymbolTable(raw_table, filename)[class]
symtable.symtable(code, filename, compile_type)[function] Return the toplevel *SymbolTable* for the source code.
sys
sys._base_executable
sys._clear_type_cache()Clear the internal type lookup cache.
sys._current_exceptions()Return a dict mapping each thread's identifier to its current raised exception.
sys._current_frames()Return a dict mapping each thread's thread id to its current stack frame.
sys._debugmallocstats()Print summary info to stderr about the state of pymalloc's structures.
sys._enablelegacywindowsfsencoding()Changes the default filesystem encoding to mbcs:replace.
sys._framework
sys._getframe(depth=0, /)Return a frame object from the call stack.
sys._getframemodulename(depth=0)Return the name of the module for a calling frame.
sys._git
sys._home
sys._setprofileallthreads(arg, /)Set the profiling function in all running threads belonging to the current interpreter.
sys._settraceallthreads(arg, /)Set the global debug tracing function in all running threads belonging to the current interpreter.
sys._stdlib_dir
sys._vpath
sys._xoptions
sys.activate_stack_trampoline(backend, /)Activate stack profiler trampoline *backend*.
sys.addaudithook(hook)Adds a new audit hook callback.
sys.api_version
sys.argv
sys.audit(event, *args)audit(event, *args)
sys.base_exec_prefix
sys.base_prefix
sys.breakpointhook(*args, **kws)breakpointhook(*args, **kws)
sys.builtin_module_names
sys.byteorder
sys.call_tracing(func, args, /)Call func(*args), while tracing is enabled.
sys.copyright
sys.deactivate_stack_trampoline()Deactivate the current stack profiler trampoline backend.
sys.displayhook(object, /)Print an object to sys.stdout and also save it in builtins._
sys.dllhandle
sys.dont_write_bytecode
sys.exc_info()Return current exception information: (type, value, traceback).
sys.excepthook(exctype, value, traceback, /)Handle an exception by displaying it with a traceback on sys.stderr.
sys.exception()Return the current exception.
sys.exec_prefix
sys.executable
sys.exit(status=None, /)Exit the interpreter by raising SystemExit(status).
sys.flags
sys.float_info
sys.float_repr_style
sys.get_asyncgen_hooks()Return the installed asynchronous generators hooks.
sys.get_coroutine_origin_tracking_depth()Check status of origin tracking for coroutine objects in this thread.
sys.get_int_max_str_digits()Return the maximum string digits limit for non-binary int<->str conversions.
sys.getallocatedblocks()Return the number of memory blocks currently allocated.
sys.getdefaultencoding()Return the current default encoding used by the Unicode implementation.
sys.getfilesystemencodeerrors()Return the error mode used Unicode to OS filename conversion.
sys.getfilesystemencoding()Return the encoding used to convert Unicode filenames to OS filenames.
sys.getprofile()Return the profiling function set with sys.setprofile.
sys.getrecursionlimit()Return the current value of the recursion limit.
sys.getrefcount(object, /)Return the reference count of object.
sys.getsizeof(object[, default])getsizeof(object [, default]) -> int
sys.getswitchinterval()Return the current thread switch interval; see sys.setswitchinterval().
sys.gettrace()Return the global debug tracing function set with sys.settrace.
sys.getunicodeinternedsize()Return the number of elements of the unicode interned dictionary
sys.getwindowsversion()Return info about the running version of Windows as a named tuple.
sys.hash_info
sys.hexversion
sys.implementation
sys.int_info
sys.intern(string, /)``Intern'' the given string.
sys.is_finalizing()Return True if Python is exiting.
sys.is_stack_trampoline_active()Return *True* if a stack profiler trampoline is active.
sys.maxsize
sys.maxunicode
sys.meta_path
sys.modules
sys.orig_argv
sys.path
sys.path_hooks
sys.path_importer_cache
sys.platform
sys.platlibdir
sys.prefix
sys.pycache_prefix
sys.set_asyncgen_hooks(firstiter, finalizer)set_asyncgen_hooks(* [, firstiter] [, finalizer])
sys.set_coroutine_origin_tracking_depth(depth)Enable or disable origin tracking for coroutine objects in this thread.
sys.set_int_max_str_digits(maxdigits)Set the maximum string digits limit for non-binary int<->str conversions.
sys.setprofile(profilefunc)setprofile(function)
sys.setrecursionlimit(limit, /)Set the maximum depth of the Python interpreter stack to n.
sys.setswitchinterval(interval, /)Set the ideal thread switching delay inside the Python interpreter.
sys.settrace(tracefunc)settrace(function)
sys.stderr
sys.stdin
sys.stdlib_module_names
sys.stdout
sys.thread_info
sys.unraisablehook(unraisable, /)Handle an unraisable exception.
sys.version
sys.version_info
sys.warnoptions
sys.winver
sysconfig
sysconfig.get_config_h_filename()[function] Return the path of pyconfig.h.
sysconfig.get_config_var(name)[function] Return the value of a single variable using the dictionary returned by\n'get_config_vars()'.
sysconfig.get_config_vars(*args)[function] With no arguments, return a dictionary of all configuration\nvariables relevant for the current platform.
sysconfig.get_makefile_filename()[function] Return the path of the Makefile.
sysconfig.get_path(name, scheme='nt', vars=None, expand=True)[function] Return a path corresponding to the scheme.
sysconfig.get_path_names()[function] Return a tuple containing the paths names.
sysconfig.get_paths(scheme='nt', vars=None, expand=True)[function] Return a mapping containing an install scheme.
sysconfig.get_platform()[function] Return a string that identifies the current platform.
sysconfig.get_python_version()[function]
sysconfig.get_scheme_names()[function] Return a tuple containing the schemes names.
sysconfig.parse_config_h(fp, vars=None)[function] Parse a config.h-style file.
tabnanny
tabnanny.NannyNag(lineno, msg, line)[class] Raised by process_tokens() if detecting an ambiguous indent.\nCaptured and handled in check().
tabnanny.check(file)[function] check(file_or_dir)
tabnanny.process_tokens(tokens)[function]
tarfile
tarfile.AbsoluteLinkError(tarinfo)[class] Base exception.
tarfile.AbsolutePathError(tarinfo)[class] Base exception.
tarfile.CompressionError()[class] Exception for unavailable compression methods.
tarfile.DEFAULT_FORMAT
tarfile.ENCODING
tarfile.ExtractError()[class] General exception for extract errors.
tarfile.FilterError()[class] Base exception.
tarfile.GNU_FORMAT
tarfile.HeaderError()[class] Base exception for header errors.
tarfile.LinkOutsideDestinationError(tarinfo, path)[class] Base exception.
tarfile.OutsideDestinationError(tarinfo, path)[class] Base exception.
tarfile.PAX_FORMAT
tarfile.ReadError()[class] Exception for unreadable tar archives.
tarfile.SpecialFileError(tarinfo)[class] Base exception.
tarfile.StreamError()[class] Exception for unsupported operations on stream-like TarFiles.
tarfile.TarError()[class] Base exception.
tarfile.TarFile(name=None, mode='r', fileobj=None, format=None, tarinfo=None,\n  dereference=None, ignore_zeros=None, encoding=None, errors='surrogateescape',\n  pax_headers=None, debug=None, errorlevel=None, copybufsize=None)[class] The TarFile Class provides an interface to tar archives.
tarfile.TarInfo(name='')[class] Informational class which holds the details about an\narchive member given by a tar header block.\nTarInfo objects are returned by TarFile.getmember(),\nTarFile.getmembers() and TarFile.gettarinfo() and are\nusually created internally.
tarfile.USTAR_FORMAT
tarfile.data_filter(member, dest_path)[function]
tarfile.fully_trusted_filter(member, dest_path)[function]
tarfile.is_tarfile(name)[function] Return True if name points to a tar archive that we\nare able to handle, else return False.
tarfile.open(name=None, mode='r', fileobj=None, bufsize=10240, **kwargs)[method] Open a tar archive for reading, writing or appending. Return\nan appropriate TarFile class.
tarfile.tar_filter(member, dest_path)[function]
telnetlib
telnetlib.Telnet(host=None, port=0, timeout=<??>)[class] Telnet interface class.
tempfile
tempfile.NamedTemporaryFile(mode='w+b', buffering=-1, encoding=None,\n  newline=None, suffix=None, prefix=None, dir=None, delete=True, *, errors=None,\n  delete_on_close=True)[function] Create and return a temporary file.\nArguments:\n'prefix', 'suffix', 'dir' -- as for mkstemp.\n'mode' -- the mode argument to io.open (default "w+b").\n'buffering' -- the buffer size argument to io.open (default -1).\n'encoding' -- the encoding argument to io.open (default None)\n'newline' -- the newline argument to io.open (default None)\n'delete' -- whether the file is automatically deleted (default True).\n'delete_on_close' -- if 'delete', whether the file is deleted on close\n   (default True) or otherwise either on context manager exit\n   (if context manager was used) or on object finalization. .\n'errors' -- the errors argument to io.open (default None)\nThe file is created as mkstemp() would do it.
tempfile.SpooledTemporaryFile(max_size=0, mode='w+b', buffering=-1,\n  encoding=None, newline=None, suffix=None, prefix=None, dir=None, *, errors=None)[class] Temporary file wrapper, specialized to switch from BytesIO\nor StringIO to a real file when it exceeds a certain size or\nwhen a fileno is needed.
tempfile.TMP_MAX
tempfile.TemporaryDirectory(suffix=None, prefix=None, dir=None,\n  ignore_cleanup_errors=False, *, delete=True)[class] Create and return a temporary directory.  This has the same\nbehavior as mkdtemp but can be used as a context manager.  For\nexample:
tempfile.TemporaryFile(mode='w+b', buffering=-1, encoding=None, newline=None,\n  suffix=None, prefix=None, dir=None, delete=True, *, errors=None, delete_on_close=True)[function] Create and return a temporary file.\nArguments:\n'prefix', 'suffix', 'dir' -- as for mkstemp.\n'mode' -- the mode argument to io.open (default "w+b").\n'buffering' -- the buffer size argument to io.open (default -1).\n'encoding' -- the encoding argument to io.open (default None)\n'newline' -- the newline argument to io.open (default None)\n'delete' -- whether the file is automatically deleted (default True).\n'delete_on_close' -- if 'delete', whether the file is deleted on close\n   (default True) or otherwise either on context manager exit\n   (if context manager was used) or on object finalization. .\n'errors' -- the errors argument to io.open (default None)\nThe file is created as mkstemp() would do it.
tempfile.gettempdir()[function] Returns tempfile.tempdir as str.
tempfile.gettempdirb()[function] Returns tempfile.tempdir as bytes.
tempfile.gettempprefix()[function] The default prefix for temporary directories as string.
tempfile.gettempprefixb()[function] The default prefix for temporary directories as bytes.
tempfile.mkdtemp(suffix=None, prefix=None, dir=None)[function] User-callable function to create and return a unique temporary\ndirectory.  The return value is the pathname of the directory.
tempfile.mkstemp(suffix=None, prefix=None, dir=None, text=False)[function] User-callable function to create and return a unique temporary\nfile.  The return value is a pair (fd, name) where fd is the\nfile descriptor returned by os.open, and name is the filename.
tempfile.mktemp(suffix='', prefix='tmp', dir=None)[function] User-callable function to return a unique temporary file name.  The\nfile is not created.
tempfile.tempdir
textwrap
textwrap.TextWrapper(width=70, initial_indent='', subsequent_indent='',\n  expand_tabs=True, replace_whitespace=True, fix_sentence_endings=False, break_long_words=True,\n  drop_whitespace=True, break_on_hyphens=True, tabsize=8, *, max_lines=None, placeholder=' [...]')[class] Object for wrapping/filling text.  The public interface consists of\nthe wrap() and fill() methods; the other methods are just there for\nsubclasses to override in order to tweak the default behaviour.\nIf you want to completely replace the main wrapping algorithm,\nyou'll probably have to override _wrap_chunks().
textwrap.dedent(text)[function] Remove any common leading whitespace from every line in `text`.
textwrap.fill(text, width=70, **kwargs)[function] Fill a single paragraph of text, returning a new string.
textwrap.indent(text, prefix, predicate=None)[function] Adds 'prefix' to the beginning of selected lines in 'text'.
textwrap.shorten(text, width, **kwargs)[function] Collapse and truncate the given text to fit in the given width.
textwrap.wrap(text, width=70, **kwargs)[function] Wrap a single paragraph of text, returning a list of wrapped lines.
threading
threading.Barrier(parties, action=None, timeout=None)[class] Implements a Barrier.
threading.BoundedSemaphore(value=1)[class] Implements a bounded semaphore.
threading.BrokenBarrierError()[class] Unspecified run-time error.
threading.Condition(lock=None)[class] Class that implements a condition variable.
threading.Event()[class] Class implementing event objects.
threading.ExceptHookArgs(iterable=﴾﴿, /)[class] ExceptHookArgs
threading.Lock()allocate_lock() -> lock object\n(allocate() is an obsolete synonym)
threading.RLock(*args, **kwargs)[function] Factory function that returns a new reentrant lock.
threading.Semaphore(value=1)[class] This class implements semaphore objects.
threading.TIMEOUT_MAX
threading.Thread(group=None, target=None, name=None, args=﴾﴿, kwargs=None, *,\n  daemon=None)[class] A class that represents a thread of control.
threading.ThreadError()[class] Unspecified run-time error.
threading.Timer(interval, function, args=None, kwargs=None)[class] Call a function after a specified number of seconds:
threading.active_count()[function] Return the number of Thread objects currently alive.
threading.current_thread()[function] Return the current Thread object, corresponding to the caller's thread of control.
threading.enumerate()[function] Return a list of all Thread objects currently alive.
threading.excepthook(args, /)excepthook(exc_type, exc_value, exc_traceback, thread)
threading.get_ident()get_ident() -> integer
threading.get_native_id()get_native_id() -> integer
threading.getprofile()[function] Get the profiler function as set by threading.setprofile().
threading.gettrace()[function] Get the trace function as set by threading.settrace().
threading.local()[class] Thread-local data
threading.main_thread()[function] Return the main thread object.
threading.setprofile(func)[function] Set a profile function for all threads started from the threading module.
threading.setprofile_all_threads(func)[function] Set a profile function for all threads started from the threading module\nand all Python threads that are currently executing.
threading.settrace(func)[function] Set a trace function for all threads started from the threading module.
threading.settrace_all_threads(func)[function] Set a trace function for all threads started from the threading module\nand all Python threads that are currently executing.
threading.stack_size([size])stack_size([size]) -> size
time
time.altzone
time.asctime([t])asctime([tuple]) -> string
time.ctime([secs])ctime(seconds) -> string
time.daylight
time.get_clock_info(name)get_clock_info(name: str) -> dict
time.gmtime([secs])gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,\n                       tm_sec, tm_wday, tm_yday, tm_isdst)
time.localtime([secs])localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,\n                          tm_sec,tm_wday,tm_yday,tm_isdst)
time.mktime(t)mktime(tuple) -> floating point number
time.monotonic()monotonic() -> float
time.monotonic_ns()monotonic_ns() -> int
time.perf_counter()perf_counter() -> float
time.perf_counter_ns()perf_counter_ns() -> int
time.process_time()process_time() -> float
time.process_time_ns()process_time() -> int
time.sleep(secs)sleep(seconds)
time.strftime(format[, t])strftime(format[, tuple]) -> string
time.strptime(string[, format])strptime(string, format) -> struct_time
time.struct_time(iterable=﴾﴿, /)[class] The time value as returned by gmtime(), localtime(), and strptime(), and\naccepted by asctime(), mktime() and strftime().  May be considered as a\nsequence of 9 integers.
time.thread_time()thread_time() -> float
time.thread_time_ns()thread_time() -> int
time.time()time() -> floating point number
time.time_ns()time_ns() -> int
time.timezone
time.tzname
timeit
timeit.Timer(stmt='pass', setup='pass', timer=<??>, globals=None)[class] Class for timing execution speed of small code snippets.
timeit.default_timer()perf_counter() -> float
timeit.repeat(stmt='pass', setup='pass', timer=<??>, repeat=5, number=1000000,\n  globals=None)[function] Convenience function to create Timer object and call repeat method.
timeit.timeit(stmt='pass', setup='pass', timer=<??>, number=1000000,\n  globals=None)[function] Convenience function to create Timer object and call timeit method.
tkinter
tkinter.ACTIVE
tkinter.ALL
tkinter.ANCHOR
tkinter.ARC
tkinter.BASELINE
tkinter.BEVEL
tkinter.BOTH
tkinter.BOTTOM
tkinter.BROWSE
tkinter.BUTT
tkinter.BaseWidget(master, widgetName, cnf={}, kw={}, extra=﴾﴿)[class] Internal class.
tkinter.BitmapImage(name=None, cnf={}, master=None, **kw)[class] Widget which can display images in XBM format.
tkinter.BooleanVar(master=None, value=None, name=None)[class] Value holder for boolean variables.
tkinter.Button(master=None, cnf={}, **kw)[class] Button widget.
tkinter.CASCADE
tkinter.CENTER
tkinter.CHAR
tkinter.CHECKBUTTON
tkinter.CHORD
tkinter.COMMAND
tkinter.CURRENT
tkinter.CallWrapper(func, subst, widget)[class] Internal class. Stores function to call when some user\ndefined Tcl function is called e.g. after an event occurred.
tkinter.Canvas(master=None, cnf={}, **kw)[class] Canvas widget to display graphical elements like lines or text.
tkinter.Checkbutton(master=None, cnf={}, **kw)[class] Checkbutton widget which is either in on- or off-state.
tkinter.DISABLED
tkinter.DOTBOX
tkinter.DoubleVar(master=None, value=None, name=None)[class] Value holder for float variables.
tkinter.E
tkinter.END
tkinter.EW
tkinter.EXCEPTION
tkinter.EXTENDED
tkinter.Entry(master=None, cnf={}, **kw)[class] Entry widget which allows displaying simple text.
tkinter.Event()[class] Container for the properties of an event.
tkinter.EventType(*values)[class] An enumeration.
tkinter.FALSE
tkinter.FIRST
tkinter.FLAT
tkinter.Frame(master=None, cnf={}, **kw)[class] Frame widget which may contain other widgets and can have a 3D border.
tkinter.GROOVE
tkinter.Grid()[class] Geometry manager Grid.
tkinter.HIDDEN
tkinter.HORIZONTAL
tkinter.INSERT
tkinter.INSIDE
tkinter.Image(imgtype, name=None, cnf={}, master=None, **kw)[class] Base class for images.
tkinter.IntVar(master=None, value=None, name=None)[class] Value holder for integer variables.
tkinter.LAST
tkinter.LEFT
tkinter.Label(master=None, cnf={}, **kw)[class] Label widget which can display text and bitmaps.
tkinter.LabelFrame(master=None, cnf={}, **kw)[class] labelframe widget.
tkinter.Listbox(master=None, cnf={}, **kw)[class] Listbox widget which can display a list of strings.
tkinter.MITER
tkinter.MOVETO
tkinter.MULTIPLE
tkinter.Menu(master=None, cnf={}, **kw)[class] Menu widget which allows displaying menu bars, pull-down menus and pop-up menus.
tkinter.Menubutton(master=None, cnf={}, **kw)[class] Menubutton widget, obsolete since Tk8.0.
tkinter.Message(master=None, cnf={}, **kw)[class] Message widget to display multiline text. Obsolete since Label does it too.
tkinter.Misc()[class] Internal class.
tkinter.N
tkinter.NE
tkinter.NO
tkinter.NONE
tkinter.NORMAL
tkinter.NS
tkinter.NSEW
tkinter.NUMERIC
tkinter.NW
tkinter.NoDefaultRoot()[function] Inhibit setting of default root window.
tkinter.OFF
tkinter.ON
tkinter.OUTSIDE
tkinter.OptionMenu(master, variable, value, *values, **kwargs)[class] OptionMenu which allows the user to select a value from a menu.
tkinter.PAGES
tkinter.PIESLICE
tkinter.PROJECTING
tkinter.Pack()[class] Geometry manager Pack.
tkinter.PanedWindow(master=None, cnf={}, **kw)[class] panedwindow widget.
tkinter.PhotoImage(name=None, cnf={}, master=None, **kw)[class] Widget which can display images in PGM, PPM, GIF, PNG format.
tkinter.Place()[class] Geometry manager Place.
tkinter.RADIOBUTTON
tkinter.RAISED
tkinter.READABLE
tkinter.RIDGE
tkinter.RIGHT
tkinter.ROUND
tkinter.Radiobutton(master=None, cnf={}, **kw)[class] Radiobutton widget which shows only one of several buttons in on-state.
tkinter.S
tkinter.SCROLL
tkinter.SE
tkinter.SEL
tkinter.SEL_FIRST
tkinter.SEL_LAST
tkinter.SEPARATOR
tkinter.SINGLE
tkinter.SOLID
tkinter.SUNKEN
tkinter.SW
tkinter.Scale(master=None, cnf={}, **kw)[class] Scale widget which can display a numerical scale.
tkinter.Scrollbar(master=None, cnf={}, **kw)[class] Scrollbar widget which displays a slider at a certain position.
tkinter.Spinbox(master=None, cnf={}, **kw)[class] spinbox widget.
tkinter.StringVar(master=None, value=None, name=None)[class] Value holder for strings variables.
tkinter.TOP
tkinter.TRUE
tkinter.Tcl(screenName=None, baseName=None, className='Tk', useTk=False)[function]
tkinter.TclError()[class] Common base class for all non-exit exceptions.
tkinter.TclVersion
tkinter.Text(master=None, cnf={}, **kw)[class] Text widget which can display text in various forms.
tkinter.Tk(screenName=None, baseName=None, className='Tk', useTk=True,\n  sync=False, use=None)[class] Toplevel widget of Tk which represents mostly the main window\nof an application. It has an associated Tcl interpreter.
tkinter.TkVersion
tkinter.Toplevel(master=None, cnf={}, **kw)[class] Toplevel widget, e.g. for dialogs.
tkinter.UNDERLINE
tkinter.UNITS
tkinter.VERTICAL
tkinter.Variable(master=None, value=None, name=None)[class] Class to define value holders for e.g. buttons.
tkinter.W
tkinter.WORD
tkinter.WRITABLE
tkinter.Widget(master, widgetName, cnf={}, kw={}, extra=﴾﴿)[class] Internal class.
tkinter.Wm()[class] Provides functions for the communication with the window manager.
tkinter.X
tkinter.XView()[class] Mix-in class for querying and changing the horizontal position\nof a widget's window.
tkinter.Y
tkinter.YES
tkinter.YView()[class] Mix-in class for querying and changing the vertical position\nof a widget's window.
tkinter.colorchooser
tkinter.colorchooser.Chooser(master=None, **options)[class] Create a dialog for the tk_chooseColor command.
tkinter.colorchooser.askcolor(color=None, **options)[function] Display dialog window for selection of a color.
tkinter.commondialog
tkinter.commondialog.Dialog(master=None, **options)[class]
tkinter.constants
tkinter.constants.ACTIVE
tkinter.constants.ALL
tkinter.constants.ANCHOR
tkinter.constants.ARC
tkinter.constants.BASELINE
tkinter.constants.BEVEL
tkinter.constants.BOTH
tkinter.constants.BOTTOM
tkinter.constants.BROWSE
tkinter.constants.BUTT
tkinter.constants.CASCADE
tkinter.constants.CENTER
tkinter.constants.CHAR
tkinter.constants.CHECKBUTTON
tkinter.constants.CHORD
tkinter.constants.COMMAND
tkinter.constants.CURRENT
tkinter.constants.DISABLED
tkinter.constants.DOTBOX
tkinter.constants.E
tkinter.constants.END
tkinter.constants.EW
tkinter.constants.EXTENDED
tkinter.constants.FALSE
tkinter.constants.FIRST
tkinter.constants.FLAT
tkinter.constants.GROOVE
tkinter.constants.HIDDEN
tkinter.constants.HORIZONTAL
tkinter.constants.INSERT
tkinter.constants.INSIDE
tkinter.constants.LAST
tkinter.constants.LEFT
tkinter.constants.MITER
tkinter.constants.MOVETO
tkinter.constants.MULTIPLE
tkinter.constants.N
tkinter.constants.NE
tkinter.constants.NO
tkinter.constants.NONE
tkinter.constants.NORMAL
tkinter.constants.NS
tkinter.constants.NSEW
tkinter.constants.NUMERIC
tkinter.constants.NW
tkinter.constants.OFF
tkinter.constants.ON
tkinter.constants.OUTSIDE
tkinter.constants.PAGES
tkinter.constants.PIESLICE
tkinter.constants.PROJECTING
tkinter.constants.RADIOBUTTON
tkinter.constants.RAISED
tkinter.constants.RIDGE
tkinter.constants.RIGHT
tkinter.constants.ROUND
tkinter.constants.S
tkinter.constants.SCROLL
tkinter.constants.SE
tkinter.constants.SEL
tkinter.constants.SEL_FIRST
tkinter.constants.SEL_LAST
tkinter.constants.SEPARATOR
tkinter.constants.SINGLE
tkinter.constants.SOLID
tkinter.constants.SUNKEN
tkinter.constants.SW
tkinter.constants.TOP
tkinter.constants.TRUE
tkinter.constants.UNDERLINE
tkinter.constants.UNITS
tkinter.constants.VERTICAL
tkinter.constants.W
tkinter.constants.WORD
tkinter.constants.X
tkinter.constants.Y
tkinter.constants.YES
tkinter.dialog
tkinter.dialog.Dialog(master=None, cnf={}, **kw)[class] Internal class.
tkinter.dnd
tkinter.dnd.DndHandler(source, event)[class]
tkinter.dnd.dnd_start(source, event)[function]
tkinter.filedialog
tkinter.filedialog.Directory(master=None, **options)[class] Ask for a directory
tkinter.filedialog.FileDialog(master, title=None)[class] Standard file selection dialog -- no checks on selected file.
tkinter.filedialog.LoadFileDialog(master, title=None)[class] File selection dialog which checks that the file exists.
tkinter.filedialog.Open(master=None, **options)[class] Ask for a filename to open
tkinter.filedialog.SaveAs(master=None, **options)[class] Ask for a filename to save as
tkinter.filedialog.SaveFileDialog(master, title=None)[class] File selection dialog which checks that the file may be created.
tkinter.filedialog.askdirectory(**options)[function] Ask for a directory, and return the file name
tkinter.filedialog.askopenfile(mode='r', **options)[function] Ask for a filename to open, and returned the opened file
tkinter.filedialog.askopenfilename(**options)[function] Ask for a filename to open
tkinter.filedialog.askopenfilenames(**options)[function] Ask for multiple filenames to open
tkinter.filedialog.askopenfiles(mode='r', **options)[function] Ask for multiple filenames and return the open file\nobjects
tkinter.filedialog.asksaveasfile(mode='w', **options)[function] Ask for a filename to save as, and returned the opened file
tkinter.filedialog.asksaveasfilename(**options)[function] Ask for a filename to save as
tkinter.font
tkinter.font.BOLD
tkinter.font.Font(root=None, font=None, name=None, exists=False, **options)[class] Represents a named font.
tkinter.font.ITALIC
tkinter.font.NORMAL
tkinter.font.ROMAN
tkinter.font.families(root=None, displayof=None)[function] Get font families (as a tuple)
tkinter.font.names(root=None)[function] Get names of defined fonts (as a tuple)
tkinter.font.nametofont(name, root=None)[function] Given the name of a tk named font, returns a Font representation.
tkinter.getboolean(s)[function] Convert Tcl object to True or False.
tkinter.getdouble(x=0, /)[class] Convert a string or number to a floating point number, if possible.
tkinter.getint([x])[class] int([x]) -> integer\nint(x, base=10) -> integer
tkinter.getint(x, base=10)[class] int([x]) -> integer\nint(x, base=10) -> integer
tkinter.image_names()[function]
tkinter.image_types()[function]
tkinter.mainloop(n=0)[function] Run the main loop of Tcl.
tkinter.messagebox
tkinter.messagebox.askokcancel(title=None, message=None, **options)[function] Ask if operation should proceed; return true if the answer is ok
tkinter.messagebox.askquestion(title=None, message=None, **options)[function] Ask a question
tkinter.messagebox.askretrycancel(title=None, message=None, **options)[function] Ask if operation should be retried; return true if the answer is yes
tkinter.messagebox.askyesno(title=None, message=None, **options)[function] Ask a question; return true if the answer is yes
tkinter.messagebox.askyesnocancel(title=None, message=None, **options)[function] Ask a question; return true if the answer is yes, None if cancelled.
tkinter.messagebox.showerror(title=None, message=None, **options)[function] Show an error message
tkinter.messagebox.showinfo(title=None, message=None, **options)[function] Show an info message
tkinter.messagebox.showwarning(title=None, message=None, **options)[function] Show a warning message
tkinter.scrolledtext
tkinter.scrolledtext.ScrolledText(master=None, **kw)[class] Text widget which can display text in various forms.
tkinter.simpledialog
tkinter.simpledialog.ACTIVE
tkinter.simpledialog.ALL
tkinter.simpledialog.ANCHOR
tkinter.simpledialog.ARC
tkinter.simpledialog.BASELINE
tkinter.simpledialog.BEVEL
tkinter.simpledialog.BOTH
tkinter.simpledialog.BOTTOM
tkinter.simpledialog.BROWSE
tkinter.simpledialog.BUTT
tkinter.simpledialog.BaseWidget(master, widgetName, cnf={}, kw={}, extra=﴾﴿)[class] Internal class.
tkinter.simpledialog.BitmapImage(name=None, cnf={}, master=None, **kw)[class] Widget which can display images in XBM format.
tkinter.simpledialog.BooleanVar(master=None, value=None, name=None)[class] Value holder for boolean variables.
tkinter.simpledialog.Button(master=None, cnf={}, **kw)[class] Button widget.
tkinter.simpledialog.CASCADE
tkinter.simpledialog.CENTER
tkinter.simpledialog.CHAR
tkinter.simpledialog.CHECKBUTTON
tkinter.simpledialog.CHORD
tkinter.simpledialog.COMMAND
tkinter.simpledialog.CURRENT
tkinter.simpledialog.CallWrapper(func, subst, widget)[class] Internal class. Stores function to call when some user\ndefined Tcl function is called e.g. after an event occurred.
tkinter.simpledialog.Canvas(master=None, cnf={}, **kw)[class] Canvas widget to display graphical elements like lines or text.
tkinter.simpledialog.Checkbutton(master=None, cnf={}, **kw)[class] Checkbutton widget which is either in on- or off-state.
tkinter.simpledialog.DISABLED
tkinter.simpledialog.DOTBOX
tkinter.simpledialog.Dialog(parent, title=None)[class] Class to open dialogs.
tkinter.simpledialog.DoubleVar(master=None, value=None, name=None)[class] Value holder for float variables.
tkinter.simpledialog.E
tkinter.simpledialog.END
tkinter.simpledialog.EW
tkinter.simpledialog.EXCEPTION
tkinter.simpledialog.EXTENDED
tkinter.simpledialog.Entry(master=None, cnf={}, **kw)[class] Entry widget which allows displaying simple text.
tkinter.simpledialog.Event()[class] Container for the properties of an event.
tkinter.simpledialog.EventType(*values)[class] An enumeration.
tkinter.simpledialog.FALSE
tkinter.simpledialog.FIRST
tkinter.simpledialog.FLAT
tkinter.simpledialog.Frame(master=None, cnf={}, **kw)[class] Frame widget which may contain other widgets and can have a 3D border.
tkinter.simpledialog.GROOVE
tkinter.simpledialog.Grid()[class] Geometry manager Grid.
tkinter.simpledialog.HIDDEN
tkinter.simpledialog.HORIZONTAL
tkinter.simpledialog.INSERT
tkinter.simpledialog.INSIDE
tkinter.simpledialog.Image(imgtype, name=None, cnf={}, master=None, **kw)[class] Base class for images.
tkinter.simpledialog.IntVar(master=None, value=None, name=None)[class] Value holder for integer variables.
tkinter.simpledialog.LAST
tkinter.simpledialog.LEFT
tkinter.simpledialog.Label(master=None, cnf={}, **kw)[class] Label widget which can display text and bitmaps.
tkinter.simpledialog.LabelFrame(master=None, cnf={}, **kw)[class] labelframe widget.
tkinter.simpledialog.Listbox(master=None, cnf={}, **kw)[class] Listbox widget which can display a list of strings.
tkinter.simpledialog.MITER
tkinter.simpledialog.MOVETO
tkinter.simpledialog.MULTIPLE
tkinter.simpledialog.Menu(master=None, cnf={}, **kw)[class] Menu widget which allows displaying menu bars, pull-down menus and pop-up menus.
tkinter.simpledialog.Menubutton(master=None, cnf={}, **kw)[class] Menubutton widget, obsolete since Tk8.0.
tkinter.simpledialog.Message(master=None, cnf={}, **kw)[class] Message widget to display multiline text. Obsolete since Label does it too.
tkinter.simpledialog.Misc()[class] Internal class.
tkinter.simpledialog.N
tkinter.simpledialog.NE
tkinter.simpledialog.NO
tkinter.simpledialog.NONE
tkinter.simpledialog.NORMAL
tkinter.simpledialog.NS
tkinter.simpledialog.NSEW
tkinter.simpledialog.NUMERIC
tkinter.simpledialog.NW
tkinter.simpledialog.NoDefaultRoot()[function] Inhibit setting of default root window.
tkinter.simpledialog.OFF
tkinter.simpledialog.ON
tkinter.simpledialog.OUTSIDE
tkinter.simpledialog.OptionMenu(master, variable, value, *values, **kwargs)[class] OptionMenu which allows the user to select a value from a menu.
tkinter.simpledialog.PAGES
tkinter.simpledialog.PIESLICE
tkinter.simpledialog.PROJECTING
tkinter.simpledialog.Pack()[class] Geometry manager Pack.
tkinter.simpledialog.PanedWindow(master=None, cnf={}, **kw)[class] panedwindow widget.
tkinter.simpledialog.PhotoImage(name=None, cnf={}, master=None, **kw)[class] Widget which can display images in PGM, PPM, GIF, PNG format.
tkinter.simpledialog.Place()[class] Geometry manager Place.
tkinter.simpledialog.RADIOBUTTON
tkinter.simpledialog.RAISED
tkinter.simpledialog.READABLE
tkinter.simpledialog.RIDGE
tkinter.simpledialog.RIGHT
tkinter.simpledialog.ROUND
tkinter.simpledialog.Radiobutton(master=None, cnf={}, **kw)[class] Radiobutton widget which shows only one of several buttons in on-state.
tkinter.simpledialog.S
tkinter.simpledialog.SCROLL
tkinter.simpledialog.SE
tkinter.simpledialog.SEL
tkinter.simpledialog.SEL_FIRST
tkinter.simpledialog.SEL_LAST
tkinter.simpledialog.SEPARATOR
tkinter.simpledialog.SINGLE
tkinter.simpledialog.SOLID
tkinter.simpledialog.SUNKEN
tkinter.simpledialog.SW
tkinter.simpledialog.Scale(master=None, cnf={}, **kw)[class] Scale widget which can display a numerical scale.
tkinter.simpledialog.Scrollbar(master=None, cnf={}, **kw)[class] Scrollbar widget which displays a slider at a certain position.
tkinter.simpledialog.SimpleDialog(master, text='', buttons=[], default=None,\n  cancel=None, title=None, class_=None)[class]
tkinter.simpledialog.Spinbox(master=None, cnf={}, **kw)[class] spinbox widget.
tkinter.simpledialog.StringVar(master=None, value=None, name=None)[class] Value holder for strings variables.
tkinter.simpledialog.TOP
tkinter.simpledialog.TRUE
tkinter.simpledialog.Tcl(screenName=None, baseName=None, className='Tk',\n  useTk=False)[function]
tkinter.simpledialog.TclError()[class] Common base class for all non-exit exceptions.
tkinter.simpledialog.TclVersion
tkinter.simpledialog.Text(master=None, cnf={}, **kw)[class] Text widget which can display text in various forms.
tkinter.simpledialog.Tk(screenName=None, baseName=None, className='Tk',\n  useTk=True, sync=False, use=None)[class] Toplevel widget of Tk which represents mostly the main window\nof an application. It has an associated Tcl interpreter.
tkinter.simpledialog.TkVersion
tkinter.simpledialog.Toplevel(master=None, cnf={}, **kw)[class] Toplevel widget, e.g. for dialogs.
tkinter.simpledialog.UNDERLINE
tkinter.simpledialog.UNITS
tkinter.simpledialog.VERTICAL
tkinter.simpledialog.Variable(master=None, value=None, name=None)[class] Class to define value holders for e.g. buttons.
tkinter.simpledialog.W
tkinter.simpledialog.WORD
tkinter.simpledialog.WRITABLE
tkinter.simpledialog.Widget(master, widgetName, cnf={}, kw={}, extra=﴾﴿)[class] Internal class.
tkinter.simpledialog.Wm()[class] Provides functions for the communication with the window manager.
tkinter.simpledialog.X
tkinter.simpledialog.XView()[class] Mix-in class for querying and changing the horizontal position\nof a widget's window.
tkinter.simpledialog.Y
tkinter.simpledialog.YES
tkinter.simpledialog.YView()[class] Mix-in class for querying and changing the vertical position\nof a widget's window.
tkinter.simpledialog._QueryDialog(title, prompt, initialvalue=None,\n  minvalue=None, maxvalue=None, parent=None)[class] Class to open dialogs.
tkinter.simpledialog._QueryFloat(title, prompt, initialvalue=None,\n  minvalue=None, maxvalue=None, parent=None)[class] Class to open dialogs.
tkinter.simpledialog._QueryInteger(title, prompt, initialvalue=None,\n  minvalue=None, maxvalue=None, parent=None)[class] Class to open dialogs.
tkinter.simpledialog._QueryString(*args, **kw)[class] Class to open dialogs.
tkinter.simpledialog._destroy_temp_root(master)[function]
tkinter.simpledialog._get_temp_root()[function]
tkinter.simpledialog._place_window(w, parent=None)[function]
tkinter.simpledialog._setup_dialog(w)[function]
tkinter.simpledialog.askfloat(title, prompt, **kw)[function] get a float from the user
tkinter.simpledialog.askinteger(title, prompt, **kw)[function] get an integer from the user
tkinter.simpledialog.askstring(title, prompt, **kw)[function] get a string from the user
tkinter.simpledialog.getboolean(s)[function] Convert Tcl object to True or False.
tkinter.simpledialog.getdouble(x=0, /)[class] Convert a string or number to a floating point number, if possible.
tkinter.simpledialog.getint([x])[class] int([x]) -> integer\nint(x, base=10) -> integer
tkinter.simpledialog.getint(x, base=10)[class] int([x]) -> integer\nint(x, base=10) -> integer
tkinter.simpledialog.image_names()[function]
tkinter.simpledialog.image_types()[function]
tkinter.simpledialog.mainloop(n=0)[function] Run the main loop of Tcl.
tkinter.tix
tkinter.tix.ACROSSTOP
tkinter.tix.ACTIVE
tkinter.tix.ALL
tkinter.tix.ANCHOR
tkinter.tix.ARC
tkinter.tix.ASCII
tkinter.tix.AUTO
tkinter.tix.BALLOON
tkinter.tix.BASELINE
tkinter.tix.BEVEL
tkinter.tix.BOTH
tkinter.tix.BOTTOM
tkinter.tix.BROWSE
tkinter.tix.BUTT
tkinter.tix.Balloon(master=None, cnf={}, **kw)[class] Balloon help widget.
tkinter.tix.BaseWidget(master, widgetName, cnf={}, kw={}, extra=﴾﴿)[class] Internal class.
tkinter.tix.BitmapImage(name=None, cnf={}, master=None, **kw)[class] Widget which can display images in XBM format.
tkinter.tix.BooleanVar(master=None, value=None, name=None)[class] Value holder for boolean variables.
tkinter.tix.Button(master=None, cnf={}, **kw)[class] Button widget.
tkinter.tix.ButtonBox(master=None, cnf={}, **kw)[class] ButtonBox - A container for pushbuttons.\nSubwidgets are the buttons added with the add method.
tkinter.tix.CASCADE
tkinter.tix.CELL
tkinter.tix.CENTER
tkinter.tix.CHAR
tkinter.tix.CHECKBUTTON
tkinter.tix.CHORD
tkinter.tix.COLUMN
tkinter.tix.COMMAND
tkinter.tix.CObjView(master=None, widgetName=None, static_options=None, cnf={},\n  kw={})[class] This file implements the Canvas Object View widget. This is a base\nclass of IconView. It implements automatic placement/adjustment of the\nscrollbars according to the canvas objects inside the canvas subwidget.\nThe scrollbars are adjusted so that the canvas is just large enough\nto see all the objects.
tkinter.tix.CURRENT
tkinter.tix.CallWrapper(func, subst, widget)[class] Internal class. Stores function to call when some user\ndefined Tcl function is called e.g. after an event occurred.
tkinter.tix.Canvas(master=None, cnf={}, **kw)[class] Canvas widget to display graphical elements like lines or text.
tkinter.tix.CheckList(master=None, cnf={}, **kw)[class] The CheckList widget\ndisplays a list of items to be selected by the user. CheckList acts\nsimilarly to the Tk checkbutton or radiobutton widgets, except it is\ncapable of handling many more items than checkbuttons or radiobuttons.
tkinter.tix.Checkbutton(master=None, cnf={}, **kw)[class] Checkbutton widget which is either in on- or off-state.
tkinter.tix.ComboBox(master=None, cnf={}, **kw)[class] ComboBox - an Entry field with a dropdown menu. The user can select a\nchoice by either typing in the entry subwidget or selecting from the\nlistbox subwidget.
tkinter.tix.Control(master=None, cnf={}, **kw)[class] Control - An entry field with value change arrows.  The user can\nadjust the value by pressing the two arrow buttons or by entering\nthe value directly into the entry. The new value will be checked\nagainst the user-defined upper and lower limits.
tkinter.tix.DECREASING
tkinter.tix.DISABLED
tkinter.tix.DOTBOX
tkinter.tix.DialogShell(master=None, cnf={}, **kw)[class] Toplevel window, with popup popdown and center methods.\nIt tells the window manager that it is a dialog window and should be\ntreated specially. The exact treatment depends on the treatment of\nthe window manager.
tkinter.tix.DirList(master, cnf={}, **kw)[class] DirList - displays a list view of a directory, its previous\ndirectories and its sub-directories. The user can choose one of\nthe directories displayed in the list or change to another directory.
tkinter.tix.DirSelectBox(master, cnf={}, **kw)[class] DirSelectBox - Motif style file select box.\nIt is generally used for\nthe user to choose a file. FileSelectBox stores the files mostly\nrecently selected into a ComboBox widget so that they can be quickly\nselected again.
tkinter.tix.DirSelectDialog(master, cnf={}, **kw)[class] The DirSelectDialog widget presents the directories in the file\nsystem in a dialog window. The user can use this dialog window to\nnavigate through the file system to select the desired directory.
tkinter.tix.DirTree(master, cnf={}, **kw)[class] DirTree - Directory Listing in a hierarchical view.\nDisplays a tree view of a directory, its previous directories and its\nsub-directories. The user can choose one of the directories displayed\nin the list or change to another directory.
tkinter.tix.DisplayStyle(itemtype, cnf={}, *, master=None, **kw)[class] DisplayStyle - handle configuration options shared by\n(multiple) Display Items
tkinter.tix.DoubleVar(master=None, value=None, name=None)[class] Value holder for float variables.
tkinter.tix.E
tkinter.tix.END
tkinter.tix.EW
tkinter.tix.EXCEPTION
tkinter.tix.EXTENDED
tkinter.tix.Entry(master=None, cnf={}, **kw)[class] Entry widget which allows displaying simple text.
tkinter.tix.Event()[class] Container for the properties of an event.
tkinter.tix.EventType(*values)[class] An enumeration.
tkinter.tix.ExFileSelectBox(master, cnf={}, **kw)[class] ExFileSelectBox - MS Windows style file select box.\nIt provides a convenient method for the user to select files.
tkinter.tix.ExFileSelectDialog(master, cnf={}, **kw)[class] ExFileSelectDialog - MS Windows style file select dialog.\nIt provides a convenient method for the user to select files.
tkinter.tix.FALSE
tkinter.tix.FIRST
tkinter.tix.FLAT
tkinter.tix.FileEntry(master, cnf={}, **kw)[class] FileEntry - Entry field with button that invokes a FileSelectDialog.\nThe user can type in the filename manually. Alternatively, the user can\npress the button widget that sits next to the entry, which will bring\nup a file selection dialog.
tkinter.tix.FileSelectBox(master, cnf={}, **kw)[class] ExFileSelectBox - Motif style file select box.\nIt is generally used for\nthe user to choose a file. FileSelectBox stores the files mostly\nrecently selected into a ComboBox widget so that they can be quickly\nselected again.
tkinter.tix.FileSelectDialog(master, cnf={}, **kw)[class] FileSelectDialog - Motif style file select dialog.
tkinter.tix.FileTypeList(dict)[function]
tkinter.tix.Form()[class] The Tix Form geometry manager
tkinter.tix.Frame(master=None, cnf={}, **kw)[class] Frame widget which may contain other widgets and can have a 3D border.
tkinter.tix.GROOVE
tkinter.tix.Grid(master=None, cnf={}, **kw)[class] The Tix Grid command creates a new window  and makes it into a\ntixGrid widget. Additional options, may be specified on the command\nline or in the option database to configure aspects such as its cursor\nand relief.
tkinter.tix.HIDDEN
tkinter.tix.HList(master=None, cnf={}, **kw)[class] HList - Hierarchy display  widget can be used to display any data\nthat have a hierarchical structure, for example, file system directory\ntrees. The list entries are indented and connected by branch lines\naccording to their places in the hierarchy.
tkinter.tix.HORIZONTAL
tkinter.tix.IMAGE
tkinter.tix.IMAGETEXT
tkinter.tix.IMMEDIATE
tkinter.tix.INCREASING
tkinter.tix.INSERT
tkinter.tix.INSIDE
tkinter.tix.INTEGER
tkinter.tix.Image(imgtype, name=None, cnf={}, master=None, **kw)[class] Base class for images.
tkinter.tix.InputOnly(master=None, cnf={}, **kw)[class] InputOnly - Invisible widget. Unix only.
tkinter.tix.IntVar(master=None, value=None, name=None)[class] Value holder for integer variables.
tkinter.tix.LAST
tkinter.tix.LEFT
tkinter.tix.Label(master=None, cnf={}, **kw)[class] Label widget which can display text and bitmaps.
tkinter.tix.LabelEntry(master=None, cnf={}, **kw)[class] LabelEntry - Entry field with label. Packages an entry widget\nand a label into one mega widget. It can be used to simplify the creation\nof ``entry-form'' type of interface.
tkinter.tix.LabelFrame(master=None, cnf={}, **kw)[class] LabelFrame - Labelled Frame container. Packages a frame widget\nand a label into one mega widget. To create widgets inside a\nLabelFrame widget, one creates the new widgets relative to the\nframe subwidget and manage them inside the frame subwidget.
tkinter.tix.ListNoteBook(master, cnf={}, **kw)[class] A ListNoteBook widget is very similar to the TixNoteBook widget:\nit can be used to display many windows in a limited space using a\nnotebook metaphor. The notebook is divided into a stack of pages\n(windows). At one time only one of these pages can be shown.\nThe user can navigate through these pages by\nchoosing the name of the desired page in the hlist subwidget.
tkinter.tix.Listbox(master=None, cnf={}, **kw)[class] Listbox widget which can display a list of strings.
tkinter.tix.MAIN
tkinter.tix.MAX
tkinter.tix.MITER
tkinter.tix.MOVETO
tkinter.tix.MULTIPLE
tkinter.tix.Menu(master=None, cnf={}, **kw)[class] Menu widget which allows displaying menu bars, pull-down menus and pop-up menus.
tkinter.tix.Menubutton(master=None, cnf={}, **kw)[class] Menubutton widget, obsolete since Tk8.0.
tkinter.tix.Message(master=None, cnf={}, **kw)[class] Message widget to display multiline text. Obsolete since Label does it too.
tkinter.tix.Meter(master=None, cnf={}, **kw)[class] The Meter widget can be used to show the progress of a background\njob which may take a long time to execute.
tkinter.tix.Misc()[class] Internal class.
tkinter.tix.N
tkinter.tix.NE
tkinter.tix.NO
tkinter.tix.NONE
tkinter.tix.NORMAL
tkinter.tix.NS
tkinter.tix.NSEW
tkinter.tix.NUMERIC
tkinter.tix.NW
tkinter.tix.NoDefaultRoot()[function] Inhibit setting of default root window.
tkinter.tix.NoteBook(master=None, cnf={}, **kw)[class] NoteBook - Multi-page container widget (tabbed notebook metaphor).
tkinter.tix.NoteBookFrame(master=None, widgetName=None, static_options=None,\n  cnf={}, kw={})[class] A TixWidget class is used to package all (or most) Tix widgets.
tkinter.tix.OFF
tkinter.tix.ON
tkinter.tix.OUTSIDE
tkinter.tix.OptionMenu(master, cnf={}, **kw)[class] OptionMenu - creates a menu button of options.
tkinter.tix.OptionName(widget)[function] Returns the qualified path name for the widget. Normally used to set\ndefault options for subwidgets. See tixwidgets.py
tkinter.tix.PAGES
tkinter.tix.PIESLICE
tkinter.tix.PROJECTING
tkinter.tix.Pack()[class] Geometry manager Pack.
tkinter.tix.PanedWindow(master, cnf={}, **kw)[class] PanedWindow - Multi-pane container widget\nallows the user to interactively manipulate the sizes of several\npanes. The panes can be arranged either vertically or horizontally.The\nuser changes the sizes of the panes by dragging the resize handle\nbetween two panes.
tkinter.tix.PhotoImage(name=None, cnf={}, master=None, **kw)[class] Widget which can display images in PGM, PPM, GIF, PNG format.
tkinter.tix.Place()[class] Geometry manager Place.
tkinter.tix.PopupMenu(master, cnf={}, **kw)[class] PopupMenu widget can be used as a replacement of the tk_popup command.\nThe advantage of the Tix PopupMenu widget is it requires less application\ncode to manipulate.
tkinter.tix.RADIOBUTTON
tkinter.tix.RAISED
tkinter.tix.READABLE
tkinter.tix.REAL
tkinter.tix.RIDGE
tkinter.tix.RIGHT
tkinter.tix.ROUND
tkinter.tix.ROW
tkinter.tix.Radiobutton(master=None, cnf={}, **kw)[class] Radiobutton widget which shows only one of several buttons in on-state.
tkinter.tix.ResizeHandle(master, cnf={}, **kw)[class] Internal widget to draw resize handles on Scrolled widgets.
tkinter.tix.S
tkinter.tix.SCROLL
tkinter.tix.SE
tkinter.tix.SEL
tkinter.tix.SEL_FIRST
tkinter.tix.SEL_LAST
tkinter.tix.SEPARATOR
tkinter.tix.SINGLE
tkinter.tix.SOLID
tkinter.tix.STATUS
tkinter.tix.SUNKEN
tkinter.tix.SW
tkinter.tix.S_REGION
tkinter.tix.Scale(master=None, cnf={}, **kw)[class] Scale widget which can display a numerical scale.
tkinter.tix.Scrollbar(master=None, cnf={}, **kw)[class] Scrollbar widget which displays a slider at a certain position.
tkinter.tix.ScrolledGrid(master=None, cnf={}, **kw)[class] Scrolled Grid widgets
tkinter.tix.ScrolledHList(master, cnf={}, **kw)[class] ScrolledHList - HList with automatic scrollbars.
tkinter.tix.ScrolledListBox(master, cnf={}, **kw)[class] ScrolledListBox - Listbox with automatic scrollbars.
tkinter.tix.ScrolledTList(master, cnf={}, **kw)[class] ScrolledTList - TList with automatic scrollbars.
tkinter.tix.ScrolledText(master, cnf={}, **kw)[class] ScrolledText - Text with automatic scrollbars.
tkinter.tix.ScrolledWindow(master, cnf={}, **kw)[class] ScrolledWindow - Window with automatic scrollbars.
tkinter.tix.Select(master, cnf={}, **kw)[class] Select - Container of button subwidgets. It can be used to provide\nradio-box or check-box style of selection options for the user.
tkinter.tix.Shell(master=None, cnf={}, **kw)[class] Toplevel window.
tkinter.tix.Spinbox(master=None, cnf={}, **kw)[class] spinbox widget.
tkinter.tix.StdButtonBox(master=None, cnf={}, **kw)[class] StdButtonBox - Standard Button Box (OK, Apply, Cancel and Help)
tkinter.tix.StringVar(master=None, value=None, name=None)[class] Value holder for strings variables.
tkinter.tix.TCL_ALL_EVENTS
tkinter.tix.TCL_DONT_WAIT
tkinter.tix.TCL_FILE_EVENTS
tkinter.tix.TCL_IDLE_EVENTS
tkinter.tix.TCL_TIMER_EVENTS
tkinter.tix.TCL_WINDOW_EVENTS
tkinter.tix.TEXT
tkinter.tix.TList(master=None, cnf={}, **kw)[class] TList - Hierarchy display widget which can be\nused to display data in a tabular format. The list entries of a TList\nwidget are similar to the entries in the Tk listbox widget. The main\ndifferences are (1) the TList widget can display the list entries in a\ntwo dimensional format and (2) you can use graphical images as well as\nmultiple colors and fonts for the list entries.
tkinter.tix.TOP
tkinter.tix.TRUE
tkinter.tix.Tcl(screenName=None, baseName=None, className='Tk', useTk=False)[function]
tkinter.tix.TclError()[class] Common base class for all non-exit exceptions.
tkinter.tix.TclVersion
tkinter.tix.Text(master=None, cnf={}, **kw)[class] Text widget which can display text in various forms.
tkinter.tix.TixSubWidget(master, name, destroy_physically=1,\n  check_intermediate=1)[class] Subwidget class.
tkinter.tix.TixWidget(master=None, widgetName=None, static_options=None,\n  cnf={}, kw={})[class] A TixWidget class is used to package all (or most) Tix widgets.
tkinter.tix.Tk(screenName=None, baseName=None, className='Tix')[class] Toplevel widget of Tix which represents mostly the main window\nof an application. It has an associated Tcl interpreter.
tkinter.tix.TkVersion
tkinter.tix.Toplevel(master=None, cnf={}, **kw)[class] Toplevel widget, e.g. for dialogs.
tkinter.tix.Tree(master=None, cnf={}, **kw)[class] Tree - The tixTree widget can be used to display hierarchical\ndata in a tree form. The user can adjust\nthe view of the tree by opening or closing parts of the tree.
tkinter.tix.UNDERLINE
tkinter.tix.UNITS
tkinter.tix.VERTICAL
tkinter.tix.Variable(master=None, value=None, name=None)[class] Class to define value holders for e.g. buttons.
tkinter.tix.W
tkinter.tix.WINDOW
tkinter.tix.WORD
tkinter.tix.WRITABLE
tkinter.tix.Widget(master, widgetName, cnf={}, kw={}, extra=﴾﴿)[class] Internal class.
tkinter.tix.Wm()[class] Provides functions for the communication with the window manager.
tkinter.tix.X
tkinter.tix.XView()[class] Mix-in class for querying and changing the horizontal position\nof a widget's window.
tkinter.tix.X_REGION
tkinter.tix.Y
tkinter.tix.YES
tkinter.tix.YView()[class] Mix-in class for querying and changing the vertical position\nof a widget's window.
tkinter.tix.Y_REGION
tkinter.tix._cnfmerge(cnfs)[function] Internal function.
tkinter.tix._dummyButton(master, name, destroy_physically=1)[class] Button widget.
tkinter.tix._dummyCheckbutton(master, name, destroy_physically=1)[class] Checkbutton widget which is either in on- or off-state.
tkinter.tix._dummyComboBox(master, name, destroy_physically=1)[class] ComboBox - an Entry field with a dropdown menu. The user can select a\nchoice by either typing in the entry subwidget or selecting from the\nlistbox subwidget.
tkinter.tix._dummyDirList(master, name, destroy_physically=1)[class] DirList - displays a list view of a directory, its previous\ndirectories and its sub-directories. The user can choose one of\nthe directories displayed in the list or change to another directory.
tkinter.tix._dummyDirSelectBox(master, name, destroy_physically=1)[class] DirSelectBox - Motif style file select box.\nIt is generally used for\nthe user to choose a file. FileSelectBox stores the files mostly\nrecently selected into a ComboBox widget so that they can be quickly\nselected again.
tkinter.tix._dummyEntry(master, name, destroy_physically=1)[class] Entry widget which allows displaying simple text.
tkinter.tix._dummyExFileSelectBox(master, name, destroy_physically=1)[class] ExFileSelectBox - MS Windows style file select box.\nIt provides a convenient method for the user to select files.
tkinter.tix._dummyFileComboBox(master, name, destroy_physically=1)[class] ComboBox - an Entry field with a dropdown menu. The user can select a\nchoice by either typing in the entry subwidget or selecting from the\nlistbox subwidget.
tkinter.tix._dummyFileSelectBox(master, name, destroy_physically=1)[class] ExFileSelectBox - Motif style file select box.\nIt is generally used for\nthe user to choose a file. FileSelectBox stores the files mostly\nrecently selected into a ComboBox widget so that they can be quickly\nselected again.
tkinter.tix._dummyFrame(master, name, destroy_physically=1)[class] Frame widget which may contain other widgets and can have a 3D border.
tkinter.tix._dummyHList(master, name, destroy_physically=1)[class] HList - Hierarchy display  widget can be used to display any data\nthat have a hierarchical structure, for example, file system directory\ntrees. The list entries are indented and connected by branch lines\naccording to their places in the hierarchy.
tkinter.tix._dummyLabel(master, name, destroy_physically=1)[class] Label widget which can display text and bitmaps.
tkinter.tix._dummyListbox(master, name, destroy_physically=1)[class] Listbox widget which can display a list of strings.
tkinter.tix._dummyMenu(master, name, destroy_physically=1)[class] Menu widget which allows displaying menu bars, pull-down menus and pop-up menus.
tkinter.tix._dummyMenubutton(master, name, destroy_physically=1)[class] Menubutton widget, obsolete since Tk8.0.
tkinter.tix._dummyNoteBookFrame(master, name, destroy_physically=0)[class] Subwidget class.
tkinter.tix._dummyPanedWindow(master, name, destroy_physically=1)[class] PanedWindow - Multi-pane container widget\nallows the user to interactively manipulate the sizes of several\npanes. The panes can be arranged either vertically or horizontally.The\nuser changes the sizes of the panes by dragging the resize handle\nbetween two panes.
tkinter.tix._dummyScrollbar(master, name, destroy_physically=1)[class] Scrollbar widget which displays a slider at a certain position.
tkinter.tix._dummyScrolledHList(master, name, destroy_physically=1)[class] ScrolledHList - HList with automatic scrollbars.
tkinter.tix._dummyScrolledListBox(master, name, destroy_physically=1)[class] ScrolledListBox - Listbox with automatic scrollbars.
tkinter.tix._dummyStdButtonBox(master, name, destroy_physically=1)[class] StdButtonBox - Standard Button Box (OK, Apply, Cancel and Help)
tkinter.tix._dummyTList(master, name, destroy_physically=1)[class] TList - Hierarchy display widget which can be\nused to display data in a tabular format. The list entries of a TList\nwidget are similar to the entries in the Tk listbox widget. The main\ndifferences are (1) the TList widget can display the list entries in a\ntwo dimensional format and (2) you can use graphical images as well as\nmultiple colors and fonts for the list entries.
tkinter.tix._dummyText(master, name, destroy_physically=1)[class] Text widget which can display text in various forms.
tkinter.tix.getboolean(s)[function] Convert Tcl object to True or False.
tkinter.tix.getdouble(x=0, /)[class] Convert a string or number to a floating point number, if possible.
tkinter.tix.getint([x])[class] int([x]) -> integer\nint(x, base=10) -> integer
tkinter.tix.getint(x, base=10)[class] int([x]) -> integer\nint(x, base=10) -> integer
tkinter.tix.image_names()[function]
tkinter.tix.image_types()[function]
tkinter.tix.mainloop(n=0)[function] Run the main loop of Tcl.
tkinter.tix.tixCommand()[class] The tix commands provide access to miscellaneous  elements\nof  Tix's  internal state and the Tix application context.\nMost of the information manipulated by these  commands pertains\nto  the  application  as a whole, or to a screen or\ndisplay, rather than to a particular window.
tkinter.ttk
tkinter.ttk.Button(master=None, **kw)[class] Ttk Button widget, displays a textual label and/or image, and\nevaluates a command when pressed.
tkinter.ttk.Checkbutton(master=None, **kw)[class] Ttk Checkbutton widget which is either in on- or off-state.
tkinter.ttk.Combobox(master=None, **kw)[class] Ttk Combobox widget combines a text field with a pop-down list of\nvalues.
tkinter.ttk.Entry(master=None, widget=None, **kw)[class] Ttk Entry widget displays a one-line text string and allows that\nstring to be edited by the user.
tkinter.ttk.Frame(master=None, **kw)[class] Ttk Frame widget is a container, used to group other widgets\ntogether.
tkinter.ttk.Label(master=None, **kw)[class] Ttk Label widget displays a textual label and/or image.
tkinter.ttk.LabelFrame(master=None, **kw)[class] Ttk Labelframe widget is a container used to group other widgets\ntogether. It has an optional label, which may be a plain text string\nor another widget.
tkinter.ttk.LabeledScale(master=None, variable=None, from_=0, to=10, **kw)[class] A Ttk Scale widget with a Ttk Label widget indicating its\ncurrent value.
tkinter.ttk.Labelframe(master=None, **kw)[class] Ttk Labelframe widget is a container used to group other widgets\ntogether. It has an optional label, which may be a plain text string\nor another widget.
tkinter.ttk.Menubutton(master=None, **kw)[class] Ttk Menubutton widget displays a textual label and/or image, and\ndisplays a menu when pressed.
tkinter.ttk.Notebook(master=None, **kw)[class] Ttk Notebook widget manages a collection of windows and displays\na single one at a time. Each child window is associated with a tab,\nwhich the user may select to change the currently-displayed window.
tkinter.ttk.OptionMenu(master, variable, default=None, *values, **kwargs)[class] Themed OptionMenu, based after tkinter's OptionMenu, which allows\nthe user to select a value from a menu.
tkinter.ttk.PanedWindow(master=None, **kw)[class] Ttk Panedwindow widget displays a number of subwindows, stacked\neither vertically or horizontally.
tkinter.ttk.Panedwindow(master=None, **kw)[class] Ttk Panedwindow widget displays a number of subwindows, stacked\neither vertically or horizontally.
tkinter.ttk.Progressbar(master=None, **kw)[class] Ttk Progressbar widget shows the status of a long-running\noperation. They can operate in two modes: determinate mode shows the\namount completed relative to the total amount of work to be done, and\nindeterminate mode provides an animated display to let the user know\nthat something is happening.
tkinter.ttk.Radiobutton(master=None, **kw)[class] Ttk Radiobutton widgets are used in groups to show or change a\nset of mutually-exclusive options.
tkinter.ttk.Scale(master=None, **kw)[class] Ttk Scale widget is typically used to control the numeric value of\na linked variable that varies uniformly over some range.
tkinter.ttk.Scrollbar(master=None, **kw)[class] Ttk Scrollbar controls the viewport of a scrollable widget.
tkinter.ttk.Separator(master=None, **kw)[class] Ttk Separator widget displays a horizontal or vertical separator\nbar.
tkinter.ttk.Sizegrip(master=None, **kw)[class] Ttk Sizegrip allows the user to resize the containing toplevel\nwindow by pressing and dragging the grip.
tkinter.ttk.Spinbox(master=None, **kw)[class] Ttk Spinbox is an Entry with increment and decrement arrows
tkinter.ttk.Style(master=None)[class] Manipulate style database.
tkinter.ttk.Treeview(master=None, **kw)[class] Ttk Treeview widget displays a hierarchical collection of items.
tkinter.ttk.setup_master(master=None)[function] If master is not None, itself is returned. If master is None,\nthe default master is returned if there is one, otherwise a new\nmaster is created and returned.
tkinter.ttk.tclobjs_to_py(adict)[function] Returns adict with its values converted from Tcl objects to Python\nobjects.
token
token.AMPER
token.AMPEREQUAL
token.ASYNC
token.AT
token.ATEQUAL
token.AWAIT
token.CIRCUMFLEX
token.CIRCUMFLEXEQUAL
token.COLON
token.COLONEQUAL
token.COMMA
token.COMMENT
token.DEDENT
token.DOT
token.DOUBLESLASH
token.DOUBLESLASHEQUAL
token.DOUBLESTAR
token.DOUBLESTAREQUAL
token.ELLIPSIS
token.ENCODING
token.ENDMARKER
token.EQEQUAL
token.EQUAL
token.ERRORTOKEN
token.EXCLAMATION
token.FSTRING_END
token.FSTRING_MIDDLE
token.FSTRING_START
token.GREATER
token.GREATEREQUAL
token.INDENT
token.ISEOF(x)[function]
token.ISNONTERMINAL(x)[function]
token.ISTERMINAL(x)[function]
token.LBRACE
token.LEFTSHIFT
token.LEFTSHIFTEQUAL
token.LESS
token.LESSEQUAL
token.LPAR
token.LSQB
token.MINEQUAL
token.MINUS
token.NAME
token.NEWLINE
token.NL
token.NOTEQUAL
token.NT_OFFSET
token.NUMBER
token.N_TOKENS
token.OP
token.PERCENT
token.PERCENTEQUAL
token.PLUS
token.PLUSEQUAL
token.RARROW
token.RBRACE
token.RIGHTSHIFT
token.RIGHTSHIFTEQUAL
token.RPAR
token.RSQB
token.SEMI
token.SLASH
token.SLASHEQUAL
token.SOFT_KEYWORD
token.STAR
token.STAREQUAL
token.STRING
token.TILDE
token.TYPE_COMMENT
token.TYPE_IGNORE
token.VBAR
token.VBAREQUAL
token.tok_name
tokenize
tokenize.AMPER
tokenize.AMPEREQUAL
tokenize.ASYNC
tokenize.AT
tokenize.ATEQUAL
tokenize.AWAIT
tokenize.CIRCUMFLEX
tokenize.CIRCUMFLEXEQUAL
tokenize.COLON
tokenize.COLONEQUAL
tokenize.COMMA
tokenize.COMMENT
tokenize.DEDENT
tokenize.DOT
tokenize.DOUBLESLASH
tokenize.DOUBLESLASHEQUAL
tokenize.DOUBLESTAR
tokenize.DOUBLESTAREQUAL
tokenize.ELLIPSIS
tokenize.ENCODING
tokenize.ENDMARKER
tokenize.EQEQUAL
tokenize.EQUAL
tokenize.ERRORTOKEN
tokenize.EXCLAMATION
tokenize.FSTRING_END
tokenize.FSTRING_MIDDLE
tokenize.FSTRING_START
tokenize.GREATER
tokenize.GREATEREQUAL
tokenize.INDENT
tokenize.ISEOF(x)[function]
tokenize.ISNONTERMINAL(x)[function]
tokenize.ISTERMINAL(x)[function]
tokenize.LBRACE
tokenize.LEFTSHIFT
tokenize.LEFTSHIFTEQUAL
tokenize.LESS
tokenize.LESSEQUAL
tokenize.LPAR
tokenize.LSQB
tokenize.MINEQUAL
tokenize.MINUS
tokenize.NAME
tokenize.NEWLINE
tokenize.NL
tokenize.NOTEQUAL
tokenize.NT_OFFSET
tokenize.NUMBER
tokenize.N_TOKENS
tokenize.OP
tokenize.PERCENT
tokenize.PERCENTEQUAL
tokenize.PLUS
tokenize.PLUSEQUAL
tokenize.RARROW
tokenize.RBRACE
tokenize.RIGHTSHIFT
tokenize.RIGHTSHIFTEQUAL
tokenize.RPAR
tokenize.RSQB
tokenize.SEMI
tokenize.SLASH
tokenize.SLASHEQUAL
tokenize.SOFT_KEYWORD
tokenize.STAR
tokenize.STAREQUAL
tokenize.STRING
tokenize.TILDE
tokenize.TYPE_COMMENT
tokenize.TYPE_IGNORE
tokenize.TokenInfo(type, string, start, end, line)[class] TokenInfo(type, string, start, end, line)
tokenize.VBAR
tokenize.VBAREQUAL
tokenize.detect_encoding(readline)[function] The detect_encoding() function is used to detect the encoding that should\nbe used to decode a Python source file.  It requires one argument, readline,\nin the same way as the tokenize() generator.
tokenize.generate_tokens(readline)[function] Tokenize a source reading Python code as unicode strings.
tokenize.tok_name
tokenize.tokenize(readline)[function] The tokenize() generator requires one argument, readline, which\nmust be a callable object which provides the same interface as the\nreadline() method of built-in file objects.  Each call to the function\nshould return one line of input as bytes.  Alternatively, readline\ncan be a callable function terminating with StopIteration:\n    readline = open(myfile, 'rb').__next__  # Example of alternate readline
tokenize.untokenize(iterable)[function] Transform tokens back into Python source code.\nIt returns a bytes object, encoded using the ENCODING\ntoken, which is the first token sequence output by tokenize.
tomllib
tomllib.TOMLDecodeError()[class] An error raised if a document is not valid TOML.
tomllib.load(fp: 'BinaryIO', /, *, parse_float: 'ParseFloat' = <class 'float'>)[function] Parse TOML from a binary file object.
tomllib.loads(s: 'str', /, *, parse_float: 'ParseFloat' = <class 'float'>)[function] Parse TOML from a string.
trace
trace.CoverageResults(counts=None, calledfuncs=None, infile=None, callers=None,\n  outfile=None)[class]
trace.Trace(count=1, trace=1, countfuncs=0, countcallers=0, ignoremods=﴾﴿,\n  ignoredirs=﴾﴿, infile=None, outfile=None, timing=False)[class]
traceback
traceback.FrameSummary(filename, lineno, name, *, lookup_line=True,\n  locals=None, line=None, end_lineno=None, colno=None, end_colno=None)[class] Information about a single frame from a traceback.
traceback.StackSummary(iterable=﴾﴿, /)[class] A list of FrameSummary objects, representing a stack of frames.
traceback.TracebackException(exc_type, exc_value, exc_traceback, *, limit=None,\n  lookup_lines=True, capture_locals=False, compact=False, max_group_width=15, max_group_depth=10,\n  _seen=None)[class] An exception ready for rendering.
traceback.clear_frames(tb)[function] Clear all references to local variables in the frames of a traceback.
traceback.extract_stack(f=None, limit=None)[function] Extract the raw traceback from the current stack frame.
traceback.extract_tb(tb, limit=None)[function] Return a StackSummary object representing a list of\npre-processed entries from traceback.
traceback.format_exc(limit=None, chain=True)[function] Like print_exc() but return a string.
traceback.format_exception(exc, /, value=<??>, tb=<??>, limit=None, chain=True)[function] Format a stack trace and the exception information.
traceback.format_exception_only(exc, /, value=<??>)[function] Format the exception part of a traceback.
traceback.format_list(extracted_list)[function] Format a list of tuples or FrameSummary objects for printing.
traceback.format_stack(f=None, limit=None)[function] Shorthand for 'format_list(extract_stack(f, limit))'.
traceback.format_tb(tb, limit=None)[function] A shorthand for 'format_list(extract_tb(tb, limit))'.
traceback.print_exc(limit=None, file=None, chain=True)[function] Shorthand for 'print_exception(sys.exception(), limit, file, chain)'.
traceback.print_exception(exc, /, value=<??>, tb=<??>, limit=None, file=None,\n  chain=True)[function] Print exception up to 'limit' stack trace entries from 'tb' to 'file'.
traceback.print_last(limit=None, file=None, chain=True)[function] This is a shorthand for 'print_exception(sys.last_exc, limit, file, chain)'.
traceback.print_stack(f=None, limit=None, file=None)[function] Print a stack trace from its invocation point.
traceback.print_tb(tb, limit=None, file=None)[function] Print up to 'limit' stack trace entries from the traceback 'tb'.
traceback.walk_stack(f)[function] Walk a stack yielding the frame and line number for each frame.
traceback.walk_tb(tb)[function] Walk a traceback yielding the frame and line number for each frame.
tracemalloc
tracemalloc.BaseFilter(inclusive)[class]
tracemalloc.DomainFilter(inclusive, domain)[class]
tracemalloc.Filter(inclusive, filename_pattern, lineno=None, all_frames=False,\n  domain=None)[class]
tracemalloc.Frame(frame)[class] Frame of a traceback.
tracemalloc.Iterable()[class]
tracemalloc.Sequence()[class] All the operations on a read-only sequence.
tracemalloc.Snapshot(traces, traceback_limit)[class] Snapshot of traces of memory blocks allocated by Python.
tracemalloc.Statistic(traceback, size, count)[class] Statistic difference on memory allocations between two Snapshot instance.
tracemalloc.StatisticDiff(traceback, size, size_diff, count, count_diff)[class] Statistic difference on memory allocations between an old and a new\nSnapshot instance.
tracemalloc.Trace(trace)[class] Trace of a memory block.
tracemalloc.Traceback(frames, total_nframe=None)[class] Sequence of Frame instances sorted from the oldest frame\nto the most recent frame.
tracemalloc.clear_traces()Clear traces of memory blocks allocated by Python.
tracemalloc.get_object_traceback(obj)[function] Get the traceback where the Python object *obj* was allocated.\nReturn a Traceback instance.
tracemalloc.get_traceback_limit()Get the maximum number of frames stored in the traceback of a trace.
tracemalloc.get_traced_memory()Get the current size and peak size of memory blocks traced by tracemalloc.
tracemalloc.get_tracemalloc_memory()Get the memory usage in bytes of the tracemalloc module.
tracemalloc.is_tracing()Return True if the tracemalloc module is tracing Python memory allocations.
tracemalloc.reset_peak()Set the peak size of memory blocks traced by tracemalloc to the current size.
tracemalloc.start(nframe=1, /)Start tracing Python memory allocations.
tracemalloc.stop()Stop tracing Python memory allocations.
tracemalloc.take_snapshot()[function] Take a snapshot of traces of memory blocks allocated by Python.
tracemalloc.total_ordering(cls)[function] Class decorator that fills in missing ordering methods
try
tuple(iterable=﴾﴿, /)[class] Built-in immutable sequence.
turtle
turtle.Pen(shape='classic', undobuffersize=1000, visible=True)[class] RawTurtle auto-creating (scrolled) canvas.
turtle.RawPen(canvas=None, shape='classic', undobuffersize=1000, visible=True)[class] Animation part of the RawTurtle.\nPuts RawTurtle upon a TurtleScreen and provides tools for\nits animation.
turtle.RawTurtle(canvas=None, shape='classic', undobuffersize=1000,\n  visible=True)[class] Animation part of the RawTurtle.\nPuts RawTurtle upon a TurtleScreen and provides tools for\nits animation.
turtle.Screen()[function] Return the singleton screen object.\nIf none exists at the moment, create a new one and return it,\nelse return the existing one.
turtle.ScrolledCanvas(master, width=500, height=350, canvwidth=600,\n  canvheight=500)[class] Modeled after the scrolled canvas class from Grayons's Tkinter book.
turtle.Shape(type_, data=None)[class] Data structure modeling shapes.
turtle.Terminator()[class] Will be raised in TurtleScreen.update, if _RUNNING becomes False.
turtle.Turtle(shape='classic', undobuffersize=1000, visible=True)[class] RawTurtle auto-creating (scrolled) canvas.
turtle.TurtleScreen(cv, mode='standard', colormode=1.0, delay=10)[class] Provides screen oriented methods like bgcolor etc.
turtle.Vec2D(x, y)[class] A 2 dimensional vector class, used as a helper class\nfor implementing turtle graphics.\nMay be useful for turtle graphics programs also.\nDerived from tuple, so a vector is a tuple!
turtle.addshape(name, shape=None)[function] Adds a turtle shape to TurtleScreen's shapelist.
turtle.back(distance)[function] Move the turtle backward by distance.
turtle.backward(distance)[function] Move the turtle backward by distance.
turtle.begin_fill()[function] Called just before drawing a shape to be filled.
turtle.begin_poly()[function] Start recording the vertices of a polygon.
turtle.bgcolor(*args)[function] Set or return backgroundcolor of the TurtleScreen.
turtle.bgpic(picname=None)[function] Set background image or return name of current backgroundimage.
turtle.bk(distance)[function] Move the turtle backward by distance.
turtle.bye()[function] Shut the turtlegraphics window.
turtle.circle(radius, extent=None, steps=None)[function] Draw a circle with given radius.
turtle.clear()[function] Delete the turtle's drawings from the screen. Do not move
turtle.clearscreen()[function] Delete all drawings and all turtles from the TurtleScreen.
turtle.clearstamp(stampid)[function] Delete stamp with given stampid
turtle.clearstamps(n=None)[function] Delete all or first/last n of turtle's stamps.
turtle.clone()[function] Create and return a clone of the
turtle.color(*args)[function] Return or set the pencolor and fillcolor.
turtle.colormode(cmode=None)[function] Return the colormode or set it to 1.0 or 255.
turtle.degrees(fullcircle=360.0)[function] Set angle measurement units to degrees.
turtle.delay(delay=None)[function] Return or set the drawing delay in milliseconds.
turtle.distance(x, y=None)[function] Return the distance from the turtle to (x,y) in turtle step units.
turtle.done()[function] Starts event loop - calling Tkinter's mainloop function.
turtle.dot(size=None, *color)[function] Draw a dot with diameter size, using color.
turtle.down()[function] Pull the pen down -- drawing when moving.
turtle.end_fill()[function] Fill the shape drawn after the call begin_fill().
turtle.end_poly()[function] Stop recording the vertices of a polygon.
turtle.exitonclick()[function] Go into mainloop until the mouse is clicked.
turtle.fd(distance)[function] Move the turtle forward by the specified distance.
turtle.fillcolor(*args)[function] Return or set the fillcolor.
turtle.filling()[function] Return fillstate (True if filling, False else).
turtle.forward(distance)[function] Move the turtle forward by the specified distance.
turtle.get_poly()[function] Return the lastly recorded polygon.
turtle.get_shapepoly()[function] Return the current shape polygon as tuple of coordinate pairs.
turtle.getcanvas()[function] Return the Canvas of this TurtleScreen.
turtle.getpen()[function] Return the Turtleobject itself.
turtle.getscreen()[function] Return the TurtleScreen object, the turtle is drawing  on.
turtle.getshapes()[function] Return a list of names of all currently available turtle shapes.
turtle.getturtle()[function] Return the Turtleobject itself.
turtle.goto(x, y=None)[function] Move turtle to an absolute position.
turtle.heading()[function] Return the turtle's current heading.
turtle.hideturtle()[function] Makes the turtle invisible.
turtle.home()[function] Move turtle to the origin - coordinates (0,0).
turtle.ht()[function] Makes the turtle invisible.
turtle.isdown()[function] Return True if pen is down, False if it's up.
turtle.isvisible()[function] Return True if the Turtle is shown, False if it's hidden.
turtle.left(angle)[function] Turn turtle left by angle units.
turtle.listen(xdummy=None, ydummy=None)[function] Set focus on TurtleScreen (in order to collect key-events)
turtle.lt(angle)[function] Turn turtle left by angle units.
turtle.mainloop()[function] Starts event loop - calling Tkinter's mainloop function.
turtle.mode(mode=None)[function] Set turtle-mode ('standard', 'logo' or 'world') and perform reset.
turtle.numinput(title, prompt, default=None, minval=None, maxval=None)[function] Pop up a dialog window for input of a number.
turtle.onclick(fun, btn=1, add=None)[function] Bind fun to mouse-click event on this turtle on canvas.
turtle.ondrag(fun, btn=1, add=None)[function] Bind fun to mouse-move event on this turtle on canvas.
turtle.onkey(fun, key)[function] Bind fun to key-release event of key.
turtle.onkeypress(fun, key=None)[function] Bind fun to key-press event of key if key is given,\nor to any key-press-event if no key is given.
turtle.onkeyrelease(fun, key)[function] Bind fun to key-release event of key.
turtle.onrelease(fun, btn=1, add=None)[function] Bind fun to mouse-button-release event on this turtle on canvas.
turtle.onscreenclick(fun, btn=1, add=None)[function] Bind fun to mouse-click event on canvas.
turtle.ontimer(fun, t=0)[function] Install a timer, which calls fun after t milliseconds.
turtle.pd()[function] Pull the pen down -- drawing when moving.
turtle.pen(pen=None, **pendict)[function] Return or set the pen's attributes.
turtle.pencolor(*args)[function] Return or set the pencolor.
turtle.pendown()[function] Pull the pen down -- drawing when moving.
turtle.pensize(width=None)[function] Set or return the line thickness.
turtle.penup()[function] Pull the pen up -- no drawing when moving.
turtle.pos()[function] Return the turtle's current location (x,y), as a Vec2D-vector.
turtle.position()[function] Return the turtle's current location (x,y), as a Vec2D-vector.
turtle.pu()[function] Pull the pen up -- no drawing when moving.
turtle.radians()[function] Set the angle measurement units to radians.
turtle.register_shape(name, shape=None)[function] Adds a turtle shape to TurtleScreen's shapelist.
turtle.reset()[function] Delete the turtle's drawings and restore its default values.
turtle.resetscreen()[function] Reset all Turtles on the Screen to their initial state.
turtle.resizemode(rmode=None)[function] Set resizemode to one of the values: "auto", "user", "noresize".
turtle.right(angle)[function] Turn turtle right by angle units.
turtle.rt(angle)[function] Turn turtle right by angle units.
turtle.screensize(canvwidth=None, canvheight=None, bg=None)[function] Resize the canvas the turtles are drawing on.
turtle.seth(to_angle)[function] Set the orientation of the turtle to to_angle.
turtle.setheading(to_angle)[function] Set the orientation of the turtle to to_angle.
turtle.setpos(x, y=None)[function] Move turtle to an absolute position.
turtle.setposition(x, y=None)[function] Move turtle to an absolute position.
turtle.settiltangle(angle)[function] Rotate the turtleshape to point in the specified direction
turtle.setundobuffer(size)[function] Set or disable undobuffer.
turtle.setup(width=0.5, height=0.75, startx=None, starty=None)[function] Set the size and position of the main window.
turtle.setworldcoordinates(llx, lly, urx, ury)[function] Set up a user defined coordinate-system.
turtle.setx(x)[function] Set the turtle's first coordinate to x
turtle.sety(y)[function] Set the turtle's second coordinate to y
turtle.shape(name=None)[function] Set turtle shape to shape with given name / return current shapename.
turtle.shapesize(stretch_wid=None, stretch_len=None, outline=None)[function] Set/return turtle's stretchfactors/outline. Set resizemode to "user".
turtle.shapetransform(t11=None, t12=None, t21=None, t22=None)[function] Set or return the current transformation matrix of the turtle shape.
turtle.shearfactor(shear=None)[function] Set or return the current shearfactor.
turtle.showturtle()[function] Makes the turtle visible.
turtle.speed(speed=None)[function] Return or set the turtle's speed.
turtle.st()[function] Makes the turtle visible.
turtle.stamp()[function] Stamp a copy of the turtleshape onto the canvas and return its id.
turtle.teleport(x=None, y=None, *, fill_gap: bool = False)[function] Instantly move turtle to an absolute position.
turtle.textinput(title, prompt)[function] Pop up a dialog window for input of a string.
turtle.tilt(angle)[function] Rotate the turtleshape by angle.
turtle.tiltangle(angle=None)[function] Set or return the current tilt-angle.
turtle.title(titlestring)[function] Set title of turtle-window
turtle.towards(x, y=None)[function] Return the angle of the line from the turtle's position to (x, y).
turtle.tracer(n=None, delay=None)[function] Turns turtle animation on/off and set delay for update drawings.
turtle.turtles()[function] Return the list of turtles on the
turtle.turtlesize(stretch_wid=None, stretch_len=None, outline=None)[function] Set/return turtle's stretchfactors/outline. Set resizemode to "user".
turtle.undo()[function] undo (repeatedly) the last turtle action.
turtle.undobufferentries()[function] Return count of entries in the undobuffer.
turtle.up()[function] Pull the pen up -- no drawing when moving.
turtle.update()[function] Perform a TurtleScreen update.
turtle.width(width=None)[function] Set or return the line thickness.
turtle.window_height()[function] Return the height of the turtle window.
turtle.window_width()[function] Return the width of the turtle window.
turtle.write(arg, move=False, align='left', font=﴾'Arial'﹐ 8﹐ 'normal'﴿)[function] Write text at the current turtle position.
turtle.write_docstringdict(filename='turtle_docstringdict')[function] Create and write docstring-dictionary to file.
turtle.xcor()[function] Return the turtle's x coordinate.
turtle.ycor()[function] Return the turtle's y coordinate\n---\nNo arguments.
turtledemo
type
type(name, bases, dict)[class] type(object) -> the object's type\ntype(name, bases, dict, **kwds) -> a new type
type(object)[class] type(object) -> the object's type\ntype(name, bases, dict, **kwds) -> a new type
types
types.AsyncGeneratorType()[class]
types.BuiltinFunctionType()[class]
types.BuiltinMethodType()[class]
types.CellType()[class] Create a new cell object.
types.ClassMethodDescriptorType()[class]
types.CodeType(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,\n  flags, codestring, constants, names, varnames, filename, name, qualname,\n  firstlineno, linetable, exceptiontable, freevars=﴾﴿, cellvars=﴾﴿, /)[class] Create a code object.  Not for the faint of heart.
types.CoroutineType()[class]
types.DynamicClassAttribute(fget=None, fset=None, fdel=None, doc=None)[class] Route attribute access on a class to __getattr__.
types.EllipsisType()[class]
types.FrameType()[class]
types.FunctionType(code, globals, name=None, argdefs=None, closure=None)[class] Create a function object.
types.GeneratorType()[class]
types.GenericAlias()[class] Represent a PEP 585 generic type
types.GetSetDescriptorType()[class]
types.LambdaType(code, globals, name=None, argdefs=None, closure=None)[class] Create a function object.
types.MappingProxyType(mapping)[class]
types.MemberDescriptorType()[class]
types.MethodDescriptorType()[class]
types.MethodType(function, instance, /)[class] Create a bound instance method object.
types.MethodWrapperType()[class]
types.ModuleType(name, doc=None)[class] Create a module object.
types.NoneType()[class]
types.NotImplementedType()[class]
types.SimpleNamespace()[class] A simple attribute-based namespace.
types.TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)[class] TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)\n--
types.UnionType()[class] Represent a PEP 604 union type
types.WrapperDescriptorType()[class]
types.coroutine(func)[function] Convert regular generator function to a coroutine.
types.get_original_bases(cls, /)[function] Return the class's "original" bases prior to modification by `__mro_entries__`.
types.new_class(name, bases=﴾﴿, kwds=None, exec_body=None)[function] Create a class object dynamically using the appropriate metaclass.
types.prepare_class(name, bases=﴾﴿, kwds=None)[function] Call the __prepare__ method of the appropriate metaclass.
types.resolve_bases(bases)[function] Resolve MRO entries dynamically as specified by PEP 560.
typing
typing.AbstractSet(*args, **kwargs)A generic version of collections.abc.Set.
typing.Annotated(*args, **kwargs)[class] Add context-specific metadata to a type.
typing.Any(*args, **kwargs)[class] Special type indicating an unconstrained type.
typing.AnyStr
typing.AsyncContextManager(*args, **kwargs)A generic version of contextlib.AbstractAsyncContextManager.
typing.AsyncGenerator(*args, **kwargs)A generic version of collections.abc.AsyncGenerator.
typing.AsyncIterable(*args, **kwargs)A generic version of collections.abc.AsyncIterable.
typing.AsyncIterator(*args, **kwargs)A generic version of collections.abc.AsyncIterator.
typing.Awaitable(*args, **kwargs)A generic version of collections.abc.Awaitable.
typing.BinaryIO()[class] Typed version of the return of open() in binary mode.
typing.ByteString(*args, **kwargs)A generic version of collections.abc.ByteString.
typing.Callable(*args, **kwargs)Deprecated alias to collections.abc.Callable.
typing.ChainMap(*args, **kwargs)A generic version of collections.ChainMap.
typing.ClassVar(*args, **kwds)Special type construct to mark class variables.
typing.Collection(*args, **kwargs)A generic version of collections.abc.Collection.
typing.Concatenate(*args, **kwds)Special form for annotating higher-order functions.
typing.Container(*args, **kwargs)A generic version of collections.abc.Container.
typing.ContextManager(*args, **kwargs)A generic version of contextlib.AbstractContextManager.
typing.Coroutine(*args, **kwargs)A generic version of collections.abc.Coroutine.
typing.Counter(*args, **kwargs)A generic version of collections.Counter.
typing.DefaultDict(*args, **kwargs)A generic version of collections.defaultdict.
typing.Deque(*args, **kwargs)A generic version of collections.deque.
typing.Dict(*args, **kwargs)A generic version of dict.
typing.Final(*args, **kwds)Special typing construct to indicate final names to type checkers.
typing.ForwardRef(arg, is_argument=True, module=None, *, is_class=False)[class] Internal wrapper to hold a forward reference.
typing.FrozenSet(*args, **kwargs)A generic version of frozenset.
typing.Generator(*args, **kwargs)A generic version of collections.abc.Generator.
typing.Generic()[class] Abstract base class for generic types.
typing.Hashable(*args, **kwargs)A generic version of collections.abc.Hashable.
typing.IO()[class] Generic base class for TextIO and BinaryIO.
typing.ItemsView(*args, **kwargs)A generic version of collections.abc.ItemsView.
typing.Iterable(*args, **kwargs)A generic version of collections.abc.Iterable.
typing.Iterator(*args, **kwargs)A generic version of collections.abc.Iterator.
typing.KeysView(*args, **kwargs)A generic version of collections.abc.KeysView.
typing.List(*args, **kwargs)A generic version of list.
typing.Literal(*args, **kwds)Special typing form to define literal types (a.k.a. value types).
typing.LiteralString(*args, **kwds)Represents an arbitrary literal string.
typing.Mapping(*args, **kwargs)A generic version of collections.abc.Mapping.
typing.MappingView(*args, **kwargs)A generic version of collections.abc.MappingView.
typing.Match(*args, **kwargs)A generic version of re.Match.
typing.MutableMapping(*args, **kwargs)A generic version of collections.abc.MutableMapping.
typing.MutableSequence(*args, **kwargs)A generic version of collections.abc.MutableSequence.
typing.MutableSet(*args, **kwargs)A generic version of collections.abc.MutableSet.
typing.NamedTuple(typename, fields=None, /, **kwargs)[function] Typed version of namedtuple.
typing.Never(*args, **kwds)The bottom type, a type that has no members.
typing.NewType(name, tp)[class] NewType creates simple unique types with almost zero runtime overhead.
typing.NoReturn(*args, **kwds)Special type indicating functions that never return.
typing.NotRequired(*args, **kwds)Special typing construct to mark a TypedDict key as potentially missing.
typing.Optional(*args, **kwds)Optional[X] is equivalent to Union[X, None].
typing.OrderedDict(*args, **kwargs)A generic version of collections.OrderedDict.
typing.ParamSpec()[class] Parameter specification variable.
typing.ParamSpecArgs()[class] The args for a ParamSpec object.
typing.ParamSpecKwargs()[class] The kwargs for a ParamSpec object.
typing.Pattern(*args, **kwargs)A generic version of re.Pattern.
typing.Protocol()[class] Base class for protocol classes.
typing.Required(*args, **kwds)Special typing construct to mark a TypedDict key as required.
typing.Reversible(*args, **kwargs)A generic version of collections.abc.Reversible.
typing.Self(*args, **kwds)Used to spell the type of "self" in classes.
typing.Sequence(*args, **kwargs)A generic version of collections.abc.Sequence.
typing.Set(*args, **kwargs)A generic version of set.
typing.Sized(*args, **kwargs)A generic version of collections.abc.Sized.
typing.SupportsAbs(*args, **kwargs)[class] An ABC with one abstract method __abs__ that is covariant in its return type.
typing.SupportsBytes(*args, **kwargs)[class] An ABC with one abstract method __bytes__.
typing.SupportsComplex(*args, **kwargs)[class] An ABC with one abstract method __complex__.
typing.SupportsFloat(*args, **kwargs)[class] An ABC with one abstract method __float__.
typing.SupportsIndex(*args, **kwargs)[class] An ABC with one abstract method __index__.
typing.SupportsInt(*args, **kwargs)[class] An ABC with one abstract method __int__.
typing.SupportsRound(*args, **kwargs)[class] An ABC with one abstract method __round__ that is covariant in its return type.
typing.TYPE_CHECKING
typing.Text()[class] str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str
typing.TextIO()[class] Typed version of the return of open() in text mode.
typing.Tuple(*args, **kwargs)Deprecated alias to builtins.tuple.
typing.Type(*args, **kwargs)Deprecated alias to builtins.type.
typing.TypeAlias(*args, **kwds)Special form for marking type aliases.
typing.TypeAliasType()[class] Type alias.
typing.TypeGuard(*args, **kwds)Special typing construct for marking user-defined type guard functions.
typing.TypeVar()[class] Type variable.
typing.TypeVarTuple()[class] Type variable tuple. A specialized form of type variable that enables\nvariadic generics.
typing.TypedDict(typename, fields=None, /, *, total=True, **kwargs)[function] A simple typed namespace. At runtime it is equivalent to a plain dict.
typing.Union(*args, **kwds)Union type; Union[X, Y] means either X or Y.
typing.Unpack(*args, **kwds)Type unpack operator.
typing.ValuesView(*args, **kwargs)A generic version of collections.abc.ValuesView.
typing.assert_never(arg: Never, /)[function] Statically assert that a line of code is unreachable.
typing.assert_type(val, typ, /)[function] Ask a static type checker to confirm that the value is of the given type.
typing.cast(typ, val)[function] Cast a value to a type.
typing.clear_overloads()[function] Clear all overloads in the registry.
typing.dataclass_transform(*, eq_default: bool = True,\n  order_default: bool = False, kw_only_default: bool = False, frozen_default: bool = False,\n  field_specifiers: tuple[typing.Union[type[typing.Any]﹐ typing.Callable[...﹐ typing.Any]]﹐ ...] = ﴾﴿, **kwargs: Any)[function] Decorator to mark an object as providing dataclass-like behaviour.
typing.final(f)[function] Decorator to indicate final methods and final classes.
typing.get_args(tp)[function] Get type arguments with all substitutions performed.
typing.get_origin(tp)[function] Get the unsubscripted version of a type.
typing.get_overloads(func)[function] Return all defined overloads for *func* as a sequence.
typing.get_type_hints(obj, globalns=None, localns=None, include_extras=False)[function] Return type hints for an object.
typing.io
typing.io.BinaryIO()[class] Typed version of the return of open() in binary mode.
typing.io.IO()[class] Generic base class for TextIO and BinaryIO.
typing.io.TextIO()[class] Typed version of the return of open() in text mode.
typing.is_typeddict(tp)[function] Check if an annotation is a TypedDict class.
typing.no_type_check(arg)[function] Decorator to indicate that annotations are not type hints.
typing.no_type_check_decorator(decorator)[function] Decorator to give another decorator the @no_type_check effect.
typing.overload(func)[function] Decorator for overloaded functions/methods.
typing.override(method: F, /)[function] Indicate that a method is intended to override a method in a base class.
typing.re
typing.re.Match(*args, **kwargs)A generic version of re.Match.
typing.re.Pattern(*args, **kwargs)A generic version of re.Pattern.
typing.reveal_type(obj: T, /)[function] Reveal the inferred type of a variable.
typing.runtime_checkable(cls)[function] Mark a protocol class as a runtime protocol.
unicodedata
unicodedata.UCD()[class]
unicodedata._ucnhash_CAPI
unicodedata.bidirectional(chr, /)Returns the bidirectional class assigned to the character chr as string.
unicodedata.category(chr, /)Returns the general category assigned to the character chr as string.
unicodedata.combining(chr, /)Returns the canonical combining class assigned to the character chr as integer.
unicodedata.decimal(chr[, default])Converts a Unicode character into its equivalent decimal value.
unicodedata.decomposition(chr, /)Returns the character decomposition mapping assigned to the character chr as string.
unicodedata.digit(chr[, default])Converts a Unicode character into its equivalent digit value.
unicodedata.east_asian_width(chr, /)Returns the east asian width assigned to the character chr as string.
unicodedata.is_normalized(form, unistr, /)Return whether the Unicode string unistr is in the normal form 'form'.
unicodedata.lookup(name, /)Look up character by name.
unicodedata.mirrored(chr, /)Returns the mirrored property assigned to the character chr as integer.
unicodedata.name(chr[, default])Returns the name assigned to the character chr as a string.
unicodedata.normalize(form, unistr, /)Return the normal form 'form' for the Unicode string unistr.
unicodedata.numeric(chr[, default])Converts a Unicode character into its equivalent numeric value.
unicodedata.ucd_3_2_0
unicodedata.unidata_version
unittest
unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None,\n  description=None)[class] A test case that wraps a test function.
unittest.IsolatedAsyncioTestCase(methodName='runTest')[class] A class whose instances are single test cases.
unittest.SkipTest()[class] Raise this exception in a test to skip it.
unittest.TestCase(methodName='runTest')[class] A class whose instances are single test cases.
unittest.TestLoader()[class] This class is responsible for loading tests according to various criteria\nand returning them wrapped in a TestSuite
unittest.TestResult(stream=None, descriptions=None, verbosity=None)[class] Holder for test result information.
unittest.TestSuite(tests=﴾﴿)[class] A test suite is a composite test consisting of a number of TestCases.
unittest.TextTestResult(stream, descriptions, verbosity, *, durations=None)[class] A test result class that can print formatted text results to a stream.
unittest.TextTestRunner(stream=None, descriptions=True, verbosity=1,\n  failfast=False, buffer=False, resultclass=None, warnings=None, *, tb_locals=False,\n  durations=None)[class] A test runner class that displays results in textual form.
unittest.addModuleCleanup(function, /, *args, **kwargs)[function] Same as addCleanup, except the cleanup items are called even if\nsetUpModule fails (unlike tearDownModule).
unittest.case
unittest.case.DIFF_OMITTED
unittest.case.FunctionTestCase(testFunc, setUp=None, tearDown=None,\n  description=None)[class] A test case that wraps a test function.
unittest.case.SkipTest()[class] Raise this exception in a test to skip it.
unittest.case.TestCase(methodName='runTest')[class] A class whose instances are single test cases.
unittest.case._AssertRaisesBaseContext(expected, test_case,\n  expected_regex=None)[class]
unittest.case._AssertRaisesContext(expected, test_case, expected_regex=None)[class] A context manager used to implement TestCase.assertRaises* methods.
unittest.case._AssertWarnsContext(expected, test_case, expected_regex=None)[class] A context manager used to implement TestCase.assertWarns* methods.
unittest.case._BaseTestCaseContext(test_case)[class]
unittest.case._OrderedChainMap(*maps)[class] A ChainMap groups multiple dicts (or other mappings) together\nto create a single, updateable view.
unittest.case._Outcome(result=None)[class]
unittest.case._ShouldStop()[class] The test should stop.
unittest.case._SubTest(test_case, message, params)[class] A class whose instances are single test cases.
unittest.case._UnexpectedSuccess()[class] The test was supposed to fail, but it didn't!
unittest.case._addError(result, test, exc_info)[function]
unittest.case._addSkip(result, test_case, reason)[function]
unittest.case._common_shorten_repr(*args)[function]
unittest.case._count_diff_all_purpose(actual, expected)[function] Returns list of (cnt_act, cnt_exp, elem) triples where the counts differ
unittest.case._count_diff_hashable(actual, expected)[function] Returns list of (cnt_act, cnt_exp, elem) triples where the counts differ
unittest.case._enter_context(cm, addcleanup)[function]
unittest.case._id(obj)[function]
unittest.case._is_subtype(expected, basetype)[function]
unittest.case._module_cleanups
unittest.case._subtest_msg_sentinel
unittest.case.addModuleCleanup(function, /, *args, **kwargs)[function] Same as addCleanup, except the cleanup items are called even if\nsetUpModule fails (unlike tearDownModule).
unittest.case.doModuleCleanups()[function] Execute all module cleanup functions. Normally called for you after\ntearDownModule.
unittest.case.enterModuleContext(cm)[function] Same as enterContext, but module-wide.
unittest.case.expectedFailure(test_item)[function]
unittest.case.safe_repr(obj, short=False)[function]
unittest.case.skip(reason)[function] Unconditionally skip a test.
unittest.case.skipIf(condition, reason)[function] Skip a test if the condition is true.
unittest.case.skipUnless(condition, reason)[function] Skip a test unless the condition is true.
unittest.case.strclass(cls)[function]
unittest.defaultTestLoader
unittest.doModuleCleanups()[function] Execute all module cleanup functions. Normally called for you after\ntearDownModule.
unittest.enterModuleContext(cm)[function] Same as enterContext, but module-wide.
unittest.expectedFailure(test_item)[function]
unittest.findTestCases(module, prefix='test', sortUsing=<??>, suiteClass=<??>)[function]
unittest.getTestCaseNames(testCaseClass, prefix, sortUsing=<??>,\n  testNamePatterns=None)[function]
unittest.installHandler()[function]
unittest.loader
unittest.loader.TestLoader()[class] This class is responsible for loading tests according to various criteria\nand returning them wrapped in a TestSuite
unittest.loader.VALID_MODULE_NAME
unittest.loader._FailedTest(method_name, exception)[class] A class whose instances are single test cases.
unittest.loader._makeLoader(prefix, sortUsing, suiteClass=None,\n  testNamePatterns=None)[function]
unittest.loader._make_failed_import_test(name, suiteClass)[function]
unittest.loader._make_failed_load_tests(name, exception, suiteClass)[function]
unittest.loader._make_failed_test(methodname, exception, suiteClass, message)[function]
unittest.loader._make_skipped_test(methodname, exception, suiteClass)[function]
unittest.loader._splitext(path)[function]
unittest.loader.defaultTestLoader
unittest.loader.findTestCases(module, prefix='test', sortUsing=<??>,\n  suiteClass=<??>)[function]
unittest.loader.fnmatch(name, pat)[function] Test whether FILENAME matches PATTERN.
unittest.loader.fnmatchcase(name, pat)[function] Test whether FILENAME matches PATTERN, including case.
unittest.loader.getTestCaseNames(testCaseClass, prefix, sortUsing=<??>,\n  testNamePatterns=None)[function]
unittest.loader.makeSuite(testCaseClass, prefix='test', sortUsing=<??>,\n  suiteClass=<??>)[function]
unittest.main
unittest.main(module='__main__', defaultTest=None, argv=None, testRunner=None,\n  testLoader=<??>, exit=True, verbosity=1, failfast=None, catchbreak=None, buffer=None,\n  warnings=None, *, tb_locals=False, durations=None)[class] A command-line program that runs a set of tests; this is primarily\nfor making test modules conveniently executable.
unittest.main.MAIN_EXAMPLES
unittest.main.MODULE_EXAMPLES
unittest.main.TestProgram(module='__main__', defaultTest=None, argv=None,\n  testRunner=None, testLoader=<??>, exit=True, verbosity=1, failfast=None, catchbreak=None,\n  buffer=None, warnings=None, *, tb_locals=False, durations=None)[class] A command-line program that runs a set of tests; this is primarily\nfor making test modules conveniently executable.
unittest.main._NO_TESTS_EXITCODE
unittest.main._convert_name(name)[function]
unittest.main._convert_names(names)[function]
unittest.main._convert_select_pattern(pattern)[function]
unittest.main.installHandler()[function]
unittest.main.main(module='__main__', defaultTest=None, argv=None,\n  testRunner=None, testLoader=<??>, exit=True, verbosity=1, failfast=None, catchbreak=None,\n  buffer=None, warnings=None, *, tb_locals=False, durations=None)[class] A command-line program that runs a set of tests; this is primarily\nfor making test modules conveniently executable.
unittest.makeSuite(testCaseClass, prefix='test', sortUsing=<??>,\n  suiteClass=<??>)[function]
unittest.mock
unittest.mock.ANY
unittest.mock.AsyncMock(*args, **kwargs)[class] Enhance :class:`Mock` with features allowing to mock\nan async function.
unittest.mock.DEFAULT
unittest.mock.FILTER_DIR
unittest.mock.MagicMock(*args, **kw)[class] MagicMock is a subclass of Mock with default implementations\nof most of the magic methods. You can use MagicMock without having to\nconfigure the magic methods yourself.
unittest.mock.Mock(spec=None, side_effect=None, return_value=sentinel.DEFAULT,\n  wraps=None, name=None, spec_set=None, parent=None, _spec_state=None, _new_name='',\n  _new_parent=None, **kwargs)[class] Create a new `Mock` object. `Mock` takes several optional arguments\nthat specify the behaviour of the Mock object:
unittest.mock.NonCallableMagicMock(*args, **kw)[class] A version of `MagicMock` that isn't callable.
unittest.mock.NonCallableMock(spec=None, wraps=None, name=None, spec_set=None,\n  parent=None, _spec_state=None, _new_name='', _new_parent=None, _spec_as_instance=False,\n  _eat_self=None, unsafe=False, **kwargs)[class] A non-callable version of `Mock`
unittest.mock.PropertyMock(spec=None, side_effect=None,\n  return_value=sentinel.DEFAULT, wraps=None, name=None, spec_set=None, parent=None, _spec_state=None,\n  _new_name='', _new_parent=None, **kwargs)[class] A mock intended to be used as a property, or other descriptor, on a class.\n`PropertyMock` provides `__get__` and `__set__` methods so you can specify\na return value when it is fetched.
unittest.mock.call(*args, **kwargs)
unittest.mock.create_autospec(spec, spec_set=False, instance=False,\n  _parent=None, _name=None, *, unsafe=False, **kwargs)[function] Create a mock object using another object as a spec. Attributes on the\nmock will use the corresponding attribute on the `spec` object as their\nspec.
unittest.mock.mock_open(mock=None, read_data='')[function] A helper function to create a mock to replace the use of `open`. It works\nfor `open` called directly or used as a context manager.
unittest.mock.patch(target, new=sentinel.DEFAULT, spec=None, create=False,\n  spec_set=None, autospec=None, new_callable=None, *, unsafe=False, **kwargs)[function] `patch` acts as a function decorator, class decorator or a context\nmanager. Inside the body of the function or with statement, the `target`\nis patched with a `new` object. When the function/with statement exits\nthe patch is undone.
unittest.mock.seal(mock)[function] Disable the automatic generation of child mocks.
unittest.mock.sentinel
unittest.registerResult(result)[function]
unittest.removeHandler(method=None)[function]
unittest.removeResult(result)[function]
unittest.result
unittest.result.STDERR_LINE
unittest.result.STDOUT_LINE
unittest.result.TestResult(stream=None, descriptions=None, verbosity=None)[class] Holder for test result information.
unittest.result.failfast(method)[function]
unittest.result.wraps(wrapped,\n  assigned=﴾'__module__'﹐ '__name__'﹐ '__qualname__'﹐ '__doc__'﹐ '__annotations__'﹐ '__type_params__'﴿, updated=﴾'__dict__'﹐﴿)[function] Decorator factory to apply update_wrapper() to a wrapper function
unittest.runner
unittest.runner.TextTestResult(stream, descriptions, verbosity, *,\n  durations=None)[class] A test result class that can print formatted text results to a stream.
unittest.runner.TextTestRunner(stream=None, descriptions=True, verbosity=1,\n  failfast=False, buffer=False, resultclass=None, warnings=None, *, tb_locals=False,\n  durations=None)[class] A test runner class that displays results in textual form.
unittest.runner._SubTest(test_case, message, params)[class] A class whose instances are single test cases.
unittest.runner._WritelnDecorator(stream)[class] Used to decorate file-like objects with a handy 'writeln' method
unittest.runner.registerResult(result)[function]
unittest.signals
unittest.signals._InterruptHandler(default_handler)[class]
unittest.signals._interrupt_handler
unittest.signals._results
unittest.signals.installHandler()[function]
unittest.signals.registerResult(result)[function]
unittest.signals.removeHandler(method=None)[function]
unittest.signals.removeResult(result)[function]
unittest.signals.wraps(wrapped,\n  assigned=﴾'__module__'﹐ '__name__'﹐ '__qualname__'﹐ '__doc__'﹐ '__annotations__'﹐ '__type_params__'﴿, updated=﴾'__dict__'﹐﴿)[function] Decorator factory to apply update_wrapper() to a wrapper function
unittest.skip(reason)[function] Unconditionally skip a test.
unittest.skipIf(condition, reason)[function] Skip a test if the condition is true.
unittest.skipUnless(condition, reason)[function] Skip a test unless the condition is true.
unittest.suite
unittest.suite.BaseTestSuite(tests=﴾﴿)[class] A simple test suite that doesn't provide class or module shared fixtures.
unittest.suite.TestSuite(tests=﴾﴿)[class] A test suite is a composite test consisting of a number of TestCases.
unittest.suite._DebugResult()[class] Used by the TestSuite to hold previous class when running in debug.
unittest.suite._ErrorHolder(description)[class] Placeholder for a TestCase inside a result. As far as a TestResult\nis concerned, this looks exactly like a unit test. Used to insert\narbitrary errors into a test suite run.
unittest.suite._call_if_exists(parent, attr)[function]
unittest.suite._isnotsuite(test)[function] A crude way to tell apart testcases and suites with duck-typing
unittest.util
unittest.util.Counter(iterable=None, /, **kwds)[class] Dict subclass for counting hashable items.  Sometimes called a bag\nor multiset.  Elements are stored as dictionary keys and their counts\nare stored as dictionary values.
unittest.util._MAX_LENGTH
unittest.util._MIN_BEGIN_LEN
unittest.util._MIN_COMMON_LEN
unittest.util._MIN_DIFF_LEN
unittest.util._MIN_END_LEN
unittest.util._Mismatch(actual, expected, value)[class] Mismatch(actual, expected, value)
unittest.util._PLACEHOLDER_LEN
unittest.util._common_shorten_repr(*args)[function]
unittest.util._count_diff_all_purpose(actual, expected)[function] Returns list of (cnt_act, cnt_exp, elem) triples where the counts differ
unittest.util._count_diff_hashable(actual, expected)[function] Returns list of (cnt_act, cnt_exp, elem) triples where the counts differ
unittest.util._shorten(s, prefixlen, suffixlen)[function]
unittest.util.commonprefix(m)[function] Given a list of pathnames, returns the longest common leading component
unittest.util.namedtuple(typename, field_names, *, rename=False, defaults=None,\n  module=None)[function] Returns a new subclass of tuple with named fields.
unittest.util.safe_repr(obj, short=False)[function]
unittest.util.sorted_list_difference(expected, actual)[function] Finds elements in only one or the other of two, sorted input lists.
unittest.util.strclass(cls)[function]
unittest.util.three_way_cmp(x, y)[function] Return -1 if x < y, 0 if x == y and 1 if x > y
unittest.util.unorderable_list_difference(expected, actual)[function] Same behavior as sorted_list_difference but\nfor lists of unorderable items (like dicts).
urllib
urllib.error
urllib.error.ContentTooShortError(message, content)[class] Exception raised when downloaded size does not match content-length.
urllib.error.HTTPError(url, code, msg, hdrs, fp)[class] Raised when HTTP error occurs, but also acts like non-error return
urllib.error.URLError(reason, filename=None)[class] Base class for I/O related errors.
urllib.parse
urllib.parse.DefragResult(url, fragment)[class] DefragResult(url, fragment)
urllib.parse.DefragResultBytes(url, fragment)[class] DefragResult(url, fragment)
urllib.parse.ParseResult(scheme, netloc, path, params, query, fragment)[class] ParseResult(scheme, netloc, path, params, query, fragment)
urllib.parse.ParseResultBytes(scheme, netloc, path, params, query, fragment)[class] ParseResult(scheme, netloc, path, params, query, fragment)
urllib.parse.SplitResult(scheme, netloc, path, query, fragment)[class] SplitResult(scheme, netloc, path, query, fragment)
urllib.parse.SplitResultBytes(scheme, netloc, path, query, fragment)[class] SplitResult(scheme, netloc, path, query, fragment)
urllib.parse.parse_qs(qs, keep_blank_values=False, strict_parsing=False,\n  encoding='utf-8', errors='replace', max_num_fields=None, separator='&')[function] Parse a query given as a string argument.
urllib.parse.parse_qsl(qs, keep_blank_values=False, strict_parsing=False,\n  encoding='utf-8', errors='replace', max_num_fields=None, separator='&')[function] Parse a query given as a string argument.
urllib.parse.quote(string, safe='/', encoding=None, errors=None)[function] quote('abc def') -> 'abc%20def'
urllib.parse.quote_from_bytes(bs, safe='/')[function] Like quote(), but accepts a bytes object rather than a str, and does\nnot perform string-to-bytes encoding.  It always returns an ASCII string.\nquote_from_bytes(b'abc def?') -> 'abc%20def%3f'
urllib.parse.quote_plus(string, safe='', encoding=None, errors=None)[function] Like quote(), but also replace ' ' with '+', as required for quoting\nHTML form values. Plus signs in the original string are escaped unless\nthey are included in safe. It also does not have safe default to '/'.
urllib.parse.unquote(string, encoding='utf-8', errors='replace')[function] Replace %xx escapes by their single-character equivalent. The optional\nencoding and errors parameters specify how to decode percent-encoded\nsequences into Unicode characters, as accepted by the bytes.decode()\nmethod.\nBy default, percent-encoded sequences are decoded with UTF-8, and invalid\nsequences are replaced by a placeholder character.
urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')[function] Like unquote(), but also replace plus signs by spaces, as required for\nunquoting HTML form values.
urllib.parse.unquote_to_bytes(string)[function] unquote_to_bytes('abc%20def') -> b'abc def'.
urllib.parse.urldefrag(url)[function] Removes any existing fragment from URL.
urllib.parse.urlencode(query, doseq=False, safe='', encoding=None, errors=None,\n  quote_via=<??>)[function] Encode a dict or sequence of two-element tuples into a URL query string.
urllib.parse.urljoin(base, url, allow_fragments=True)[function] Join a base URL and a possibly relative URL to form an absolute\ninterpretation of the latter.
urllib.parse.urlparse(url, scheme='', allow_fragments=True)[function] Parse a URL into 6 components:\n<scheme>://<netloc>/<path>;<params>?<query>#<fragment>
urllib.parse.urlsplit(url, scheme='', allow_fragments=True)Parse a URL into 5 components:\n<scheme>://<netloc>/<path>?<query>#<fragment>
urllib.parse.urlunparse(components)[function] Put a parsed URL back together again.  This may result in a\nslightly different, but equivalent URL, if the URL that was parsed\noriginally had redundant delimiters, e.g. a ? with an empty query\n(the draft states that these are equivalent).
urllib.parse.urlunsplit(components)[function] Combine the elements of a tuple as returned by urlsplit() into a\ncomplete URL as a string. The data argument can be any five-item iterable.\nThis may result in a slightly different, but equivalent URL, if the URL that\nwas parsed originally had unnecessary delimiters (for example, a ? with an\nempty query; the RFC states that these are equivalent).
urllib.request
urllib.request.AbstractBasicAuthHandler(password_mgr=None)[class]
urllib.request.AbstractDigestAuthHandler(passwd=None)[class]
urllib.request.BaseHandler()[class]
urllib.request.CacheFTPHandler()[class]
urllib.request.DataHandler()[class]
urllib.request.FTPHandler()[class]
urllib.request.FancyURLopener(*args, **kwargs)[class] Derived class with handlers for errors we can handle (perhaps).
urllib.request.FileHandler()[class]
urllib.request.HTTPBasicAuthHandler(password_mgr=None)[class]
urllib.request.HTTPCookieProcessor(cookiejar=None)[class]
urllib.request.HTTPDefaultErrorHandler()[class]
urllib.request.HTTPDigestAuthHandler(passwd=None)[class] An authentication protocol defined by RFC 2069
urllib.request.HTTPErrorProcessor()[class] Process HTTP error responses.
urllib.request.HTTPHandler(debuglevel=None)[class]
urllib.request.HTTPPasswordMgr()[class]
urllib.request.HTTPPasswordMgrWithDefaultRealm()[class]
urllib.request.HTTPPasswordMgrWithPriorAuth(*args, **kwargs)[class]
urllib.request.HTTPRedirectHandler()[class]
urllib.request.HTTPSHandler(debuglevel=None, context=None, check_hostname=None)[class]
urllib.request.OpenerDirector()[class]
urllib.request.ProxyBasicAuthHandler(password_mgr=None)[class]
urllib.request.ProxyDigestAuthHandler(passwd=None)[class]
urllib.request.ProxyHandler(proxies=None)[class]
urllib.request.Request(url, data=None, headers={}, origin_req_host=None,\n  unverifiable=False, method=None)[class]
urllib.request.URLopener(proxies=None, **x509)[class] Class to open URLs.\nThis is a class rather than just a subroutine because we may need\nmore than one set of global protocol-specific options.\nNote -- this is a base class for those who don't want the\nautomatic handling of errors type 302 (relocated) and 401\n(authorization needed).
urllib.request.UnknownHandler()[class]
urllib.request.build_opener(*handlers)[function] Create an opener object from a list of handlers.
urllib.request.getproxies()[function] Return a dictionary of scheme -> proxy server URL mappings.
urllib.request.install_opener(opener)[function]
urllib.request.pathname2url(p)[function] OS-specific conversion from a file system path to a relative URL\nof the 'file' scheme; not recommended for general use.
urllib.request.url2pathname(url)[function] OS-specific conversion from a relative URL of the 'file' scheme\nto a file system path; not recommended for general use.
urllib.request.urlcleanup()[function] Clean up temporary files from urlretrieve calls.
urllib.request.urlopen(url, data=None, timeout=<??>, *, cafile=None,\n  capath=None, cadefault=False, context=None)[function] Open the URL url, which can be either a string or a Request object.
urllib.request.urlretrieve(url, filename=None, reporthook=None, data=None)[function] Retrieve a URL into a temporary location on disk.
urllib.response
urllib.response.addbase(fp)[class] Base class for addinfo and addclosehook. Is a good idea for garbage collection.
urllib.response.addclosehook(fp, closehook, *hookargs)[class] Class to add a close hook to an open file.
urllib.response.addinfo(fp, headers)[class] class to add an info() method to an open file.
urllib.response.addinfourl(fp, headers, url, code=None)[class] class to add info() and geturl() methods to an open file.
urllib.robotparser
urllib.robotparser.RobotFileParser(url='')[class] This class provides a set of methods to read, parse and answer\nquestions about a single robots.txt file.
uu
uu.Error()[class] Common base class for all non-exit exceptions.
uu.decode(in_file, out_file=None, mode=None, quiet=False)[function] Decode uuencoded file
uu.encode(in_file, out_file, name=None, mode=None, *, backtick=False)[function] Uuencode file
uuid
uuid.Enum(new_class_name, /, names, *, module=None, qualname=None, type=None,\n  start=1, boundary=None)[class] Create a collection of name/value pairs.
uuid.NAMESPACE_DNS
uuid.NAMESPACE_OID
uuid.NAMESPACE_URL
uuid.NAMESPACE_X500
uuid.RESERVED_FUTURE
uuid.RESERVED_MICROSOFT
uuid.RESERVED_NCS
uuid.RFC_4122
uuid.SafeUUID(*values)[class] An enumeration.
uuid.UUID(hex=None, bytes=None, bytes_le=None, fields=None, int=None,\n  version=None, *, is_safe=<??>)[class] Instances of the UUID class represent UUIDs as specified in RFC 4122.\nUUID objects are immutable, hashable, and usable as dictionary keys.\nConverting a UUID to a string with str() yields something in the form\n'12345678-1234-1234-1234-123456789abc'.  The UUID constructor accepts\nfive possible forms: a similar string of hexadecimal digits, or a tuple\nof six integer fields (with 32-bit, 16-bit, 16-bit, 8-bit, 8-bit, and\n48-bit values respectively) as an argument named 'fields', or a string\nof 16 bytes (with all the integer fields in big-endian order) as an\nargument named 'bytes', or a string of 16 bytes (with the first three\nfields in little-endian order) as an argument named 'bytes_le', or a\nsingle 128-bit integer as an argument named 'int'.
uuid.bytes_()[class] bytes(iterable_of_ints) -> bytes\nbytes(string, encoding[, errors]) -> bytes\nbytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\nbytes(int) -> bytes object of size given by the parameter initialized with null bytes\nbytes() -> empty bytes object
uuid.getnode()[function] Get the hardware address as a 48-bit positive integer.
uuid.int_()[class] int([x]) -> integer\nint(x, base=10) -> integer
uuid.main()[function] Run the uuid command line interface.
uuid.uuid1(node=None, clock_seq=None)[function] Generate a UUID from a host ID, sequence number, and the current time.\nIf 'node' is not given, getnode() is used to obtain the hardware\naddress.  If 'clock_seq' is given, it is used as the sequence number;\notherwise a random 14-bit sequence number is chosen.
uuid.uuid3(namespace, name)[function] Generate a UUID from the MD5 hash of a namespace UUID and a name.
uuid.uuid4()[function] Generate a random UUID.
uuid.uuid5(namespace, name)[function] Generate a UUID from the SHA-1 hash of a namespace UUID and a name.
vars([object])Show vars.
venv
venv.CORE_VENV_DEPS
venv.EnvBuilder(system_site_packages=False, clear=False, symlinks=False,\n  upgrade=False, with_pip=False, prompt=None, upgrade_deps=False)[class] This class exists to allow virtual environment creation to be\ncustomized. The constructor parameters determine the builder's\nbehaviour when called upon to create a virtual environment.
venv.create(env_dir, system_site_packages=False, clear=False, symlinks=False,\n  with_pip=False, prompt=None, upgrade_deps=False)[function] Create a virtual environment in a directory.
venv.logger
venv.main(args=None)[function]
warnings
warnings.catch_warnings(*, record=False, module=None, action=None,\n  category=<??>, lineno=0, append=False)[class] A context manager that copies and restores the warnings filter upon\nexiting the context.
warnings.filterwarnings(action, message='', category=<??>, module='', lineno=0,\n  append=False)[function] Insert an entry into the list of warnings filters (at the front).
warnings.formatwarning(message, category, filename, lineno, line=None)[function] Function to format a warning the standard way.
warnings.resetwarnings()[function] Clear the list of warning filters, so that no filters are active.
warnings.showwarning(message, category, filename, lineno, file=None, line=None)[function] Hook to write a warning to a file; replace if you like.
warnings.simplefilter(action, category=<??>, lineno=0, append=False)[function] Insert a simple entry into the list of warnings filters (at the front).
warnings.warn()Issue a warning, or maybe ignore it or raise an exception.
warnings.warn_explicit(message, category, filename, lineno, module=None,\n  registry=None, module_globals=None, source=None)Issue a warning, or maybe ignore it or raise an exception.
wave
wave.Error()[class] Common base class for all non-exit exceptions.
wave.Wave_read(f)[class] Variables used in this class:
wave.Wave_write(f)[class] Variables used in this class:
wave.open(f, mode=None)[function]
weakref
weakref.CallableProxyType()[class]
weakref.ProxyType()[class]
weakref.ProxyTypes
weakref.ReferenceType()[class]
weakref.WeakKeyDictionary(dict=None)[class] Mapping class that references keys weakly.
weakref.WeakMethod(meth, callback=None)[class] A custom `weakref.ref` subclass which simulates a weak reference to\na bound method, working around the lifetime problem of bound methods.
weakref.WeakSet(data=None)[class]
weakref.WeakValueDictionary(other=﴾﴿, /, **kw)[class] Mapping class that references values weakly.
weakref.finalize(obj, func, /, *args, **kwargs)[class] Class for finalization of weakrefable objects
weakref.getweakrefcount(object, /)Return the number of weak references to 'object'.
weakref.getweakrefs(object, /)Return a list of all weak reference objects pointing to 'object'.
weakref.proxy(object, callback=None, /)Create a proxy object that weakly references 'object'.
weakref.ref(object[, callback])[class]
webbrowser
webbrowser.Error()[class] Common base class for all non-exit exceptions.
webbrowser.get(using=None)[function] Return a browser launcher instance appropriate for the environment.
webbrowser.open(url, new=0, autoraise=True)[function] Display url using the default browser.
webbrowser.open_new(url)[function] Open url in a new window of the default browser.
webbrowser.open_new_tab(url)[function] Open url in a new page ("tab") of the default browser.
webbrowser.register(name, klass, instance=None, *, preferred=False)[function] Register a browser connector.
while
winreg
winreg.CloseKey(hkey, /)Closes a previously opened registry key.
winreg.ConnectRegistry(computer_name, key, /)Establishes a connection to the registry on another computer.
winreg.CreateKey(key, sub_key, /)Creates or opens the specified key.
winreg.CreateKeyEx(key, sub_key, reserved=0, access=131078)Creates or opens the specified key.
winreg.DeleteKey(key, sub_key, /)Deletes the specified key.
winreg.DeleteKeyEx(key, sub_key, access=256, reserved=0)Deletes the specified key (intended for 64-bit OS).
winreg.DeleteValue(key, value, /)Removes a named value from a registry key.
winreg.DisableReflectionKey(key, /)Disables registry reflection for 32bit processes running on a 64bit OS.
winreg.EnableReflectionKey(key, /)Restores registry reflection for the specified disabled key.
winreg.EnumKey(key, index, /)Enumerates subkeys of an open registry key.
winreg.EnumValue(key, index, /)Enumerates values of an open registry key.
winreg.ExpandEnvironmentStrings(string, /)Expand environment vars.
winreg.FlushKey(key, /)Writes all the attributes of a key to the registry.
winreg.HKEYType()[class] PyHKEY Object - A Python object, representing a win32 registry key.
winreg.HKEY_CLASSES_ROOT
winreg.HKEY_CURRENT_CONFIG
winreg.HKEY_CURRENT_USER
winreg.HKEY_DYN_DATA
winreg.HKEY_LOCAL_MACHINE
winreg.HKEY_PERFORMANCE_DATA
winreg.HKEY_USERS
winreg.KEY_ALL_ACCESS
winreg.KEY_CREATE_LINK
winreg.KEY_CREATE_SUB_KEY
winreg.KEY_ENUMERATE_SUB_KEYS
winreg.KEY_EXECUTE
winreg.KEY_NOTIFY
winreg.KEY_QUERY_VALUE
winreg.KEY_READ
winreg.KEY_SET_VALUE
winreg.KEY_WOW64_32KEY
winreg.KEY_WOW64_64KEY
winreg.KEY_WRITE
winreg.LoadKey(key, sub_key, file_name, /)Insert data into the registry from a file.
winreg.OpenKey(key, sub_key, reserved=0, access=131097)Opens the specified key.
winreg.OpenKeyEx(key, sub_key, reserved=0, access=131097)Opens the specified key.
winreg.QueryInfoKey(key, /)Returns information about a key.
winreg.QueryReflectionKey(key, /)Returns the reflection state for the specified key as a bool.
winreg.QueryValue(key, sub_key, /)Retrieves the unnamed value for a key.
winreg.QueryValueEx(key, name, /)Retrieves the type and value of a specified sub-key.
winreg.REG_BINARY
winreg.REG_CREATED_NEW_KEY
winreg.REG_DWORD
winreg.REG_DWORD_BIG_ENDIAN
winreg.REG_DWORD_LITTLE_ENDIAN
winreg.REG_EXPAND_SZ
winreg.REG_FULL_RESOURCE_DESCRIPTOR
winreg.REG_LEGAL_CHANGE_FILTER
winreg.REG_LEGAL_OPTION
winreg.REG_LINK
winreg.REG_MULTI_SZ
winreg.REG_NONE
winreg.REG_NOTIFY_CHANGE_ATTRIBUTES
winreg.REG_NOTIFY_CHANGE_LAST_SET
winreg.REG_NOTIFY_CHANGE_NAME
winreg.REG_NOTIFY_CHANGE_SECURITY
winreg.REG_NO_LAZY_FLUSH
winreg.REG_OPENED_EXISTING_KEY
winreg.REG_OPTION_BACKUP_RESTORE
winreg.REG_OPTION_CREATE_LINK
winreg.REG_OPTION_NON_VOLATILE
winreg.REG_OPTION_OPEN_LINK
winreg.REG_OPTION_RESERVED
winreg.REG_OPTION_VOLATILE
winreg.REG_QWORD
winreg.REG_QWORD_LITTLE_ENDIAN
winreg.REG_REFRESH_HIVE
winreg.REG_RESOURCE_LIST
winreg.REG_RESOURCE_REQUIREMENTS_LIST
winreg.REG_SZ
winreg.REG_WHOLE_HIVE_VOLATILE
winreg.SaveKey(key, file_name, /)Saves the specified key, and all its subkeys to the specified file.
winreg.SetValue(key, sub_key, type, value, /)Associates a value with a specified key.
winreg.SetValueEx(key, value_name, reserved, type, value, /)Stores data in the value field of an open registry key.
winreg.error()[class] Base class for I/O related errors.
winsound
winsound.Beep(frequency, duration)A wrapper around the Windows Beep API.
winsound.MB_ICONASTERISK
winsound.MB_ICONEXCLAMATION
winsound.MB_ICONHAND
winsound.MB_ICONQUESTION
winsound.MB_OK
winsound.MessageBeep(type=0)Call Windows MessageBeep(x).
winsound.PlaySound(sound, flags)A wrapper around the Windows PlaySound API.
winsound.SND_ALIAS
winsound.SND_APPLICATION
winsound.SND_ASYNC
winsound.SND_FILENAME
winsound.SND_LOOP
winsound.SND_MEMORY
winsound.SND_NODEFAULT
winsound.SND_NOSTOP
winsound.SND_NOWAIT
winsound.SND_PURGE
with
wsgiref
wsgiref.handlers
wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ,\n  multithread=True, multiprocess=False)[class] CGI-like systems using input/output/error streams and environ mapping
wsgiref.handlers.BaseHandler()[class] Manage the invocation of a WSGI application
wsgiref.handlers.CGIHandler()[class] CGI-based invocation via sys.stdin/stdout/stderr and os.environ
wsgiref.handlers.IISCGIHandler()[class] CGI-based invocation with workaround for IIS path bug
wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ,\n  multithread=True, multiprocess=False)[class] Handler that's just initialized with streams, environment, etc.
wsgiref.handlers.read_environ()[function] Read environment, fixing HTTP variables
wsgiref.headers
wsgiref.headers.Headers(headers=None)[class] Manage a collection of HTTP response headers
wsgiref.headers._formatparam(param, value=None, quote=1)[function] Convenience function to format and return a key=value pair.
wsgiref.headers.tspecials
wsgiref.simple_server
wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)[class] HTTP request handler base class.
wsgiref.simple_server.WSGIServer(server_address, RequestHandlerClass,\n  bind_and_activate=True)[class] BaseHTTPServer that implements the Python WSGI protocol
wsgiref.simple_server.demo_app(environ, start_response)[function]
wsgiref.simple_server.make_server(host, port, app, server_class=<??>,\n  handler_class=<??>)[function] Create a new WSGI server listening on `host` and `port` for `app`
wsgiref.util
wsgiref.util.FileWrapper(filelike, blksize=8192)[class] Wrapper to convert file-like objects to iterables
wsgiref.util.application_uri(environ)[function] Return the application's base URI (no PATH_INFO or QUERY_STRING)
wsgiref.util.guess_scheme(environ)[function] Return a guess for whether 'wsgi.url_scheme' should be 'http' or 'https'
wsgiref.util.request_uri(environ, include_query=True)[function] Return the full request URI, optionally including the query string
wsgiref.util.setup_testing_defaults(environ)[function] Update 'environ' with trivial defaults for testing purposes
wsgiref.util.shift_path_info(environ)[function] Shift a name from PATH_INFO to SCRIPT_NAME, returning it
wsgiref.validate
wsgiref.validate.validator(application)[function] When applied between a WSGI server and a WSGI application, this\nmiddleware will check for WSGI compliance on a number of levels.\nThis middleware does not modify the request or response in any\nway, but will raise an AssertionError if anything seems off\n(except for a failure to close the application iterator, which\nwill be printed to stderr -- there's no way to raise an exception\nat that point).
xdrlib
xdrlib.ConversionError(msg)[class] Exception class for this module. Use:
xdrlib.Error(msg)[class] Exception class for this module. Use:
xdrlib.Packer()[class] Pack various data representations into a buffer.
xdrlib.Unpacker(data)[class] Unpacks various data representations from the given buffer.
xml
xml.dom
xml.dom.DOMException(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.DOMSTRING_SIZE_ERR
xml.dom.DomstringSizeErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.EMPTY_NAMESPACE
xml.dom.EMPTY_PREFIX
xml.dom.HIERARCHY_REQUEST_ERR
xml.dom.HierarchyRequestErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.INDEX_SIZE_ERR
xml.dom.INUSE_ATTRIBUTE_ERR
xml.dom.INVALID_ACCESS_ERR
xml.dom.INVALID_CHARACTER_ERR
xml.dom.INVALID_MODIFICATION_ERR
xml.dom.INVALID_STATE_ERR
xml.dom.IndexSizeErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.InuseAttributeErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.InvalidAccessErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.InvalidCharacterErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.InvalidModificationErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.InvalidStateErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.NAMESPACE_ERR
xml.dom.NOT_FOUND_ERR
xml.dom.NOT_SUPPORTED_ERR
xml.dom.NO_DATA_ALLOWED_ERR
xml.dom.NO_MODIFICATION_ALLOWED_ERR
xml.dom.NamespaceErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.NoDataAllowedErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.NoModificationAllowedErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.Node()[class] Class giving the NodeType constants.
xml.dom.NodeFilter
xml.dom.NodeFilter.NodeFilter()[class] This is the DOM2 NodeFilter interface. It contains only constants.
xml.dom.NotFoundErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.NotSupportedErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.SYNTAX_ERR
xml.dom.SyntaxErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.UserDataHandler()[class] Class giving the operation constants for UserDataHandler.handle().
xml.dom.VALIDATION_ERR
xml.dom.ValidationErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.WRONG_DOCUMENT_ERR
xml.dom.WrongDocumentErr(*args, **kw)[class] Abstract base class for DOM exceptions.\nExceptions with specific codes are specializations of this class.
xml.dom.XHTML_NAMESPACE
xml.dom.XMLNS_NAMESPACE
xml.dom.XML_NAMESPACE
xml.dom.domreg
xml.dom.domreg._good_enough(dom, features)[function] _good_enough(dom, features) -> Return 1 if the dom offers the features
xml.dom.domreg._parse_feature_string(s)[function]
xml.dom.domreg.getDOMImplementation(name=None, features=﴾﴿)[function] getDOMImplementation(name = None, features = ()) -> DOM implementation.
xml.dom.domreg.registerDOMImplementation(name, factory)[function] registerDOMImplementation(name, factory)
xml.dom.domreg.registered
xml.dom.domreg.well_known_implementations
xml.dom.getDOMImplementation(name=None, features=﴾﴿)[function] getDOMImplementation(name = None, features = ()) -> DOM implementation.
xml.dom.minicompat
xml.dom.minicompat.EmptyNodeList(iterable=﴾﴿, /)[class] Built-in immutable sequence.
xml.dom.minicompat.NodeList(iterable=﴾﴿, /)[class] Built-in mutable sequence.
xml.dom.minicompat.StringTypes
xml.dom.minicompat.defproperty(klass, name, doc)[function]
xml.dom.minidom
xml.dom.minidom.Attr(qName, namespaceURI=None, localName=None, prefix=None)[class] Class giving the NodeType constants.
xml.dom.minidom.AttributeList(attrs, attrsNS, ownerElement)[class] The attribute list is a transient interface to the underlying\ndictionaries.  Mutations here will change the underlying element's\ndictionary.
xml.dom.minidom.CDATASection()[class] Mixin that makes childless-ness easy to implement and avoids\nthe complexity of the Node methods that deal with children.
xml.dom.minidom.CharacterData()[class] Mixin that makes childless-ness easy to implement and avoids\nthe complexity of the Node methods that deal with children.
xml.dom.minidom.Childless()[class] Mixin that makes childless-ness easy to implement and avoids\nthe complexity of the Node methods that deal with children.
xml.dom.minidom.Comment(data)[class] Mixin that makes childless-ness easy to implement and avoids\nthe complexity of the Node methods that deal with children.
xml.dom.minidom.DOMImplementation()[class]
xml.dom.minidom.DOMImplementationLS()[class]
xml.dom.minidom.Document()[class] Class giving the NodeType constants.
xml.dom.minidom.DocumentFragment()[class] Class giving the NodeType constants.
xml.dom.minidom.DocumentLS()[class] Mixin to create documents that conform to the load/save spec.
xml.dom.minidom.DocumentType(qualifiedName)[class] Mix-in class that supports the publicId and systemId attributes.
xml.dom.minidom.EMPTY_NAMESPACE
xml.dom.minidom.EMPTY_PREFIX
xml.dom.minidom.Element(tagName, namespaceURI=None, prefix=None,\n  localName=None)[class] Class giving the NodeType constants.
xml.dom.minidom.ElementInfo(name)[class] Object that represents content-model information for an element.
xml.dom.minidom.EmptyNodeList(iterable=﴾﴿, /)[class] Built-in immutable sequence.
xml.dom.minidom.Entity(name, publicId, systemId, notation)[class] Mix-in class that supports the publicId and systemId attributes.
xml.dom.minidom.Identified()[class] Mix-in class that supports the publicId and systemId attributes.
xml.dom.minidom.NamedNodeMap(attrs, attrsNS, ownerElement)[class] The attribute list is a transient interface to the underlying\ndictionaries.  Mutations here will change the underlying element's\ndictionary.
xml.dom.minidom.Node()[class] Class giving the NodeType constants.
xml.dom.minidom.NodeList(iterable=﴾﴿, /)[class] Built-in mutable sequence.
xml.dom.minidom.Notation(name, publicId, systemId)[class] Mix-in class that supports the publicId and systemId attributes.
xml.dom.minidom.ProcessingInstruction(target, data)[class] Mixin that makes childless-ness easy to implement and avoids\nthe complexity of the Node methods that deal with children.
xml.dom.minidom.ReadOnlySequentialNamedNodeMap(seq=﴾﴿)[class]
xml.dom.minidom.StringTypes
xml.dom.minidom.Text()[class] Mixin that makes childless-ness easy to implement and avoids\nthe complexity of the Node methods that deal with children.
xml.dom.minidom.TypeInfo(namespace, name)[class]
xml.dom.minidom.XMLNS_NAMESPACE
xml.dom.minidom._append_child(self, node)[function]
xml.dom.minidom._clear_id_cache(node)[function]
xml.dom.minidom._clone_node(node, deep, newOwnerDocument)[function] Clone a node and give it the new owner document.\nCalled by Node.cloneNode and Document.importNode
xml.dom.minidom._do_pulldom_parse(func, args, kwargs)[function]
xml.dom.minidom._get_containing_element(node)[function]
xml.dom.minidom._get_containing_entref(node)[function]
xml.dom.minidom._get_elements_by_tagName_helper(parent, name, rc)[function]
xml.dom.minidom._get_elements_by_tagName_ns_helper(parent, nsURI, localName,\n  rc)[function]
xml.dom.minidom._in_document(node)[function]
xml.dom.minidom._no_type
xml.dom.minidom._nodeTypes_with_children
xml.dom.minidom._nssplit(qualifiedName)[function]
xml.dom.minidom._set_attribute_node(element, attr)[function]
xml.dom.minidom._write_data(writer, data)[function] Writes datachars to writer.
xml.dom.minidom.defproperty(klass, name, doc)[function]
xml.dom.minidom.getDOMImplementation(features=None)[function]
xml.dom.minidom.parse(file, parser=None, bufsize=None)[function] Parse a file into a DOM by filename or file object.
xml.dom.minidom.parseString(string, parser=None)[function] Parse a file into a DOM from a string.
xml.dom.pulldom
xml.dom.pulldom.CHARACTERS
xml.dom.pulldom.COMMENT
xml.dom.pulldom.DOMEventStream(stream, parser, bufsize)[class]
xml.dom.pulldom.END_DOCUMENT
xml.dom.pulldom.END_ELEMENT
xml.dom.pulldom.ErrorHandler()[class]
xml.dom.pulldom.IGNORABLE_WHITESPACE
xml.dom.pulldom.PROCESSING_INSTRUCTION
xml.dom.pulldom.PullDOM(documentFactory=None)[class] Interface for receiving logical document content events.
xml.dom.pulldom.SAX2DOM(documentFactory=None)[class] Interface for receiving logical document content events.
xml.dom.pulldom.START_DOCUMENT
xml.dom.pulldom.START_ELEMENT
xml.dom.pulldom.default_bufsize
xml.dom.pulldom.parse(stream_or_string, parser=None, bufsize=None)[function]
xml.dom.pulldom.parseString(string, parser=None)[function]
xml.dom.registerDOMImplementation(name, factory)[function] registerDOMImplementation(name, factory)
xml.dom.xmlbuilder
xml.dom.xmlbuilder.DOMBuilder()[class]
xml.dom.xmlbuilder.DOMEntityResolver()[class]
xml.dom.xmlbuilder.DOMInputSource()[class]
xml.etree
xml.etree.ElementTree
xml.etree.ElementTree.C14NWriterTarget(write, *, with_comments=False,\n  strip_text=False, rewrite_prefixes=False, qname_aware_tags=None, qname_aware_attrs=None,\n  exclude_attrs=None, exclude_tags=None)[class] Canonicalization writer target for the XMLParser.
xml.etree.ElementTree.Comment(text=None)[function] Comment element factory.
xml.etree.ElementTree.Element(tag, attrib={}, **extra)[class]
xml.etree.ElementTree.ElementTree(element=None, file=None)[class] An XML element hierarchy.
xml.etree.ElementTree.PI(target, text=None)[function] Processing Instruction element factory.
xml.etree.ElementTree.ParseError()[class] Invalid syntax.
xml.etree.ElementTree.ProcessingInstruction(target, text=None)[function] Processing Instruction element factory.
xml.etree.ElementTree.QName(text_or_uri, tag=None)[class] Qualified name wrapper.
xml.etree.ElementTree.SubElement(parent, tag, attrib={}, **extra)
xml.etree.ElementTree.TreeBuilder(element_factory=None, *,\n  comment_factory=None, pi_factory=None, insert_comments=False, insert_pis=False)[class]
xml.etree.ElementTree.VERSION
xml.etree.ElementTree.XML(text, parser=None)[function] Parse XML document from string constant.
xml.etree.ElementTree.XMLID(text, parser=None)[function] Parse XML document from string constant for its IDs.
xml.etree.ElementTree.XMLParser(html=0, target=None, encoding=None)[class]
xml.etree.ElementTree.XMLPullParser(events=None, *, _parser=None)[class]
xml.etree.ElementTree.canonicalize(xml_data=None, *, out=None, from_file=None,\n  **options)[function] Convert XML to its C14N 2.0 serialised form.
xml.etree.ElementTree.dump(elem)[function] Write element tree or element structure to sys.stdout.
xml.etree.ElementTree.fromstring(text, parser=None)[function] Parse XML document from string constant.
xml.etree.ElementTree.fromstringlist(sequence, parser=None)[function] Parse XML document from sequence of string fragments.
xml.etree.ElementTree.indent(tree, space='  ', level=0)[function] Indent an XML document by inserting newlines and indentation space\nafter elements.
xml.etree.ElementTree.iselement(element)[function] Return True if *element* appears to be an Element.
xml.etree.ElementTree.iterparse(source, events=None, parser=None)[function] Incrementally parse XML document into ElementTree.
xml.etree.ElementTree.parse(source, parser=None)[function] Parse XML document into element tree.
xml.etree.ElementTree.register_namespace(prefix, uri)[function] Register a namespace prefix.
xml.etree.ElementTree.tostring(element, encoding=None, method=None, *,\n  xml_declaration=None, default_namespace=None, short_empty_elements=True)[function] Generate string representation of XML element.
xml.etree.ElementTree.tostringlist(element, encoding=None, method=None, *,\n  xml_declaration=None, default_namespace=None, short_empty_elements=True)[function]
xml.parsers
xml.parsers.expat
xml.parsers.expat.EXPAT_VERSION
xml.parsers.expat.ErrorString(code, /)Returns string error for given number.
xml.parsers.expat.ExpatError()[class] Common base class for all non-exit exceptions.
xml.parsers.expat.ParserCreate(encoding=None, namespace_separator=None)Return a new XML parser object.
xml.parsers.expat.XMLParserType()[class] XML parser
xml.parsers.expat.XML_PARAM_ENTITY_PARSING_ALWAYS
xml.parsers.expat.XML_PARAM_ENTITY_PARSING_NEVER
xml.parsers.expat.XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE
xml.parsers.expat.error()[class] Common base class for all non-exit exceptions.
xml.parsers.expat.errors
xml.parsers.expat.errors.XML_ERROR_ABORTED
xml.parsers.expat.errors.XML_ERROR_AMPLIFICATION_LIMIT_BREACH
xml.parsers.expat.errors.XML_ERROR_ASYNC_ENTITY
xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF
xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF
xml.parsers.expat.errors.XML_ERROR_BINARY_ENTITY_REF
xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING
xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE
xml.parsers.expat.errors.XML_ERROR_ENTITY_DECLARED_IN_PE
xml.parsers.expat.errors.XML_ERROR_EXTERNAL_ENTITY_HANDLING
xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD
xml.parsers.expat.errors.XML_ERROR_FINISHED
xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE
xml.parsers.expat.errors.XML_ERROR_INCORRECT_ENCODING
xml.parsers.expat.errors.XML_ERROR_INVALID_ARGUMENT
xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN
xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT
xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI
xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE
xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED
xml.parsers.expat.errors.XML_ERROR_NO_BUFFER
xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS
xml.parsers.expat.errors.XML_ERROR_NO_MEMORY
xml.parsers.expat.errors.XML_ERROR_PARAM_ENTITY_REF
xml.parsers.expat.errors.XML_ERROR_PARTIAL_CHAR
xml.parsers.expat.errors.XML_ERROR_PUBLICID
xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF
xml.parsers.expat.errors.XML_ERROR_RESERVED_NAMESPACE_URI
xml.parsers.expat.errors.XML_ERROR_RESERVED_PREFIX_XML
xml.parsers.expat.errors.XML_ERROR_RESERVED_PREFIX_XMLNS
xml.parsers.expat.errors.XML_ERROR_SUSPENDED
xml.parsers.expat.errors.XML_ERROR_SUSPEND_PE
xml.parsers.expat.errors.XML_ERROR_SYNTAX
xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH
xml.parsers.expat.errors.XML_ERROR_TEXT_DECL
xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX
xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION
xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN
xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX
xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY
xml.parsers.expat.errors.XML_ERROR_UNEXPECTED_STATE
xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING
xml.parsers.expat.errors.XML_ERROR_XML_DECL
xml.parsers.expat.errors.codes
xml.parsers.expat.errors.messages
xml.parsers.expat.expat_CAPI
xml.parsers.expat.features
xml.parsers.expat.model
xml.parsers.expat.model.XML_CQUANT_NONE
xml.parsers.expat.model.XML_CQUANT_OPT
xml.parsers.expat.model.XML_CQUANT_PLUS
xml.parsers.expat.model.XML_CQUANT_REP
xml.parsers.expat.model.XML_CTYPE_ANY
xml.parsers.expat.model.XML_CTYPE_CHOICE
xml.parsers.expat.model.XML_CTYPE_EMPTY
xml.parsers.expat.model.XML_CTYPE_MIXED
xml.parsers.expat.model.XML_CTYPE_NAME
xml.parsers.expat.model.XML_CTYPE_SEQ
xml.parsers.expat.native_encoding
xml.parsers.expat.version_info
xml.sax
xml.sax.ContentHandler()[class] Interface for receiving logical document content events.
xml.sax.ErrorHandler()[class] Basic interface for SAX error handlers.
xml.sax.InputSource(system_id=None)[class] Encapsulation of the information needed by the XMLReader to\nread entities.
xml.sax.SAXException(msg, exception=None)[class] Encapsulate an XML error or warning. This class can contain\nbasic error or warning information from either the XML parser or\nthe application: you can subclass it to provide additional\nfunctionality, or to add localization. Note that although you will\nreceive a SAXException as the argument to the handlers in the\nErrorHandler interface, you are not actually required to raise\nthe exception; instead, you can simply read the information in\nit.
xml.sax.SAXNotRecognizedException(msg, exception=None)[class] Exception class for an unrecognized identifier.
xml.sax.SAXNotSupportedException(msg, exception=None)[class] Exception class for an unsupported operation.
xml.sax.SAXParseException(msg, exception, locator)[class] Encapsulate an XML parse error or warning.
xml.sax.SAXReaderNotAvailable(msg, exception=None)[class] Exception class for a missing driver.
xml.sax._create_parser(parser_name)[function]
xml.sax._false
xml.sax.default_parser_list
xml.sax.handler
xml.sax.handler.ContentHandler()[class] Interface for receiving logical document content events.
xml.sax.handler.DTDHandler()[class] Handle DTD events.
xml.sax.handler.EntityResolver()[class] Basic interface for resolving entities. If you create an object\nimplementing this interface, then register the object with your\nParser, the parser will call the method in your object to\nresolve all external entities. Note that DefaultHandler implements\nthis interface with the default behaviour.
xml.sax.handler.ErrorHandler()[class] Basic interface for SAX error handlers.
xml.sax.handler.LexicalHandler()[class] Optional SAX2 handler for lexical events.
xml.sax.handler.all_features
xml.sax.handler.all_properties
xml.sax.handler.feature_external_ges
xml.sax.handler.feature_external_pes
xml.sax.handler.feature_namespace_prefixes
xml.sax.handler.feature_namespaces
xml.sax.handler.feature_string_interning
xml.sax.handler.feature_validation
xml.sax.handler.property_declaration_handler
xml.sax.handler.property_dom_node
xml.sax.handler.property_encoding
xml.sax.handler.property_interning_dict
xml.sax.handler.property_lexical_handler
xml.sax.handler.property_xml_string
xml.sax.handler.version
xml.sax.make_parser(parser_list=﴾﴿)[function] Creates and returns a SAX parser.
xml.sax.parse(source, handler, errorHandler=<??>)[function]
xml.sax.parseString(string, handler, errorHandler=<??>)[function]
xml.sax.saxutils
xml.sax.saxutils.XMLFilterBase(parent=None)[class] This class is designed to sit between an XMLReader and the\nclient application's event handlers.  By default, it does nothing\nbut pass requests up to the reader and events on to the handlers\nunmodified, but subclasses can override specific methods to modify\nthe event stream or the configuration requests as they pass\nthrough.
xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1',\n  short_empty_elements=False)[class] Interface for receiving logical document content events.
xml.sax.saxutils._gettextwriter(out, encoding)[function]
xml.sax.saxutils.escape(data, entities={})[function] Escape &, <, and > in a string of data.
xml.sax.saxutils.prepare_input_source(source, base='')[function] This function takes an InputSource and an optional base URL and\nreturns a fully resolved InputSource object ready for reading.
xml.sax.saxutils.quoteattr(data, entities={})[function] Escape and quote an attribute value.
xml.sax.saxutils.unescape(data, entities={})[function] Unescape &amp;, &lt;, and &gt; in a string of data.
xml.sax.xmlreader
xml.sax.xmlreader.AttributesImpl(attrs)[class]
xml.sax.xmlreader.AttributesNSImpl(attrs, qnames)[class]
xml.sax.xmlreader.IncrementalParser(bufsize=65536)[class] This interface adds three extra methods to the XMLReader\ninterface that allow XML parsers to support incremental\nparsing. Support for this interface is optional, since not all\nunderlying XML parsers support this functionality.
xml.sax.xmlreader.InputSource(system_id=None)[class] Encapsulation of the information needed by the XMLReader to\nread entities.
xml.sax.xmlreader.Locator()[class] Interface for associating a SAX event with a document\nlocation. A locator object will return valid results only during\ncalls to DocumentHandler methods; at any other time, the\nresults are unpredictable.
xml.sax.xmlreader.SAXNotRecognizedException(msg, exception=None)[class] Exception class for an unrecognized identifier.
xml.sax.xmlreader.SAXNotSupportedException(msg, exception=None)[class] Exception class for an unsupported operation.
xml.sax.xmlreader.XMLReader()[class] Interface for reading an XML document using callbacks.
xml.sax.xmlreader._test()[function]
xmlrpc
xmlrpc.client
xmlrpc.client.APPLICATION_ERROR
xmlrpc.client.Binary(data=None)[class] Wrapper for binary data.
xmlrpc.client.Boolean()[class] bool(x) -> bool
xmlrpc.client.BytesIO(initial_bytes=b'')[class] Buffered I/O implementation using an in-memory bytes buffer.
xmlrpc.client.DateTime(value=0)[class] DateTime wrapper for an ISO 8601 string or time tuple or\nlocaltime integer value to generate 'dateTime.iso8601' XML-RPC\nvalue.
xmlrpc.client.Decimal(value='0', context=None)[class] Construct a new Decimal object. 'value' can be an integer, string, tuple,\nor another Decimal object. If no value is given, return Decimal('0'). The\ncontext does not affect the conversion and is only passed to determine if\nthe InvalidOperation trap is active.
xmlrpc.client.Error()[class] Base class for client errors.
xmlrpc.client.ExpatParser(target)[class]
xmlrpc.client.FastMarshaller
xmlrpc.client.FastParser
xmlrpc.client.FastUnmarshaller
xmlrpc.client.Fault(faultCode, faultString, **extra)[class] Indicates an XML-RPC fault package.
xmlrpc.client.GzipDecodedResponse(response)[class] a file-like object to decode a response encoded with the gzip\nmethod, as described in RFC 1952.
xmlrpc.client.INTERNAL_ERROR
xmlrpc.client.INVALID_ENCODING_CHAR
xmlrpc.client.INVALID_METHOD_PARAMS
xmlrpc.client.INVALID_XMLRPC
xmlrpc.client.MAXINT
xmlrpc.client.METHOD_NOT_FOUND
xmlrpc.client.MININT
xmlrpc.client.Marshaller(encoding=None, allow_none=False)[class] Generate an XML-RPC params chunk from a Python data structure.
xmlrpc.client.MultiCall(server)[class] server -> an object used to boxcar method calls
xmlrpc.client.MultiCallIterator(results)[class] Iterates over the results of a multicall. Exceptions are\nraised in response to xmlrpc faults.
xmlrpc.client.NOT_WELLFORMED_ERROR
xmlrpc.client.PARSE_ERROR
xmlrpc.client.ProtocolError(url, errcode, errmsg, headers)[class] Indicates an HTTP protocol error.
xmlrpc.client.ResponseError()[class] Indicates a broken response package.
xmlrpc.client.SERVER_ERROR
xmlrpc.client.SYSTEM_ERROR
xmlrpc.client.SafeTransport(use_datetime=False, use_builtin_types=False, *,\n  headers=﴾﴿, context=None)[class] Handles an HTTPS transaction to an XML-RPC server.
xmlrpc.client.Server(uri, transport=None, encoding=None, verbose=False,\n  allow_none=False, use_datetime=False, use_builtin_types=False, *, headers=﴾﴿, context=None)[class] uri [,options] -> a logical connection to an XML-RPC server
xmlrpc.client.ServerProxy(uri, transport=None, encoding=None, verbose=False,\n  allow_none=False, use_datetime=False, use_builtin_types=False, *, headers=﴾﴿, context=None)[class] uri [,options] -> a logical connection to an XML-RPC server
xmlrpc.client.TRANSPORT_ERROR
xmlrpc.client.Transport(use_datetime=False, use_builtin_types=False, *,\n  headers=﴾﴿)[class] Handles an HTTP transaction to an XML-RPC server.
xmlrpc.client.UNSUPPORTED_ENCODING
xmlrpc.client.Unmarshaller(use_datetime=False, use_builtin_types=False)[class] Unmarshal an XML-RPC response, based on incoming XML event\nmessages (start, data, end).  Call close() to get the resulting\ndata structure.
xmlrpc.client.WRAPPERS
xmlrpc.client._Method(send, name)[class]
xmlrpc.client._MultiCallMethod(call_list, name)[class]
xmlrpc.client._binary(data)[function]
xmlrpc.client._datetime(data)[function]
xmlrpc.client._datetime_type(data)[function]
xmlrpc.client._iso8601_format(value)[function]
xmlrpc.client._strftime(value)[function]
xmlrpc.client.boolean()[class] bool(x) -> bool
xmlrpc.client.datetime()[class] datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
xmlrpc.client.dumps(params, methodname=None, methodresponse=None,\n  encoding=None, allow_none=False)[function] data [,options] -> marshalled data
xmlrpc.client.escape(s)[function]
xmlrpc.client.getparser(use_datetime=False, use_builtin_types=False)[function] getparser() -> parser, unmarshaller
xmlrpc.client.gzip_decode(data, max_decode=20971520)[function] gzip encoded data -> unencoded data
xmlrpc.client.gzip_encode(data)[function] data -> gzip encoded data
xmlrpc.client.loads(data, use_datetime=False, use_builtin_types=False)[function] data -> unmarshalled data, method name
xmlrpc.server
xmlrpc.server.BaseHTTPRequestHandler(request, client_address, server)[class] HTTP request handler base class.
xmlrpc.server.CGIXMLRPCRequestHandler(allow_none=False, encoding=None,\n  use_builtin_types=False)[class] Simple handler for XML-RPC data passed through CGI.
xmlrpc.server.DocCGIXMLRPCRequestHandler()[class] Handler for XML-RPC data and documentation requests passed through\nCGI
xmlrpc.server.DocXMLRPCRequestHandler(request, client_address, server)[class] XML-RPC and documentation request handler class.
xmlrpc.server.DocXMLRPCServer(addr, requestHandler=<??>, logRequests=True,\n  allow_none=False, encoding=None, bind_and_activate=True, use_builtin_types=False)[class] XML-RPC and HTML documentation server.
xmlrpc.server.Fault(faultCode, faultString, **extra)[class] Indicates an XML-RPC fault package.
xmlrpc.server.MultiPathXMLRPCServer(addr, requestHandler=<??>,\n  logRequests=True, allow_none=False, encoding=None, bind_and_activate=True,\n  use_builtin_types=False)[class] Multipath XML-RPC Server\nThis specialization of SimpleXMLRPCServer allows the user to create\nmultiple Dispatcher instances and assign them to different\nHTTP request paths.  This makes it possible to run two or more\n'virtual XML-RPC servers' at the same port.\nMake sure that the requestHandler accepts the paths in question.
xmlrpc.server.ServerHTMLDoc()[class] Class used to generate pydoc HTML document for a server
xmlrpc.server.SimpleXMLRPCDispatcher(allow_none=False, encoding=None,\n  use_builtin_types=False)[class] Mix-in class that dispatches XML-RPC requests.
xmlrpc.server.SimpleXMLRPCRequestHandler(request, client_address, server)[class] Simple XML-RPC request handler class.
xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=<??>, logRequests=True,\n  allow_none=False, encoding=None, bind_and_activate=True, use_builtin_types=False)[class] Simple XML-RPC server.
xmlrpc.server.XMLRPCDocGenerator()[class] Generates documentation for an XML-RPC server.
xmlrpc.server.dumps(params, methodname=None, methodresponse=None,\n  encoding=None, allow_none=False)[function] data [,options] -> marshalled data
xmlrpc.server.fcntl
xmlrpc.server.gzip_decode(data, max_decode=20971520)[function] gzip encoded data -> unencoded data
xmlrpc.server.gzip_encode(data)[function] data -> gzip encoded data
xmlrpc.server.list_public_methods(obj)[function] Returns a list of attribute strings, found in the specified\nobject, which represent callable attributes
xmlrpc.server.loads(data, use_datetime=False, use_builtin_types=False)[function] data -> unmarshalled data, method name
xmlrpc.server.partial()[class] partial(func, *args, **keywords) - new function with partial application\nof the given arguments and keywords.
xmlrpc.server.resolve_dotted_attribute(obj, attr, allow_dotted_names=True)[function] resolve_dotted_attribute(a, 'b.c.d') => a.b.c.d
xmlrpc.server.signature(obj, *, follow_wrapped=True, globals=None, locals=None,\n  eval_str=False)[function] Get a signature object for the passed callable.
xxsubtype
xxsubtype.bench()
xxsubtype.spamdict()[class] dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)
xxsubtype.spamlist(iterable=﴾﴿, /)[class] Built-in mutable sequence.
yield
zip(*iterables)[class] zip(*iterables, strict=False) --> Yield tuples until an input is exhausted.
zipapp
zipapp.ZipAppError()[class] Inappropriate argument value (of correct type).
zipapp.create_archive(source, target=None, interpreter=None, main=None,\n  filter=None, compressed=False)[function] Create an application archive from SOURCE.
zipapp.get_interpreter(archive)[function]
zipfile
zipfile.BadZipFile()[class] Common base class for all non-exit exceptions.
zipfile.BadZipfile()[class] Common base class for all non-exit exceptions.
zipfile.LargeZipFile()[class] Raised when writing a zipfile, the zipfile requires ZIP64 extensions\nand those extensions are disabled.
zipfile.Path(root, at='')[class] A pathlib-compatible interface for zip files.
zipfile.PyZipFile(file, mode='r', compression=0, allowZip64=True, optimize=-1)[class] Class to create ZIP archives with Python library files and packages.
zipfile.ZIP_BZIP2
zipfile.ZIP_DEFLATED
zipfile.ZIP_LZMA
zipfile.ZIP_STORED
zipfile.ZipFile(file, mode='r', compression=0, allowZip64=True,\n  compresslevel=None, *, strict_timestamps=True, metadata_encoding=None)[class] Class with methods to open, read, write, close, list zip files.
zipfile.ZipInfo(filename='NoName', date_time=﴾1980﹐ 1﹐ 1﹐ 0﹐ 0﹐ 0﴿)[class] Class with attributes describing each file in the ZIP archive.
zipfile.error()[class] Common base class for all non-exit exceptions.
zipfile.is_zipfile(filename)[function] Quickly see if a file is a ZIP file by checking the magic number.
zipimport
zipimport.ZipImportError()[class] Import can't find module, or can't find name in module.
zipimport.zipimporter(path)[class] zipimporter(archivepath) -> zipimporter object
zlib
zlib.DEFLATED
zlib.DEF_BUF_SIZE
zlib.DEF_MEM_LEVEL
zlib.MAX_WBITS
zlib.ZLIB_RUNTIME_VERSION
zlib.ZLIB_VERSION
zlib.Z_BEST_COMPRESSION
zlib.Z_BEST_SPEED
zlib.Z_BLOCK
zlib.Z_DEFAULT_COMPRESSION
zlib.Z_DEFAULT_STRATEGY
zlib.Z_FILTERED
zlib.Z_FINISH
zlib.Z_FIXED
zlib.Z_FULL_FLUSH
zlib.Z_HUFFMAN_ONLY
zlib.Z_NO_COMPRESSION
zlib.Z_NO_FLUSH
zlib.Z_PARTIAL_FLUSH
zlib.Z_RLE
zlib.Z_SYNC_FLUSH
zlib.Z_TREES
zlib._ZlibDecompressor(wbits=15, zdict=b'')[class] Create a decompressor object for decompressing data incrementally.
zlib.adler32(data, value=1, /)Compute an Adler-32 checksum of data.
zlib.compress(data, /, level=-1, wbits=15)Returns a bytes object containing compressed data.
zlib.compressobj(level=-1, method=8, wbits=15, memLevel=8, strategy=0,\n  zdict=None)Return a compressor object.
zlib.crc32(data, value=0, /)Compute a CRC-32 checksum of data.
zlib.decompress(data, /, wbits=15, bufsize=16384)Returns a bytes object containing the uncompressed data.
zlib.decompressobj(wbits=15, zdict=b'')Return a decompressor object.
zlib.error()[class] Common base class for all non-exit exceptions.
zoneinfo
zoneinfo.InvalidTZPathWarning()[class] Warning raised if an invalid path is specified in PYTHONTZPATH.
zoneinfo.TZPATH
zoneinfo.ZoneInfo(key)[class] Abstract base class for time zone info objects.
zoneinfo.ZoneInfoNotFoundError()[class] Exception raised when a ZoneInfo key is not found.
zoneinfo.available_timezones()[function] Returns a set containing all available time zones.
zoneinfo.reset_tzpath(to=None)[function]
